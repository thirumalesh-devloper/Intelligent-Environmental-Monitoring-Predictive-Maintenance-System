
thiru_own.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abc4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800ac80  0800ac80  0000bc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3cc  0800b3cc  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b3cc  0800b3cc  0000c3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3d4  0800b3d4  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3d4  0800b3d4  0000c3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3d8  0800b3d8  0000c3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b3dc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001294  200001d8  0800b5b0  0000d1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000146c  0800b5b0  0000d46c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e36b  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002111  00000000  00000000  0001b567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0001d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ec  00000000  00000000  0001e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5dc  00000000  00000000  0001eab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010162  00000000  00000000  0003b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a56d2  00000000  00000000  0004b1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f08c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a60  00000000  00000000  000f0908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f4368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d8 	.word	0x200001d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ac68 	.word	0x0800ac68

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001dc 	.word	0x200001dc
 8000100:	0800ac68 	.word	0x0800ac68

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8cb 	bl	80015d4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f80f 	bl	800146c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8bd 	bl	80015d4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f8b3 	bl	80015d4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f839 	bl	80014f4 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f82f 	bl	80014f4 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_ldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d115      	bne.n	80004d4 <__aeabi_ldivmod+0x30>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d113      	bne.n	80004d4 <__aeabi_ldivmod+0x30>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	db06      	blt.n	80004be <__aeabi_ldivmod+0x1a>
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_ldivmod+0x12>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d006      	beq.n	80004c4 <__aeabi_ldivmod+0x20>
 80004b6:	2000      	movs	r0, #0
 80004b8:	43c0      	mvns	r0, r0
 80004ba:	0841      	lsrs	r1, r0, #1
 80004bc:	e002      	b.n	80004c4 <__aeabi_ldivmod+0x20>
 80004be:	2180      	movs	r1, #128	@ 0x80
 80004c0:	0609      	lsls	r1, r1, #24
 80004c2:	2000      	movs	r0, #0
 80004c4:	b407      	push	{r0, r1, r2}
 80004c6:	4802      	ldr	r0, [pc, #8]	@ (80004d0 <__aeabi_ldivmod+0x2c>)
 80004c8:	a101      	add	r1, pc, #4	@ (adr r1, 80004d0 <__aeabi_ldivmod+0x2c>)
 80004ca:	1840      	adds	r0, r0, r1
 80004cc:	9002      	str	r0, [sp, #8]
 80004ce:	bd03      	pop	{r0, r1, pc}
 80004d0:	ffffff55 	.word	0xffffff55
 80004d4:	b403      	push	{r0, r1}
 80004d6:	4668      	mov	r0, sp
 80004d8:	b501      	push	{r0, lr}
 80004da:	9802      	ldr	r0, [sp, #8]
 80004dc:	f000 f834 	bl	8000548 <__gnu_ldivmod_helper>
 80004e0:	9b01      	ldr	r3, [sp, #4]
 80004e2:	469e      	mov	lr, r3
 80004e4:	b002      	add	sp, #8
 80004e6:	bc0c      	pop	{r2, r3}
 80004e8:	4770      	bx	lr
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_lmul>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	46ce      	mov	lr, r9
 80004f0:	4699      	mov	r9, r3
 80004f2:	0c03      	lsrs	r3, r0, #16
 80004f4:	469c      	mov	ip, r3
 80004f6:	0413      	lsls	r3, r2, #16
 80004f8:	4647      	mov	r7, r8
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0404      	lsls	r4, r0, #16
 8000504:	0c24      	lsrs	r4, r4, #16
 8000506:	b580      	push	{r7, lr}
 8000508:	0007      	movs	r7, r0
 800050a:	0c10      	lsrs	r0, r2, #16
 800050c:	434b      	muls	r3, r1
 800050e:	4365      	muls	r5, r4
 8000510:	4341      	muls	r1, r0
 8000512:	4360      	muls	r0, r4
 8000514:	0c2c      	lsrs	r4, r5, #16
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	1824      	adds	r4, r4, r0
 800051a:	468c      	mov	ip, r1
 800051c:	42a3      	cmp	r3, r4
 800051e:	d903      	bls.n	8000528 <__aeabi_lmul+0x3c>
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	025b      	lsls	r3, r3, #9
 8000524:	4698      	mov	r8, r3
 8000526:	44c4      	add	ip, r8
 8000528:	4649      	mov	r1, r9
 800052a:	4379      	muls	r1, r7
 800052c:	4356      	muls	r6, r2
 800052e:	0c23      	lsrs	r3, r4, #16
 8000530:	042d      	lsls	r5, r5, #16
 8000532:	0c2d      	lsrs	r5, r5, #16
 8000534:	1989      	adds	r1, r1, r6
 8000536:	4463      	add	r3, ip
 8000538:	0424      	lsls	r4, r4, #16
 800053a:	1960      	adds	r0, r4, r5
 800053c:	18c9      	adds	r1, r1, r3
 800053e:	bcc0      	pop	{r6, r7}
 8000540:	46b9      	mov	r9, r7
 8000542:	46b0      	mov	r8, r6
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)

08000548 <__gnu_ldivmod_helper>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	46ce      	mov	lr, r9
 800054c:	4647      	mov	r7, r8
 800054e:	b580      	push	{r7, lr}
 8000550:	4691      	mov	r9, r2
 8000552:	4698      	mov	r8, r3
 8000554:	0004      	movs	r4, r0
 8000556:	000d      	movs	r5, r1
 8000558:	f002 f932 	bl	80027c0 <__divdi3>
 800055c:	0007      	movs	r7, r0
 800055e:	000e      	movs	r6, r1
 8000560:	0002      	movs	r2, r0
 8000562:	000b      	movs	r3, r1
 8000564:	4648      	mov	r0, r9
 8000566:	4641      	mov	r1, r8
 8000568:	f7ff ffc0 	bl	80004ec <__aeabi_lmul>
 800056c:	1a24      	subs	r4, r4, r0
 800056e:	418d      	sbcs	r5, r1
 8000570:	9b08      	ldr	r3, [sp, #32]
 8000572:	0038      	movs	r0, r7
 8000574:	0031      	movs	r1, r6
 8000576:	601c      	str	r4, [r3, #0]
 8000578:	605d      	str	r5, [r3, #4]
 800057a:	bcc0      	pop	{r6, r7}
 800057c:	46b9      	mov	r9, r7
 800057e:	46b0      	mov	r8, r6
 8000580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000582:	46c0      	nop			@ (mov r8, r8)

08000584 <__aeabi_i2f>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	2800      	cmp	r0, #0
 8000588:	d012      	beq.n	80005b0 <__aeabi_i2f+0x2c>
 800058a:	17c3      	asrs	r3, r0, #31
 800058c:	18c5      	adds	r5, r0, r3
 800058e:	405d      	eors	r5, r3
 8000590:	0fc4      	lsrs	r4, r0, #31
 8000592:	0028      	movs	r0, r5
 8000594:	f002 f8f6 	bl	8002784 <__clzsi2>
 8000598:	239e      	movs	r3, #158	@ 0x9e
 800059a:	1a1b      	subs	r3, r3, r0
 800059c:	2b96      	cmp	r3, #150	@ 0x96
 800059e:	dc0f      	bgt.n	80005c0 <__aeabi_i2f+0x3c>
 80005a0:	2808      	cmp	r0, #8
 80005a2:	d038      	beq.n	8000616 <__aeabi_i2f+0x92>
 80005a4:	3808      	subs	r0, #8
 80005a6:	4085      	lsls	r5, r0
 80005a8:	026d      	lsls	r5, r5, #9
 80005aa:	0a6d      	lsrs	r5, r5, #9
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	e002      	b.n	80005b6 <__aeabi_i2f+0x32>
 80005b0:	2400      	movs	r4, #0
 80005b2:	2000      	movs	r0, #0
 80005b4:	2500      	movs	r5, #0
 80005b6:	05c0      	lsls	r0, r0, #23
 80005b8:	4328      	orrs	r0, r5
 80005ba:	07e4      	lsls	r4, r4, #31
 80005bc:	4320      	orrs	r0, r4
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	2b99      	cmp	r3, #153	@ 0x99
 80005c2:	dc14      	bgt.n	80005ee <__aeabi_i2f+0x6a>
 80005c4:	1f42      	subs	r2, r0, #5
 80005c6:	4095      	lsls	r5, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	4915      	ldr	r1, [pc, #84]	@ (8000620 <__aeabi_i2f+0x9c>)
 80005cc:	4011      	ands	r1, r2
 80005ce:	0755      	lsls	r5, r2, #29
 80005d0:	d01c      	beq.n	800060c <__aeabi_i2f+0x88>
 80005d2:	250f      	movs	r5, #15
 80005d4:	402a      	ands	r2, r5
 80005d6:	2a04      	cmp	r2, #4
 80005d8:	d018      	beq.n	800060c <__aeabi_i2f+0x88>
 80005da:	3104      	adds	r1, #4
 80005dc:	08ca      	lsrs	r2, r1, #3
 80005de:	0149      	lsls	r1, r1, #5
 80005e0:	d515      	bpl.n	800060e <__aeabi_i2f+0x8a>
 80005e2:	239f      	movs	r3, #159	@ 0x9f
 80005e4:	0252      	lsls	r2, r2, #9
 80005e6:	1a18      	subs	r0, r3, r0
 80005e8:	0a55      	lsrs	r5, r2, #9
 80005ea:	b2c0      	uxtb	r0, r0
 80005ec:	e7e3      	b.n	80005b6 <__aeabi_i2f+0x32>
 80005ee:	2205      	movs	r2, #5
 80005f0:	0029      	movs	r1, r5
 80005f2:	1a12      	subs	r2, r2, r0
 80005f4:	40d1      	lsrs	r1, r2
 80005f6:	0002      	movs	r2, r0
 80005f8:	321b      	adds	r2, #27
 80005fa:	4095      	lsls	r5, r2
 80005fc:	002a      	movs	r2, r5
 80005fe:	1e55      	subs	r5, r2, #1
 8000600:	41aa      	sbcs	r2, r5
 8000602:	430a      	orrs	r2, r1
 8000604:	4906      	ldr	r1, [pc, #24]	@ (8000620 <__aeabi_i2f+0x9c>)
 8000606:	4011      	ands	r1, r2
 8000608:	0755      	lsls	r5, r2, #29
 800060a:	d1e2      	bne.n	80005d2 <__aeabi_i2f+0x4e>
 800060c:	08ca      	lsrs	r2, r1, #3
 800060e:	0252      	lsls	r2, r2, #9
 8000610:	0a55      	lsrs	r5, r2, #9
 8000612:	b2d8      	uxtb	r0, r3
 8000614:	e7cf      	b.n	80005b6 <__aeabi_i2f+0x32>
 8000616:	026d      	lsls	r5, r5, #9
 8000618:	0a6d      	lsrs	r5, r5, #9
 800061a:	308e      	adds	r0, #142	@ 0x8e
 800061c:	e7cb      	b.n	80005b6 <__aeabi_i2f+0x32>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	fbffffff 	.word	0xfbffffff

08000624 <__aeabi_ui2f>:
 8000624:	b510      	push	{r4, lr}
 8000626:	1e04      	subs	r4, r0, #0
 8000628:	d00d      	beq.n	8000646 <__aeabi_ui2f+0x22>
 800062a:	f002 f8ab 	bl	8002784 <__clzsi2>
 800062e:	239e      	movs	r3, #158	@ 0x9e
 8000630:	1a1b      	subs	r3, r3, r0
 8000632:	2b96      	cmp	r3, #150	@ 0x96
 8000634:	dc0c      	bgt.n	8000650 <__aeabi_ui2f+0x2c>
 8000636:	2808      	cmp	r0, #8
 8000638:	d034      	beq.n	80006a4 <__aeabi_ui2f+0x80>
 800063a:	3808      	subs	r0, #8
 800063c:	4084      	lsls	r4, r0
 800063e:	0264      	lsls	r4, r4, #9
 8000640:	0a64      	lsrs	r4, r4, #9
 8000642:	b2d8      	uxtb	r0, r3
 8000644:	e001      	b.n	800064a <__aeabi_ui2f+0x26>
 8000646:	2000      	movs	r0, #0
 8000648:	2400      	movs	r4, #0
 800064a:	05c0      	lsls	r0, r0, #23
 800064c:	4320      	orrs	r0, r4
 800064e:	bd10      	pop	{r4, pc}
 8000650:	2b99      	cmp	r3, #153	@ 0x99
 8000652:	dc13      	bgt.n	800067c <__aeabi_ui2f+0x58>
 8000654:	1f42      	subs	r2, r0, #5
 8000656:	4094      	lsls	r4, r2
 8000658:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <__aeabi_ui2f+0x88>)
 800065a:	4022      	ands	r2, r4
 800065c:	0761      	lsls	r1, r4, #29
 800065e:	d01c      	beq.n	800069a <__aeabi_ui2f+0x76>
 8000660:	210f      	movs	r1, #15
 8000662:	4021      	ands	r1, r4
 8000664:	2904      	cmp	r1, #4
 8000666:	d018      	beq.n	800069a <__aeabi_ui2f+0x76>
 8000668:	3204      	adds	r2, #4
 800066a:	08d4      	lsrs	r4, r2, #3
 800066c:	0152      	lsls	r2, r2, #5
 800066e:	d515      	bpl.n	800069c <__aeabi_ui2f+0x78>
 8000670:	239f      	movs	r3, #159	@ 0x9f
 8000672:	0264      	lsls	r4, r4, #9
 8000674:	1a18      	subs	r0, r3, r0
 8000676:	0a64      	lsrs	r4, r4, #9
 8000678:	b2c0      	uxtb	r0, r0
 800067a:	e7e6      	b.n	800064a <__aeabi_ui2f+0x26>
 800067c:	0002      	movs	r2, r0
 800067e:	0021      	movs	r1, r4
 8000680:	321b      	adds	r2, #27
 8000682:	4091      	lsls	r1, r2
 8000684:	000a      	movs	r2, r1
 8000686:	1e51      	subs	r1, r2, #1
 8000688:	418a      	sbcs	r2, r1
 800068a:	2105      	movs	r1, #5
 800068c:	1a09      	subs	r1, r1, r0
 800068e:	40cc      	lsrs	r4, r1
 8000690:	4314      	orrs	r4, r2
 8000692:	4a06      	ldr	r2, [pc, #24]	@ (80006ac <__aeabi_ui2f+0x88>)
 8000694:	4022      	ands	r2, r4
 8000696:	0761      	lsls	r1, r4, #29
 8000698:	d1e2      	bne.n	8000660 <__aeabi_ui2f+0x3c>
 800069a:	08d4      	lsrs	r4, r2, #3
 800069c:	0264      	lsls	r4, r4, #9
 800069e:	0a64      	lsrs	r4, r4, #9
 80006a0:	b2d8      	uxtb	r0, r3
 80006a2:	e7d2      	b.n	800064a <__aeabi_ui2f+0x26>
 80006a4:	0264      	lsls	r4, r4, #9
 80006a6:	0a64      	lsrs	r4, r4, #9
 80006a8:	308e      	adds	r0, #142	@ 0x8e
 80006aa:	e7ce      	b.n	800064a <__aeabi_ui2f+0x26>
 80006ac:	fbffffff 	.word	0xfbffffff

080006b0 <__aeabi_dadd>:
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	464f      	mov	r7, r9
 80006b4:	4646      	mov	r6, r8
 80006b6:	46d6      	mov	lr, sl
 80006b8:	b5c0      	push	{r6, r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	9000      	str	r0, [sp, #0]
 80006be:	9101      	str	r1, [sp, #4]
 80006c0:	030e      	lsls	r6, r1, #12
 80006c2:	004c      	lsls	r4, r1, #1
 80006c4:	0fcd      	lsrs	r5, r1, #31
 80006c6:	0a71      	lsrs	r1, r6, #9
 80006c8:	9e00      	ldr	r6, [sp, #0]
 80006ca:	005f      	lsls	r7, r3, #1
 80006cc:	0f76      	lsrs	r6, r6, #29
 80006ce:	430e      	orrs	r6, r1
 80006d0:	9900      	ldr	r1, [sp, #0]
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	00c9      	lsls	r1, r1, #3
 80006d8:	4689      	mov	r9, r1
 80006da:	0319      	lsls	r1, r3, #12
 80006dc:	0d7b      	lsrs	r3, r7, #21
 80006de:	4698      	mov	r8, r3
 80006e0:	9b01      	ldr	r3, [sp, #4]
 80006e2:	0a49      	lsrs	r1, r1, #9
 80006e4:	0fdb      	lsrs	r3, r3, #31
 80006e6:	469c      	mov	ip, r3
 80006e8:	9b00      	ldr	r3, [sp, #0]
 80006ea:	9a00      	ldr	r2, [sp, #0]
 80006ec:	0f5b      	lsrs	r3, r3, #29
 80006ee:	430b      	orrs	r3, r1
 80006f0:	4641      	mov	r1, r8
 80006f2:	0d64      	lsrs	r4, r4, #21
 80006f4:	00d2      	lsls	r2, r2, #3
 80006f6:	1a61      	subs	r1, r4, r1
 80006f8:	4565      	cmp	r5, ip
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x4e>
 80006fc:	e0a6      	b.n	800084c <__aeabi_dadd+0x19c>
 80006fe:	2900      	cmp	r1, #0
 8000700:	dd72      	ble.n	80007e8 <__aeabi_dadd+0x138>
 8000702:	4647      	mov	r7, r8
 8000704:	2f00      	cmp	r7, #0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x5a>
 8000708:	e0dd      	b.n	80008c6 <__aeabi_dadd+0x216>
 800070a:	4fcc      	ldr	r7, [pc, #816]	@ (8000a3c <__aeabi_dadd+0x38c>)
 800070c:	42bc      	cmp	r4, r7
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x62>
 8000710:	e19a      	b.n	8000a48 <__aeabi_dadd+0x398>
 8000712:	2701      	movs	r7, #1
 8000714:	2938      	cmp	r1, #56	@ 0x38
 8000716:	dc17      	bgt.n	8000748 <__aeabi_dadd+0x98>
 8000718:	2780      	movs	r7, #128	@ 0x80
 800071a:	043f      	lsls	r7, r7, #16
 800071c:	433b      	orrs	r3, r7
 800071e:	291f      	cmp	r1, #31
 8000720:	dd00      	ble.n	8000724 <__aeabi_dadd+0x74>
 8000722:	e1dd      	b.n	8000ae0 <__aeabi_dadd+0x430>
 8000724:	2720      	movs	r7, #32
 8000726:	1a78      	subs	r0, r7, r1
 8000728:	001f      	movs	r7, r3
 800072a:	4087      	lsls	r7, r0
 800072c:	46ba      	mov	sl, r7
 800072e:	0017      	movs	r7, r2
 8000730:	40cf      	lsrs	r7, r1
 8000732:	4684      	mov	ip, r0
 8000734:	0038      	movs	r0, r7
 8000736:	4657      	mov	r7, sl
 8000738:	4307      	orrs	r7, r0
 800073a:	4660      	mov	r0, ip
 800073c:	4082      	lsls	r2, r0
 800073e:	40cb      	lsrs	r3, r1
 8000740:	1e50      	subs	r0, r2, #1
 8000742:	4182      	sbcs	r2, r0
 8000744:	1af6      	subs	r6, r6, r3
 8000746:	4317      	orrs	r7, r2
 8000748:	464b      	mov	r3, r9
 800074a:	1bdf      	subs	r7, r3, r7
 800074c:	45b9      	cmp	r9, r7
 800074e:	4180      	sbcs	r0, r0
 8000750:	4240      	negs	r0, r0
 8000752:	1a36      	subs	r6, r6, r0
 8000754:	0233      	lsls	r3, r6, #8
 8000756:	d400      	bmi.n	800075a <__aeabi_dadd+0xaa>
 8000758:	e0ff      	b.n	800095a <__aeabi_dadd+0x2aa>
 800075a:	0276      	lsls	r6, r6, #9
 800075c:	0a76      	lsrs	r6, r6, #9
 800075e:	2e00      	cmp	r6, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_dadd+0xb4>
 8000762:	e13c      	b.n	80009de <__aeabi_dadd+0x32e>
 8000764:	0030      	movs	r0, r6
 8000766:	f002 f80d 	bl	8002784 <__clzsi2>
 800076a:	0003      	movs	r3, r0
 800076c:	3b08      	subs	r3, #8
 800076e:	2120      	movs	r1, #32
 8000770:	0038      	movs	r0, r7
 8000772:	1aca      	subs	r2, r1, r3
 8000774:	40d0      	lsrs	r0, r2
 8000776:	409e      	lsls	r6, r3
 8000778:	0002      	movs	r2, r0
 800077a:	409f      	lsls	r7, r3
 800077c:	4332      	orrs	r2, r6
 800077e:	429c      	cmp	r4, r3
 8000780:	dd00      	ble.n	8000784 <__aeabi_dadd+0xd4>
 8000782:	e1a6      	b.n	8000ad2 <__aeabi_dadd+0x422>
 8000784:	1b18      	subs	r0, r3, r4
 8000786:	3001      	adds	r0, #1
 8000788:	1a09      	subs	r1, r1, r0
 800078a:	003e      	movs	r6, r7
 800078c:	408f      	lsls	r7, r1
 800078e:	40c6      	lsrs	r6, r0
 8000790:	1e7b      	subs	r3, r7, #1
 8000792:	419f      	sbcs	r7, r3
 8000794:	0013      	movs	r3, r2
 8000796:	408b      	lsls	r3, r1
 8000798:	4337      	orrs	r7, r6
 800079a:	431f      	orrs	r7, r3
 800079c:	40c2      	lsrs	r2, r0
 800079e:	003b      	movs	r3, r7
 80007a0:	0016      	movs	r6, r2
 80007a2:	2400      	movs	r4, #0
 80007a4:	4313      	orrs	r3, r2
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0xfa>
 80007a8:	e1df      	b.n	8000b6a <__aeabi_dadd+0x4ba>
 80007aa:	077b      	lsls	r3, r7, #29
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x100>
 80007ae:	e332      	b.n	8000e16 <__aeabi_dadd+0x766>
 80007b0:	230f      	movs	r3, #15
 80007b2:	003a      	movs	r2, r7
 80007b4:	403b      	ands	r3, r7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d004      	beq.n	80007c4 <__aeabi_dadd+0x114>
 80007ba:	1d3a      	adds	r2, r7, #4
 80007bc:	42ba      	cmp	r2, r7
 80007be:	41bf      	sbcs	r7, r7
 80007c0:	427f      	negs	r7, r7
 80007c2:	19f6      	adds	r6, r6, r7
 80007c4:	0233      	lsls	r3, r6, #8
 80007c6:	d400      	bmi.n	80007ca <__aeabi_dadd+0x11a>
 80007c8:	e323      	b.n	8000e12 <__aeabi_dadd+0x762>
 80007ca:	4b9c      	ldr	r3, [pc, #624]	@ (8000a3c <__aeabi_dadd+0x38c>)
 80007cc:	3401      	adds	r4, #1
 80007ce:	429c      	cmp	r4, r3
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x124>
 80007d2:	e0b4      	b.n	800093e <__aeabi_dadd+0x28e>
 80007d4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a40 <__aeabi_dadd+0x390>)
 80007d6:	0564      	lsls	r4, r4, #21
 80007d8:	401e      	ands	r6, r3
 80007da:	0d64      	lsrs	r4, r4, #21
 80007dc:	0777      	lsls	r7, r6, #29
 80007de:	08d2      	lsrs	r2, r2, #3
 80007e0:	0276      	lsls	r6, r6, #9
 80007e2:	4317      	orrs	r7, r2
 80007e4:	0b36      	lsrs	r6, r6, #12
 80007e6:	e0ac      	b.n	8000942 <__aeabi_dadd+0x292>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x13e>
 80007ec:	e07e      	b.n	80008ec <__aeabi_dadd+0x23c>
 80007ee:	4641      	mov	r1, r8
 80007f0:	1b09      	subs	r1, r1, r4
 80007f2:	2c00      	cmp	r4, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x148>
 80007f6:	e160      	b.n	8000aba <__aeabi_dadd+0x40a>
 80007f8:	0034      	movs	r4, r6
 80007fa:	4648      	mov	r0, r9
 80007fc:	4304      	orrs	r4, r0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x152>
 8000800:	e1c9      	b.n	8000b96 <__aeabi_dadd+0x4e6>
 8000802:	1e4c      	subs	r4, r1, #1
 8000804:	2901      	cmp	r1, #1
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x15a>
 8000808:	e22e      	b.n	8000c68 <__aeabi_dadd+0x5b8>
 800080a:	4d8c      	ldr	r5, [pc, #560]	@ (8000a3c <__aeabi_dadd+0x38c>)
 800080c:	42a9      	cmp	r1, r5
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x162>
 8000810:	e224      	b.n	8000c5c <__aeabi_dadd+0x5ac>
 8000812:	2701      	movs	r7, #1
 8000814:	2c38      	cmp	r4, #56	@ 0x38
 8000816:	dc11      	bgt.n	800083c <__aeabi_dadd+0x18c>
 8000818:	0021      	movs	r1, r4
 800081a:	291f      	cmp	r1, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x170>
 800081e:	e20b      	b.n	8000c38 <__aeabi_dadd+0x588>
 8000820:	2420      	movs	r4, #32
 8000822:	0037      	movs	r7, r6
 8000824:	4648      	mov	r0, r9
 8000826:	1a64      	subs	r4, r4, r1
 8000828:	40a7      	lsls	r7, r4
 800082a:	40c8      	lsrs	r0, r1
 800082c:	4307      	orrs	r7, r0
 800082e:	4648      	mov	r0, r9
 8000830:	40a0      	lsls	r0, r4
 8000832:	40ce      	lsrs	r6, r1
 8000834:	1e44      	subs	r4, r0, #1
 8000836:	41a0      	sbcs	r0, r4
 8000838:	1b9b      	subs	r3, r3, r6
 800083a:	4307      	orrs	r7, r0
 800083c:	1bd7      	subs	r7, r2, r7
 800083e:	42ba      	cmp	r2, r7
 8000840:	4192      	sbcs	r2, r2
 8000842:	4252      	negs	r2, r2
 8000844:	4665      	mov	r5, ip
 8000846:	4644      	mov	r4, r8
 8000848:	1a9e      	subs	r6, r3, r2
 800084a:	e783      	b.n	8000754 <__aeabi_dadd+0xa4>
 800084c:	2900      	cmp	r1, #0
 800084e:	dc00      	bgt.n	8000852 <__aeabi_dadd+0x1a2>
 8000850:	e09c      	b.n	800098c <__aeabi_dadd+0x2dc>
 8000852:	4647      	mov	r7, r8
 8000854:	2f00      	cmp	r7, #0
 8000856:	d167      	bne.n	8000928 <__aeabi_dadd+0x278>
 8000858:	001f      	movs	r7, r3
 800085a:	4317      	orrs	r7, r2
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x1b0>
 800085e:	e0e4      	b.n	8000a2a <__aeabi_dadd+0x37a>
 8000860:	1e48      	subs	r0, r1, #1
 8000862:	2901      	cmp	r1, #1
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x1b8>
 8000866:	e19b      	b.n	8000ba0 <__aeabi_dadd+0x4f0>
 8000868:	4f74      	ldr	r7, [pc, #464]	@ (8000a3c <__aeabi_dadd+0x38c>)
 800086a:	42b9      	cmp	r1, r7
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x1c0>
 800086e:	e0eb      	b.n	8000a48 <__aeabi_dadd+0x398>
 8000870:	2701      	movs	r7, #1
 8000872:	0001      	movs	r1, r0
 8000874:	2838      	cmp	r0, #56	@ 0x38
 8000876:	dc11      	bgt.n	800089c <__aeabi_dadd+0x1ec>
 8000878:	291f      	cmp	r1, #31
 800087a:	dd00      	ble.n	800087e <__aeabi_dadd+0x1ce>
 800087c:	e1c7      	b.n	8000c0e <__aeabi_dadd+0x55e>
 800087e:	2720      	movs	r7, #32
 8000880:	1a78      	subs	r0, r7, r1
 8000882:	001f      	movs	r7, r3
 8000884:	4684      	mov	ip, r0
 8000886:	4087      	lsls	r7, r0
 8000888:	0010      	movs	r0, r2
 800088a:	40c8      	lsrs	r0, r1
 800088c:	4307      	orrs	r7, r0
 800088e:	4660      	mov	r0, ip
 8000890:	4082      	lsls	r2, r0
 8000892:	40cb      	lsrs	r3, r1
 8000894:	1e50      	subs	r0, r2, #1
 8000896:	4182      	sbcs	r2, r0
 8000898:	18f6      	adds	r6, r6, r3
 800089a:	4317      	orrs	r7, r2
 800089c:	444f      	add	r7, r9
 800089e:	454f      	cmp	r7, r9
 80008a0:	4180      	sbcs	r0, r0
 80008a2:	4240      	negs	r0, r0
 80008a4:	1836      	adds	r6, r6, r0
 80008a6:	0233      	lsls	r3, r6, #8
 80008a8:	d557      	bpl.n	800095a <__aeabi_dadd+0x2aa>
 80008aa:	4b64      	ldr	r3, [pc, #400]	@ (8000a3c <__aeabi_dadd+0x38c>)
 80008ac:	3401      	adds	r4, #1
 80008ae:	429c      	cmp	r4, r3
 80008b0:	d045      	beq.n	800093e <__aeabi_dadd+0x28e>
 80008b2:	2101      	movs	r1, #1
 80008b4:	4b62      	ldr	r3, [pc, #392]	@ (8000a40 <__aeabi_dadd+0x390>)
 80008b6:	087a      	lsrs	r2, r7, #1
 80008b8:	401e      	ands	r6, r3
 80008ba:	4039      	ands	r1, r7
 80008bc:	430a      	orrs	r2, r1
 80008be:	07f7      	lsls	r7, r6, #31
 80008c0:	4317      	orrs	r7, r2
 80008c2:	0876      	lsrs	r6, r6, #1
 80008c4:	e771      	b.n	80007aa <__aeabi_dadd+0xfa>
 80008c6:	001f      	movs	r7, r3
 80008c8:	4317      	orrs	r7, r2
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x21e>
 80008cc:	e0ad      	b.n	8000a2a <__aeabi_dadd+0x37a>
 80008ce:	1e4f      	subs	r7, r1, #1
 80008d0:	46bc      	mov	ip, r7
 80008d2:	2901      	cmp	r1, #1
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x228>
 80008d6:	e182      	b.n	8000bde <__aeabi_dadd+0x52e>
 80008d8:	4f58      	ldr	r7, [pc, #352]	@ (8000a3c <__aeabi_dadd+0x38c>)
 80008da:	42b9      	cmp	r1, r7
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x230>
 80008de:	e190      	b.n	8000c02 <__aeabi_dadd+0x552>
 80008e0:	4661      	mov	r1, ip
 80008e2:	2701      	movs	r7, #1
 80008e4:	2938      	cmp	r1, #56	@ 0x38
 80008e6:	dd00      	ble.n	80008ea <__aeabi_dadd+0x23a>
 80008e8:	e72e      	b.n	8000748 <__aeabi_dadd+0x98>
 80008ea:	e718      	b.n	800071e <__aeabi_dadd+0x6e>
 80008ec:	4f55      	ldr	r7, [pc, #340]	@ (8000a44 <__aeabi_dadd+0x394>)
 80008ee:	1c61      	adds	r1, r4, #1
 80008f0:	4239      	tst	r1, r7
 80008f2:	d000      	beq.n	80008f6 <__aeabi_dadd+0x246>
 80008f4:	e0d0      	b.n	8000a98 <__aeabi_dadd+0x3e8>
 80008f6:	0031      	movs	r1, r6
 80008f8:	4648      	mov	r0, r9
 80008fa:	001f      	movs	r7, r3
 80008fc:	4301      	orrs	r1, r0
 80008fe:	4317      	orrs	r7, r2
 8000900:	2c00      	cmp	r4, #0
 8000902:	d000      	beq.n	8000906 <__aeabi_dadd+0x256>
 8000904:	e13d      	b.n	8000b82 <__aeabi_dadd+0x4d2>
 8000906:	2900      	cmp	r1, #0
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x25c>
 800090a:	e1bc      	b.n	8000c86 <__aeabi_dadd+0x5d6>
 800090c:	2f00      	cmp	r7, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x262>
 8000910:	e1bf      	b.n	8000c92 <__aeabi_dadd+0x5e2>
 8000912:	464b      	mov	r3, r9
 8000914:	2100      	movs	r1, #0
 8000916:	08d8      	lsrs	r0, r3, #3
 8000918:	0777      	lsls	r7, r6, #29
 800091a:	4307      	orrs	r7, r0
 800091c:	08f0      	lsrs	r0, r6, #3
 800091e:	0306      	lsls	r6, r0, #12
 8000920:	054c      	lsls	r4, r1, #21
 8000922:	0b36      	lsrs	r6, r6, #12
 8000924:	0d64      	lsrs	r4, r4, #21
 8000926:	e00c      	b.n	8000942 <__aeabi_dadd+0x292>
 8000928:	4f44      	ldr	r7, [pc, #272]	@ (8000a3c <__aeabi_dadd+0x38c>)
 800092a:	42bc      	cmp	r4, r7
 800092c:	d100      	bne.n	8000930 <__aeabi_dadd+0x280>
 800092e:	e08b      	b.n	8000a48 <__aeabi_dadd+0x398>
 8000930:	2701      	movs	r7, #1
 8000932:	2938      	cmp	r1, #56	@ 0x38
 8000934:	dcb2      	bgt.n	800089c <__aeabi_dadd+0x1ec>
 8000936:	2780      	movs	r7, #128	@ 0x80
 8000938:	043f      	lsls	r7, r7, #16
 800093a:	433b      	orrs	r3, r7
 800093c:	e79c      	b.n	8000878 <__aeabi_dadd+0x1c8>
 800093e:	2600      	movs	r6, #0
 8000940:	2700      	movs	r7, #0
 8000942:	0524      	lsls	r4, r4, #20
 8000944:	4334      	orrs	r4, r6
 8000946:	07ed      	lsls	r5, r5, #31
 8000948:	432c      	orrs	r4, r5
 800094a:	0038      	movs	r0, r7
 800094c:	0021      	movs	r1, r4
 800094e:	b002      	add	sp, #8
 8000950:	bce0      	pop	{r5, r6, r7}
 8000952:	46ba      	mov	sl, r7
 8000954:	46b1      	mov	r9, r6
 8000956:	46a8      	mov	r8, r5
 8000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095a:	077b      	lsls	r3, r7, #29
 800095c:	d004      	beq.n	8000968 <__aeabi_dadd+0x2b8>
 800095e:	230f      	movs	r3, #15
 8000960:	403b      	ands	r3, r7
 8000962:	2b04      	cmp	r3, #4
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x2b8>
 8000966:	e728      	b.n	80007ba <__aeabi_dadd+0x10a>
 8000968:	08f8      	lsrs	r0, r7, #3
 800096a:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <__aeabi_dadd+0x38c>)
 800096c:	0777      	lsls	r7, r6, #29
 800096e:	4307      	orrs	r7, r0
 8000970:	08f0      	lsrs	r0, r6, #3
 8000972:	429c      	cmp	r4, r3
 8000974:	d000      	beq.n	8000978 <__aeabi_dadd+0x2c8>
 8000976:	e24a      	b.n	8000e0e <__aeabi_dadd+0x75e>
 8000978:	003b      	movs	r3, r7
 800097a:	4303      	orrs	r3, r0
 800097c:	d059      	beq.n	8000a32 <__aeabi_dadd+0x382>
 800097e:	2680      	movs	r6, #128	@ 0x80
 8000980:	0336      	lsls	r6, r6, #12
 8000982:	4306      	orrs	r6, r0
 8000984:	0336      	lsls	r6, r6, #12
 8000986:	4c2d      	ldr	r4, [pc, #180]	@ (8000a3c <__aeabi_dadd+0x38c>)
 8000988:	0b36      	lsrs	r6, r6, #12
 800098a:	e7da      	b.n	8000942 <__aeabi_dadd+0x292>
 800098c:	2900      	cmp	r1, #0
 800098e:	d061      	beq.n	8000a54 <__aeabi_dadd+0x3a4>
 8000990:	4641      	mov	r1, r8
 8000992:	1b09      	subs	r1, r1, r4
 8000994:	2c00      	cmp	r4, #0
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x2ea>
 8000998:	e0b9      	b.n	8000b0e <__aeabi_dadd+0x45e>
 800099a:	4c28      	ldr	r4, [pc, #160]	@ (8000a3c <__aeabi_dadd+0x38c>)
 800099c:	45a0      	cmp	r8, r4
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x2f2>
 80009a0:	e1a5      	b.n	8000cee <__aeabi_dadd+0x63e>
 80009a2:	2701      	movs	r7, #1
 80009a4:	2938      	cmp	r1, #56	@ 0x38
 80009a6:	dc13      	bgt.n	80009d0 <__aeabi_dadd+0x320>
 80009a8:	2480      	movs	r4, #128	@ 0x80
 80009aa:	0424      	lsls	r4, r4, #16
 80009ac:	4326      	orrs	r6, r4
 80009ae:	291f      	cmp	r1, #31
 80009b0:	dd00      	ble.n	80009b4 <__aeabi_dadd+0x304>
 80009b2:	e1c8      	b.n	8000d46 <__aeabi_dadd+0x696>
 80009b4:	2420      	movs	r4, #32
 80009b6:	0037      	movs	r7, r6
 80009b8:	4648      	mov	r0, r9
 80009ba:	1a64      	subs	r4, r4, r1
 80009bc:	40a7      	lsls	r7, r4
 80009be:	40c8      	lsrs	r0, r1
 80009c0:	4307      	orrs	r7, r0
 80009c2:	4648      	mov	r0, r9
 80009c4:	40a0      	lsls	r0, r4
 80009c6:	40ce      	lsrs	r6, r1
 80009c8:	1e44      	subs	r4, r0, #1
 80009ca:	41a0      	sbcs	r0, r4
 80009cc:	199b      	adds	r3, r3, r6
 80009ce:	4307      	orrs	r7, r0
 80009d0:	18bf      	adds	r7, r7, r2
 80009d2:	4297      	cmp	r7, r2
 80009d4:	4192      	sbcs	r2, r2
 80009d6:	4252      	negs	r2, r2
 80009d8:	4644      	mov	r4, r8
 80009da:	18d6      	adds	r6, r2, r3
 80009dc:	e763      	b.n	80008a6 <__aeabi_dadd+0x1f6>
 80009de:	0038      	movs	r0, r7
 80009e0:	f001 fed0 	bl	8002784 <__clzsi2>
 80009e4:	0003      	movs	r3, r0
 80009e6:	3318      	adds	r3, #24
 80009e8:	2b1f      	cmp	r3, #31
 80009ea:	dc00      	bgt.n	80009ee <__aeabi_dadd+0x33e>
 80009ec:	e6bf      	b.n	800076e <__aeabi_dadd+0xbe>
 80009ee:	003a      	movs	r2, r7
 80009f0:	3808      	subs	r0, #8
 80009f2:	4082      	lsls	r2, r0
 80009f4:	429c      	cmp	r4, r3
 80009f6:	dd00      	ble.n	80009fa <__aeabi_dadd+0x34a>
 80009f8:	e083      	b.n	8000b02 <__aeabi_dadd+0x452>
 80009fa:	1b1b      	subs	r3, r3, r4
 80009fc:	1c58      	adds	r0, r3, #1
 80009fe:	281f      	cmp	r0, #31
 8000a00:	dc00      	bgt.n	8000a04 <__aeabi_dadd+0x354>
 8000a02:	e1b4      	b.n	8000d6e <__aeabi_dadd+0x6be>
 8000a04:	0017      	movs	r7, r2
 8000a06:	3b1f      	subs	r3, #31
 8000a08:	40df      	lsrs	r7, r3
 8000a0a:	2820      	cmp	r0, #32
 8000a0c:	d005      	beq.n	8000a1a <__aeabi_dadd+0x36a>
 8000a0e:	2340      	movs	r3, #64	@ 0x40
 8000a10:	1a1b      	subs	r3, r3, r0
 8000a12:	409a      	lsls	r2, r3
 8000a14:	1e53      	subs	r3, r2, #1
 8000a16:	419a      	sbcs	r2, r3
 8000a18:	4317      	orrs	r7, r2
 8000a1a:	2400      	movs	r4, #0
 8000a1c:	2f00      	cmp	r7, #0
 8000a1e:	d00a      	beq.n	8000a36 <__aeabi_dadd+0x386>
 8000a20:	077b      	lsls	r3, r7, #29
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dadd+0x376>
 8000a24:	e6c4      	b.n	80007b0 <__aeabi_dadd+0x100>
 8000a26:	0026      	movs	r6, r4
 8000a28:	e79e      	b.n	8000968 <__aeabi_dadd+0x2b8>
 8000a2a:	464b      	mov	r3, r9
 8000a2c:	000c      	movs	r4, r1
 8000a2e:	08d8      	lsrs	r0, r3, #3
 8000a30:	e79b      	b.n	800096a <__aeabi_dadd+0x2ba>
 8000a32:	2700      	movs	r7, #0
 8000a34:	4c01      	ldr	r4, [pc, #4]	@ (8000a3c <__aeabi_dadd+0x38c>)
 8000a36:	2600      	movs	r6, #0
 8000a38:	e783      	b.n	8000942 <__aeabi_dadd+0x292>
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	000007ff 	.word	0x000007ff
 8000a40:	ff7fffff 	.word	0xff7fffff
 8000a44:	000007fe 	.word	0x000007fe
 8000a48:	464b      	mov	r3, r9
 8000a4a:	0777      	lsls	r7, r6, #29
 8000a4c:	08d8      	lsrs	r0, r3, #3
 8000a4e:	4307      	orrs	r7, r0
 8000a50:	08f0      	lsrs	r0, r6, #3
 8000a52:	e791      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000a54:	4fcd      	ldr	r7, [pc, #820]	@ (8000d8c <__aeabi_dadd+0x6dc>)
 8000a56:	1c61      	adds	r1, r4, #1
 8000a58:	4239      	tst	r1, r7
 8000a5a:	d16b      	bne.n	8000b34 <__aeabi_dadd+0x484>
 8000a5c:	0031      	movs	r1, r6
 8000a5e:	4648      	mov	r0, r9
 8000a60:	4301      	orrs	r1, r0
 8000a62:	2c00      	cmp	r4, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_dadd+0x3b8>
 8000a66:	e14b      	b.n	8000d00 <__aeabi_dadd+0x650>
 8000a68:	001f      	movs	r7, r3
 8000a6a:	4317      	orrs	r7, r2
 8000a6c:	2900      	cmp	r1, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x3c2>
 8000a70:	e181      	b.n	8000d76 <__aeabi_dadd+0x6c6>
 8000a72:	2f00      	cmp	r7, #0
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dadd+0x3c8>
 8000a76:	e74c      	b.n	8000912 <__aeabi_dadd+0x262>
 8000a78:	444a      	add	r2, r9
 8000a7a:	454a      	cmp	r2, r9
 8000a7c:	4180      	sbcs	r0, r0
 8000a7e:	18f6      	adds	r6, r6, r3
 8000a80:	4240      	negs	r0, r0
 8000a82:	1836      	adds	r6, r6, r0
 8000a84:	0233      	lsls	r3, r6, #8
 8000a86:	d500      	bpl.n	8000a8a <__aeabi_dadd+0x3da>
 8000a88:	e1b0      	b.n	8000dec <__aeabi_dadd+0x73c>
 8000a8a:	0017      	movs	r7, r2
 8000a8c:	4691      	mov	r9, r2
 8000a8e:	4337      	orrs	r7, r6
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dadd+0x3e4>
 8000a92:	e73e      	b.n	8000912 <__aeabi_dadd+0x262>
 8000a94:	2600      	movs	r6, #0
 8000a96:	e754      	b.n	8000942 <__aeabi_dadd+0x292>
 8000a98:	4649      	mov	r1, r9
 8000a9a:	1a89      	subs	r1, r1, r2
 8000a9c:	4688      	mov	r8, r1
 8000a9e:	45c1      	cmp	r9, r8
 8000aa0:	41bf      	sbcs	r7, r7
 8000aa2:	1af1      	subs	r1, r6, r3
 8000aa4:	427f      	negs	r7, r7
 8000aa6:	1bc9      	subs	r1, r1, r7
 8000aa8:	020f      	lsls	r7, r1, #8
 8000aaa:	d461      	bmi.n	8000b70 <__aeabi_dadd+0x4c0>
 8000aac:	4647      	mov	r7, r8
 8000aae:	430f      	orrs	r7, r1
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x404>
 8000ab2:	e0bd      	b.n	8000c30 <__aeabi_dadd+0x580>
 8000ab4:	000e      	movs	r6, r1
 8000ab6:	4647      	mov	r7, r8
 8000ab8:	e651      	b.n	800075e <__aeabi_dadd+0xae>
 8000aba:	4cb5      	ldr	r4, [pc, #724]	@ (8000d90 <__aeabi_dadd+0x6e0>)
 8000abc:	45a0      	cmp	r8, r4
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x412>
 8000ac0:	e100      	b.n	8000cc4 <__aeabi_dadd+0x614>
 8000ac2:	2701      	movs	r7, #1
 8000ac4:	2938      	cmp	r1, #56	@ 0x38
 8000ac6:	dd00      	ble.n	8000aca <__aeabi_dadd+0x41a>
 8000ac8:	e6b8      	b.n	800083c <__aeabi_dadd+0x18c>
 8000aca:	2480      	movs	r4, #128	@ 0x80
 8000acc:	0424      	lsls	r4, r4, #16
 8000ace:	4326      	orrs	r6, r4
 8000ad0:	e6a3      	b.n	800081a <__aeabi_dadd+0x16a>
 8000ad2:	4eb0      	ldr	r6, [pc, #704]	@ (8000d94 <__aeabi_dadd+0x6e4>)
 8000ad4:	1ae4      	subs	r4, r4, r3
 8000ad6:	4016      	ands	r6, r2
 8000ad8:	077b      	lsls	r3, r7, #29
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x42e>
 8000adc:	e73f      	b.n	800095e <__aeabi_dadd+0x2ae>
 8000ade:	e743      	b.n	8000968 <__aeabi_dadd+0x2b8>
 8000ae0:	000f      	movs	r7, r1
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	3f20      	subs	r7, #32
 8000ae6:	40f8      	lsrs	r0, r7
 8000ae8:	4684      	mov	ip, r0
 8000aea:	2920      	cmp	r1, #32
 8000aec:	d003      	beq.n	8000af6 <__aeabi_dadd+0x446>
 8000aee:	2740      	movs	r7, #64	@ 0x40
 8000af0:	1a79      	subs	r1, r7, r1
 8000af2:	408b      	lsls	r3, r1
 8000af4:	431a      	orrs	r2, r3
 8000af6:	1e53      	subs	r3, r2, #1
 8000af8:	419a      	sbcs	r2, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	0017      	movs	r7, r2
 8000afe:	431f      	orrs	r7, r3
 8000b00:	e622      	b.n	8000748 <__aeabi_dadd+0x98>
 8000b02:	48a4      	ldr	r0, [pc, #656]	@ (8000d94 <__aeabi_dadd+0x6e4>)
 8000b04:	1ae1      	subs	r1, r4, r3
 8000b06:	4010      	ands	r0, r2
 8000b08:	0747      	lsls	r7, r0, #29
 8000b0a:	08c0      	lsrs	r0, r0, #3
 8000b0c:	e707      	b.n	800091e <__aeabi_dadd+0x26e>
 8000b0e:	0034      	movs	r4, r6
 8000b10:	4648      	mov	r0, r9
 8000b12:	4304      	orrs	r4, r0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x468>
 8000b16:	e0fa      	b.n	8000d0e <__aeabi_dadd+0x65e>
 8000b18:	1e4c      	subs	r4, r1, #1
 8000b1a:	2901      	cmp	r1, #1
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x470>
 8000b1e:	e0d7      	b.n	8000cd0 <__aeabi_dadd+0x620>
 8000b20:	4f9b      	ldr	r7, [pc, #620]	@ (8000d90 <__aeabi_dadd+0x6e0>)
 8000b22:	42b9      	cmp	r1, r7
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x478>
 8000b26:	e0e2      	b.n	8000cee <__aeabi_dadd+0x63e>
 8000b28:	2701      	movs	r7, #1
 8000b2a:	2c38      	cmp	r4, #56	@ 0x38
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_dadd+0x480>
 8000b2e:	e74f      	b.n	80009d0 <__aeabi_dadd+0x320>
 8000b30:	0021      	movs	r1, r4
 8000b32:	e73c      	b.n	80009ae <__aeabi_dadd+0x2fe>
 8000b34:	4c96      	ldr	r4, [pc, #600]	@ (8000d90 <__aeabi_dadd+0x6e0>)
 8000b36:	42a1      	cmp	r1, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x48c>
 8000b3a:	e0dd      	b.n	8000cf8 <__aeabi_dadd+0x648>
 8000b3c:	444a      	add	r2, r9
 8000b3e:	454a      	cmp	r2, r9
 8000b40:	4180      	sbcs	r0, r0
 8000b42:	18f3      	adds	r3, r6, r3
 8000b44:	4240      	negs	r0, r0
 8000b46:	1818      	adds	r0, r3, r0
 8000b48:	07c7      	lsls	r7, r0, #31
 8000b4a:	0852      	lsrs	r2, r2, #1
 8000b4c:	4317      	orrs	r7, r2
 8000b4e:	0846      	lsrs	r6, r0, #1
 8000b50:	0752      	lsls	r2, r2, #29
 8000b52:	d005      	beq.n	8000b60 <__aeabi_dadd+0x4b0>
 8000b54:	220f      	movs	r2, #15
 8000b56:	000c      	movs	r4, r1
 8000b58:	403a      	ands	r2, r7
 8000b5a:	2a04      	cmp	r2, #4
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dadd+0x4b0>
 8000b5e:	e62c      	b.n	80007ba <__aeabi_dadd+0x10a>
 8000b60:	0776      	lsls	r6, r6, #29
 8000b62:	08ff      	lsrs	r7, r7, #3
 8000b64:	4337      	orrs	r7, r6
 8000b66:	0900      	lsrs	r0, r0, #4
 8000b68:	e6d9      	b.n	800091e <__aeabi_dadd+0x26e>
 8000b6a:	2700      	movs	r7, #0
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	e6e8      	b.n	8000942 <__aeabi_dadd+0x292>
 8000b70:	4649      	mov	r1, r9
 8000b72:	1a57      	subs	r7, r2, r1
 8000b74:	42ba      	cmp	r2, r7
 8000b76:	4192      	sbcs	r2, r2
 8000b78:	1b9e      	subs	r6, r3, r6
 8000b7a:	4252      	negs	r2, r2
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	1ab6      	subs	r6, r6, r2
 8000b80:	e5ed      	b.n	800075e <__aeabi_dadd+0xae>
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d000      	beq.n	8000b88 <__aeabi_dadd+0x4d8>
 8000b86:	e0c6      	b.n	8000d16 <__aeabi_dadd+0x666>
 8000b88:	2f00      	cmp	r7, #0
 8000b8a:	d167      	bne.n	8000c5c <__aeabi_dadd+0x5ac>
 8000b8c:	2680      	movs	r6, #128	@ 0x80
 8000b8e:	2500      	movs	r5, #0
 8000b90:	4c7f      	ldr	r4, [pc, #508]	@ (8000d90 <__aeabi_dadd+0x6e0>)
 8000b92:	0336      	lsls	r6, r6, #12
 8000b94:	e6d5      	b.n	8000942 <__aeabi_dadd+0x292>
 8000b96:	4665      	mov	r5, ip
 8000b98:	000c      	movs	r4, r1
 8000b9a:	001e      	movs	r6, r3
 8000b9c:	08d0      	lsrs	r0, r2, #3
 8000b9e:	e6e4      	b.n	800096a <__aeabi_dadd+0x2ba>
 8000ba0:	444a      	add	r2, r9
 8000ba2:	454a      	cmp	r2, r9
 8000ba4:	4180      	sbcs	r0, r0
 8000ba6:	18f3      	adds	r3, r6, r3
 8000ba8:	4240      	negs	r0, r0
 8000baa:	1818      	adds	r0, r3, r0
 8000bac:	0011      	movs	r1, r2
 8000bae:	0203      	lsls	r3, r0, #8
 8000bb0:	d400      	bmi.n	8000bb4 <__aeabi_dadd+0x504>
 8000bb2:	e096      	b.n	8000ce2 <__aeabi_dadd+0x632>
 8000bb4:	4b77      	ldr	r3, [pc, #476]	@ (8000d94 <__aeabi_dadd+0x6e4>)
 8000bb6:	0849      	lsrs	r1, r1, #1
 8000bb8:	4018      	ands	r0, r3
 8000bba:	07c3      	lsls	r3, r0, #31
 8000bbc:	430b      	orrs	r3, r1
 8000bbe:	0844      	lsrs	r4, r0, #1
 8000bc0:	0749      	lsls	r1, r1, #29
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x516>
 8000bc4:	e129      	b.n	8000e1a <__aeabi_dadd+0x76a>
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	401a      	ands	r2, r3
 8000bca:	2a04      	cmp	r2, #4
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dadd+0x520>
 8000bce:	e0ea      	b.n	8000da6 <__aeabi_dadd+0x6f6>
 8000bd0:	1d1f      	adds	r7, r3, #4
 8000bd2:	429f      	cmp	r7, r3
 8000bd4:	41b6      	sbcs	r6, r6
 8000bd6:	4276      	negs	r6, r6
 8000bd8:	1936      	adds	r6, r6, r4
 8000bda:	2402      	movs	r4, #2
 8000bdc:	e6c4      	b.n	8000968 <__aeabi_dadd+0x2b8>
 8000bde:	4649      	mov	r1, r9
 8000be0:	1a8f      	subs	r7, r1, r2
 8000be2:	45b9      	cmp	r9, r7
 8000be4:	4180      	sbcs	r0, r0
 8000be6:	1af6      	subs	r6, r6, r3
 8000be8:	4240      	negs	r0, r0
 8000bea:	1a36      	subs	r6, r6, r0
 8000bec:	0233      	lsls	r3, r6, #8
 8000bee:	d406      	bmi.n	8000bfe <__aeabi_dadd+0x54e>
 8000bf0:	0773      	lsls	r3, r6, #29
 8000bf2:	08ff      	lsrs	r7, r7, #3
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	08f0      	lsrs	r0, r6, #3
 8000bfa:	e690      	b.n	800091e <__aeabi_dadd+0x26e>
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	2401      	movs	r4, #1
 8000c00:	e5ab      	b.n	800075a <__aeabi_dadd+0xaa>
 8000c02:	464b      	mov	r3, r9
 8000c04:	0777      	lsls	r7, r6, #29
 8000c06:	08d8      	lsrs	r0, r3, #3
 8000c08:	4307      	orrs	r7, r0
 8000c0a:	08f0      	lsrs	r0, r6, #3
 8000c0c:	e6b4      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000c0e:	000f      	movs	r7, r1
 8000c10:	0018      	movs	r0, r3
 8000c12:	3f20      	subs	r7, #32
 8000c14:	40f8      	lsrs	r0, r7
 8000c16:	4684      	mov	ip, r0
 8000c18:	2920      	cmp	r1, #32
 8000c1a:	d003      	beq.n	8000c24 <__aeabi_dadd+0x574>
 8000c1c:	2740      	movs	r7, #64	@ 0x40
 8000c1e:	1a79      	subs	r1, r7, r1
 8000c20:	408b      	lsls	r3, r1
 8000c22:	431a      	orrs	r2, r3
 8000c24:	1e53      	subs	r3, r2, #1
 8000c26:	419a      	sbcs	r2, r3
 8000c28:	4663      	mov	r3, ip
 8000c2a:	0017      	movs	r7, r2
 8000c2c:	431f      	orrs	r7, r3
 8000c2e:	e635      	b.n	800089c <__aeabi_dadd+0x1ec>
 8000c30:	2500      	movs	r5, #0
 8000c32:	2400      	movs	r4, #0
 8000c34:	2600      	movs	r6, #0
 8000c36:	e684      	b.n	8000942 <__aeabi_dadd+0x292>
 8000c38:	000c      	movs	r4, r1
 8000c3a:	0035      	movs	r5, r6
 8000c3c:	3c20      	subs	r4, #32
 8000c3e:	40e5      	lsrs	r5, r4
 8000c40:	2920      	cmp	r1, #32
 8000c42:	d005      	beq.n	8000c50 <__aeabi_dadd+0x5a0>
 8000c44:	2440      	movs	r4, #64	@ 0x40
 8000c46:	1a61      	subs	r1, r4, r1
 8000c48:	408e      	lsls	r6, r1
 8000c4a:	4649      	mov	r1, r9
 8000c4c:	4331      	orrs	r1, r6
 8000c4e:	4689      	mov	r9, r1
 8000c50:	4648      	mov	r0, r9
 8000c52:	1e41      	subs	r1, r0, #1
 8000c54:	4188      	sbcs	r0, r1
 8000c56:	0007      	movs	r7, r0
 8000c58:	432f      	orrs	r7, r5
 8000c5a:	e5ef      	b.n	800083c <__aeabi_dadd+0x18c>
 8000c5c:	08d2      	lsrs	r2, r2, #3
 8000c5e:	075f      	lsls	r7, r3, #29
 8000c60:	4665      	mov	r5, ip
 8000c62:	4317      	orrs	r7, r2
 8000c64:	08d8      	lsrs	r0, r3, #3
 8000c66:	e687      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000c68:	1a17      	subs	r7, r2, r0
 8000c6a:	42ba      	cmp	r2, r7
 8000c6c:	4192      	sbcs	r2, r2
 8000c6e:	1b9e      	subs	r6, r3, r6
 8000c70:	4252      	negs	r2, r2
 8000c72:	1ab6      	subs	r6, r6, r2
 8000c74:	0233      	lsls	r3, r6, #8
 8000c76:	d4c1      	bmi.n	8000bfc <__aeabi_dadd+0x54c>
 8000c78:	0773      	lsls	r3, r6, #29
 8000c7a:	08ff      	lsrs	r7, r7, #3
 8000c7c:	4665      	mov	r5, ip
 8000c7e:	2101      	movs	r1, #1
 8000c80:	431f      	orrs	r7, r3
 8000c82:	08f0      	lsrs	r0, r6, #3
 8000c84:	e64b      	b.n	800091e <__aeabi_dadd+0x26e>
 8000c86:	2f00      	cmp	r7, #0
 8000c88:	d07b      	beq.n	8000d82 <__aeabi_dadd+0x6d2>
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	001e      	movs	r6, r3
 8000c8e:	4691      	mov	r9, r2
 8000c90:	e63f      	b.n	8000912 <__aeabi_dadd+0x262>
 8000c92:	1a81      	subs	r1, r0, r2
 8000c94:	4688      	mov	r8, r1
 8000c96:	45c1      	cmp	r9, r8
 8000c98:	41a4      	sbcs	r4, r4
 8000c9a:	1af1      	subs	r1, r6, r3
 8000c9c:	4264      	negs	r4, r4
 8000c9e:	1b09      	subs	r1, r1, r4
 8000ca0:	2480      	movs	r4, #128	@ 0x80
 8000ca2:	0424      	lsls	r4, r4, #16
 8000ca4:	4221      	tst	r1, r4
 8000ca6:	d077      	beq.n	8000d98 <__aeabi_dadd+0x6e8>
 8000ca8:	1a10      	subs	r0, r2, r0
 8000caa:	4282      	cmp	r2, r0
 8000cac:	4192      	sbcs	r2, r2
 8000cae:	0007      	movs	r7, r0
 8000cb0:	1b9e      	subs	r6, r3, r6
 8000cb2:	4252      	negs	r2, r2
 8000cb4:	1ab6      	subs	r6, r6, r2
 8000cb6:	4337      	orrs	r7, r6
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_dadd+0x60c>
 8000cba:	e0a0      	b.n	8000dfe <__aeabi_dadd+0x74e>
 8000cbc:	4665      	mov	r5, ip
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e63e      	b.n	8000942 <__aeabi_dadd+0x292>
 8000cc4:	075f      	lsls	r7, r3, #29
 8000cc6:	08d2      	lsrs	r2, r2, #3
 8000cc8:	4665      	mov	r5, ip
 8000cca:	4317      	orrs	r7, r2
 8000ccc:	08d8      	lsrs	r0, r3, #3
 8000cce:	e653      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000cd0:	1881      	adds	r1, r0, r2
 8000cd2:	4291      	cmp	r1, r2
 8000cd4:	4192      	sbcs	r2, r2
 8000cd6:	18f0      	adds	r0, r6, r3
 8000cd8:	4252      	negs	r2, r2
 8000cda:	1880      	adds	r0, r0, r2
 8000cdc:	0203      	lsls	r3, r0, #8
 8000cde:	d500      	bpl.n	8000ce2 <__aeabi_dadd+0x632>
 8000ce0:	e768      	b.n	8000bb4 <__aeabi_dadd+0x504>
 8000ce2:	0747      	lsls	r7, r0, #29
 8000ce4:	08c9      	lsrs	r1, r1, #3
 8000ce6:	430f      	orrs	r7, r1
 8000ce8:	08c0      	lsrs	r0, r0, #3
 8000cea:	2101      	movs	r1, #1
 8000cec:	e617      	b.n	800091e <__aeabi_dadd+0x26e>
 8000cee:	08d2      	lsrs	r2, r2, #3
 8000cf0:	075f      	lsls	r7, r3, #29
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	08d8      	lsrs	r0, r3, #3
 8000cf6:	e63f      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000cf8:	000c      	movs	r4, r1
 8000cfa:	2600      	movs	r6, #0
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	e620      	b.n	8000942 <__aeabi_dadd+0x292>
 8000d00:	2900      	cmp	r1, #0
 8000d02:	d156      	bne.n	8000db2 <__aeabi_dadd+0x702>
 8000d04:	075f      	lsls	r7, r3, #29
 8000d06:	08d2      	lsrs	r2, r2, #3
 8000d08:	4317      	orrs	r7, r2
 8000d0a:	08d8      	lsrs	r0, r3, #3
 8000d0c:	e634      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000d0e:	000c      	movs	r4, r1
 8000d10:	001e      	movs	r6, r3
 8000d12:	08d0      	lsrs	r0, r2, #3
 8000d14:	e629      	b.n	800096a <__aeabi_dadd+0x2ba>
 8000d16:	08c1      	lsrs	r1, r0, #3
 8000d18:	0770      	lsls	r0, r6, #29
 8000d1a:	4301      	orrs	r1, r0
 8000d1c:	08f0      	lsrs	r0, r6, #3
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d062      	beq.n	8000de8 <__aeabi_dadd+0x738>
 8000d22:	2480      	movs	r4, #128	@ 0x80
 8000d24:	0324      	lsls	r4, r4, #12
 8000d26:	4220      	tst	r0, r4
 8000d28:	d007      	beq.n	8000d3a <__aeabi_dadd+0x68a>
 8000d2a:	08de      	lsrs	r6, r3, #3
 8000d2c:	4226      	tst	r6, r4
 8000d2e:	d104      	bne.n	8000d3a <__aeabi_dadd+0x68a>
 8000d30:	4665      	mov	r5, ip
 8000d32:	0030      	movs	r0, r6
 8000d34:	08d1      	lsrs	r1, r2, #3
 8000d36:	075b      	lsls	r3, r3, #29
 8000d38:	4319      	orrs	r1, r3
 8000d3a:	0f4f      	lsrs	r7, r1, #29
 8000d3c:	00c9      	lsls	r1, r1, #3
 8000d3e:	08c9      	lsrs	r1, r1, #3
 8000d40:	077f      	lsls	r7, r7, #29
 8000d42:	430f      	orrs	r7, r1
 8000d44:	e618      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000d46:	000c      	movs	r4, r1
 8000d48:	0030      	movs	r0, r6
 8000d4a:	3c20      	subs	r4, #32
 8000d4c:	40e0      	lsrs	r0, r4
 8000d4e:	4684      	mov	ip, r0
 8000d50:	2920      	cmp	r1, #32
 8000d52:	d005      	beq.n	8000d60 <__aeabi_dadd+0x6b0>
 8000d54:	2440      	movs	r4, #64	@ 0x40
 8000d56:	1a61      	subs	r1, r4, r1
 8000d58:	408e      	lsls	r6, r1
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	4331      	orrs	r1, r6
 8000d5e:	4689      	mov	r9, r1
 8000d60:	4648      	mov	r0, r9
 8000d62:	1e41      	subs	r1, r0, #1
 8000d64:	4188      	sbcs	r0, r1
 8000d66:	4661      	mov	r1, ip
 8000d68:	0007      	movs	r7, r0
 8000d6a:	430f      	orrs	r7, r1
 8000d6c:	e630      	b.n	80009d0 <__aeabi_dadd+0x320>
 8000d6e:	2120      	movs	r1, #32
 8000d70:	2700      	movs	r7, #0
 8000d72:	1a09      	subs	r1, r1, r0
 8000d74:	e50e      	b.n	8000794 <__aeabi_dadd+0xe4>
 8000d76:	001e      	movs	r6, r3
 8000d78:	2f00      	cmp	r7, #0
 8000d7a:	d000      	beq.n	8000d7e <__aeabi_dadd+0x6ce>
 8000d7c:	e522      	b.n	80007c4 <__aeabi_dadd+0x114>
 8000d7e:	2400      	movs	r4, #0
 8000d80:	e758      	b.n	8000c34 <__aeabi_dadd+0x584>
 8000d82:	2500      	movs	r5, #0
 8000d84:	2400      	movs	r4, #0
 8000d86:	2600      	movs	r6, #0
 8000d88:	e5db      	b.n	8000942 <__aeabi_dadd+0x292>
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	000007fe 	.word	0x000007fe
 8000d90:	000007ff 	.word	0x000007ff
 8000d94:	ff7fffff 	.word	0xff7fffff
 8000d98:	4647      	mov	r7, r8
 8000d9a:	430f      	orrs	r7, r1
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_dadd+0x6f0>
 8000d9e:	e747      	b.n	8000c30 <__aeabi_dadd+0x580>
 8000da0:	000e      	movs	r6, r1
 8000da2:	46c1      	mov	r9, r8
 8000da4:	e5b5      	b.n	8000912 <__aeabi_dadd+0x262>
 8000da6:	08df      	lsrs	r7, r3, #3
 8000da8:	0764      	lsls	r4, r4, #29
 8000daa:	2102      	movs	r1, #2
 8000dac:	4327      	orrs	r7, r4
 8000dae:	0900      	lsrs	r0, r0, #4
 8000db0:	e5b5      	b.n	800091e <__aeabi_dadd+0x26e>
 8000db2:	0019      	movs	r1, r3
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	0777      	lsls	r7, r6, #29
 8000db8:	4307      	orrs	r7, r0
 8000dba:	4311      	orrs	r1, r2
 8000dbc:	08f0      	lsrs	r0, r6, #3
 8000dbe:	2900      	cmp	r1, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dadd+0x714>
 8000dc2:	e5d9      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0309      	lsls	r1, r1, #12
 8000dc8:	4208      	tst	r0, r1
 8000dca:	d007      	beq.n	8000ddc <__aeabi_dadd+0x72c>
 8000dcc:	08dc      	lsrs	r4, r3, #3
 8000dce:	420c      	tst	r4, r1
 8000dd0:	d104      	bne.n	8000ddc <__aeabi_dadd+0x72c>
 8000dd2:	08d2      	lsrs	r2, r2, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	0017      	movs	r7, r2
 8000dda:	0020      	movs	r0, r4
 8000ddc:	0f7b      	lsrs	r3, r7, #29
 8000dde:	00ff      	lsls	r7, r7, #3
 8000de0:	08ff      	lsrs	r7, r7, #3
 8000de2:	075b      	lsls	r3, r3, #29
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e5c7      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000de8:	000f      	movs	r7, r1
 8000dea:	e5c5      	b.n	8000978 <__aeabi_dadd+0x2c8>
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <__aeabi_dadd+0x788>)
 8000dee:	08d2      	lsrs	r2, r2, #3
 8000df0:	4033      	ands	r3, r6
 8000df2:	075f      	lsls	r7, r3, #29
 8000df4:	025b      	lsls	r3, r3, #9
 8000df6:	2401      	movs	r4, #1
 8000df8:	4317      	orrs	r7, r2
 8000dfa:	0b1e      	lsrs	r6, r3, #12
 8000dfc:	e5a1      	b.n	8000942 <__aeabi_dadd+0x292>
 8000dfe:	4226      	tst	r6, r4
 8000e00:	d012      	beq.n	8000e28 <__aeabi_dadd+0x778>
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <__aeabi_dadd+0x788>)
 8000e04:	4665      	mov	r5, ip
 8000e06:	0002      	movs	r2, r0
 8000e08:	2401      	movs	r4, #1
 8000e0a:	401e      	ands	r6, r3
 8000e0c:	e4e6      	b.n	80007dc <__aeabi_dadd+0x12c>
 8000e0e:	0021      	movs	r1, r4
 8000e10:	e585      	b.n	800091e <__aeabi_dadd+0x26e>
 8000e12:	0017      	movs	r7, r2
 8000e14:	e5a8      	b.n	8000968 <__aeabi_dadd+0x2b8>
 8000e16:	003a      	movs	r2, r7
 8000e18:	e4d4      	b.n	80007c4 <__aeabi_dadd+0x114>
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	0764      	lsls	r4, r4, #29
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	0027      	movs	r7, r4
 8000e22:	2102      	movs	r1, #2
 8000e24:	0900      	lsrs	r0, r0, #4
 8000e26:	e57a      	b.n	800091e <__aeabi_dadd+0x26e>
 8000e28:	08c0      	lsrs	r0, r0, #3
 8000e2a:	0777      	lsls	r7, r6, #29
 8000e2c:	4307      	orrs	r7, r0
 8000e2e:	4665      	mov	r5, ip
 8000e30:	2100      	movs	r1, #0
 8000e32:	08f0      	lsrs	r0, r6, #3
 8000e34:	e573      	b.n	800091e <__aeabi_dadd+0x26e>
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	ff7fffff 	.word	0xff7fffff

08000e3c <__aeabi_ddiv>:
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	46de      	mov	lr, fp
 8000e40:	4645      	mov	r5, r8
 8000e42:	4657      	mov	r7, sl
 8000e44:	464e      	mov	r6, r9
 8000e46:	b5e0      	push	{r5, r6, r7, lr}
 8000e48:	b087      	sub	sp, #28
 8000e4a:	9200      	str	r2, [sp, #0]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	030b      	lsls	r3, r1, #12
 8000e50:	0b1b      	lsrs	r3, r3, #12
 8000e52:	469b      	mov	fp, r3
 8000e54:	0fca      	lsrs	r2, r1, #31
 8000e56:	004b      	lsls	r3, r1, #1
 8000e58:	0004      	movs	r4, r0
 8000e5a:	4680      	mov	r8, r0
 8000e5c:	0d5b      	lsrs	r3, r3, #21
 8000e5e:	9202      	str	r2, [sp, #8]
 8000e60:	d100      	bne.n	8000e64 <__aeabi_ddiv+0x28>
 8000e62:	e098      	b.n	8000f96 <__aeabi_ddiv+0x15a>
 8000e64:	4a7c      	ldr	r2, [pc, #496]	@ (8001058 <__aeabi_ddiv+0x21c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d037      	beq.n	8000eda <__aeabi_ddiv+0x9e>
 8000e6a:	4659      	mov	r1, fp
 8000e6c:	0f42      	lsrs	r2, r0, #29
 8000e6e:	00c9      	lsls	r1, r1, #3
 8000e70:	430a      	orrs	r2, r1
 8000e72:	2180      	movs	r1, #128	@ 0x80
 8000e74:	0409      	lsls	r1, r1, #16
 8000e76:	4311      	orrs	r1, r2
 8000e78:	00c2      	lsls	r2, r0, #3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	4a77      	ldr	r2, [pc, #476]	@ (800105c <__aeabi_ddiv+0x220>)
 8000e7e:	4689      	mov	r9, r1
 8000e80:	4692      	mov	sl, r2
 8000e82:	449a      	add	sl, r3
 8000e84:	2300      	movs	r3, #0
 8000e86:	2400      	movs	r4, #0
 8000e88:	9303      	str	r3, [sp, #12]
 8000e8a:	9e00      	ldr	r6, [sp, #0]
 8000e8c:	9f01      	ldr	r7, [sp, #4]
 8000e8e:	033b      	lsls	r3, r7, #12
 8000e90:	0b1b      	lsrs	r3, r3, #12
 8000e92:	469b      	mov	fp, r3
 8000e94:	007b      	lsls	r3, r7, #1
 8000e96:	0030      	movs	r0, r6
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0ffd      	lsrs	r5, r7, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d059      	beq.n	8000f54 <__aeabi_ddiv+0x118>
 8000ea0:	4a6d      	ldr	r2, [pc, #436]	@ (8001058 <__aeabi_ddiv+0x21c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d048      	beq.n	8000f38 <__aeabi_ddiv+0xfc>
 8000ea6:	4659      	mov	r1, fp
 8000ea8:	0f72      	lsrs	r2, r6, #29
 8000eaa:	00c9      	lsls	r1, r1, #3
 8000eac:	430a      	orrs	r2, r1
 8000eae:	2180      	movs	r1, #128	@ 0x80
 8000eb0:	0409      	lsls	r1, r1, #16
 8000eb2:	4311      	orrs	r1, r2
 8000eb4:	468b      	mov	fp, r1
 8000eb6:	4969      	ldr	r1, [pc, #420]	@ (800105c <__aeabi_ddiv+0x220>)
 8000eb8:	00f2      	lsls	r2, r6, #3
 8000eba:	468c      	mov	ip, r1
 8000ebc:	4651      	mov	r1, sl
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1acb      	subs	r3, r1, r3
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	9e02      	ldr	r6, [sp, #8]
 8000ec8:	406e      	eors	r6, r5
 8000eca:	b2f6      	uxtb	r6, r6
 8000ecc:	2c0f      	cmp	r4, #15
 8000ece:	d900      	bls.n	8000ed2 <__aeabi_ddiv+0x96>
 8000ed0:	e0ce      	b.n	8001070 <__aeabi_ddiv+0x234>
 8000ed2:	4b63      	ldr	r3, [pc, #396]	@ (8001060 <__aeabi_ddiv+0x224>)
 8000ed4:	00a4      	lsls	r4, r4, #2
 8000ed6:	591b      	ldr	r3, [r3, r4]
 8000ed8:	469f      	mov	pc, r3
 8000eda:	465a      	mov	r2, fp
 8000edc:	4302      	orrs	r2, r0
 8000ede:	4691      	mov	r9, r2
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_ddiv+0xa8>
 8000ee2:	e090      	b.n	8001006 <__aeabi_ddiv+0x1ca>
 8000ee4:	469a      	mov	sl, r3
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	4690      	mov	r8, r2
 8000eea:	2408      	movs	r4, #8
 8000eec:	9303      	str	r3, [sp, #12]
 8000eee:	e7cc      	b.n	8000e8a <__aeabi_ddiv+0x4e>
 8000ef0:	46cb      	mov	fp, r9
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	9d02      	ldr	r5, [sp, #8]
 8000ef6:	9903      	ldr	r1, [sp, #12]
 8000ef8:	2902      	cmp	r1, #2
 8000efa:	d100      	bne.n	8000efe <__aeabi_ddiv+0xc2>
 8000efc:	e1de      	b.n	80012bc <__aeabi_ddiv+0x480>
 8000efe:	2903      	cmp	r1, #3
 8000f00:	d100      	bne.n	8000f04 <__aeabi_ddiv+0xc8>
 8000f02:	e08d      	b.n	8001020 <__aeabi_ddiv+0x1e4>
 8000f04:	2901      	cmp	r1, #1
 8000f06:	d000      	beq.n	8000f0a <__aeabi_ddiv+0xce>
 8000f08:	e179      	b.n	80011fe <__aeabi_ddiv+0x3c2>
 8000f0a:	002e      	movs	r6, r5
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2400      	movs	r4, #0
 8000f12:	4690      	mov	r8, r2
 8000f14:	051b      	lsls	r3, r3, #20
 8000f16:	4323      	orrs	r3, r4
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4333      	orrs	r3, r6
 8000f1c:	4640      	mov	r0, r8
 8000f1e:	0019      	movs	r1, r3
 8000f20:	b007      	add	sp, #28
 8000f22:	bcf0      	pop	{r4, r5, r6, r7}
 8000f24:	46bb      	mov	fp, r7
 8000f26:	46b2      	mov	sl, r6
 8000f28:	46a9      	mov	r9, r5
 8000f2a:	46a0      	mov	r8, r4
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2400      	movs	r4, #0
 8000f32:	4690      	mov	r8, r2
 8000f34:	4b48      	ldr	r3, [pc, #288]	@ (8001058 <__aeabi_ddiv+0x21c>)
 8000f36:	e7ed      	b.n	8000f14 <__aeabi_ddiv+0xd8>
 8000f38:	465a      	mov	r2, fp
 8000f3a:	9b00      	ldr	r3, [sp, #0]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4b49      	ldr	r3, [pc, #292]	@ (8001064 <__aeabi_ddiv+0x228>)
 8000f40:	469c      	mov	ip, r3
 8000f42:	44e2      	add	sl, ip
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d159      	bne.n	8000ffc <__aeabi_ddiv+0x1c0>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2102      	movs	r1, #2
 8000f50:	469b      	mov	fp, r3
 8000f52:	e7b8      	b.n	8000ec6 <__aeabi_ddiv+0x8a>
 8000f54:	465a      	mov	r2, fp
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	d049      	beq.n	8000ff0 <__aeabi_ddiv+0x1b4>
 8000f5c:	465b      	mov	r3, fp
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x128>
 8000f62:	e19c      	b.n	800129e <__aeabi_ddiv+0x462>
 8000f64:	4658      	mov	r0, fp
 8000f66:	f001 fc0d 	bl	8002784 <__clzsi2>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	3a0b      	subs	r2, #11
 8000f70:	271d      	movs	r7, #29
 8000f72:	9e00      	ldr	r6, [sp, #0]
 8000f74:	1aba      	subs	r2, r7, r2
 8000f76:	0019      	movs	r1, r3
 8000f78:	4658      	mov	r0, fp
 8000f7a:	40d6      	lsrs	r6, r2
 8000f7c:	3908      	subs	r1, #8
 8000f7e:	4088      	lsls	r0, r1
 8000f80:	0032      	movs	r2, r6
 8000f82:	4302      	orrs	r2, r0
 8000f84:	4693      	mov	fp, r2
 8000f86:	9a00      	ldr	r2, [sp, #0]
 8000f88:	408a      	lsls	r2, r1
 8000f8a:	4937      	ldr	r1, [pc, #220]	@ (8001068 <__aeabi_ddiv+0x22c>)
 8000f8c:	4453      	add	r3, sl
 8000f8e:	468a      	mov	sl, r1
 8000f90:	2100      	movs	r1, #0
 8000f92:	449a      	add	sl, r3
 8000f94:	e797      	b.n	8000ec6 <__aeabi_ddiv+0x8a>
 8000f96:	465b      	mov	r3, fp
 8000f98:	4303      	orrs	r3, r0
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	d021      	beq.n	8000fe2 <__aeabi_ddiv+0x1a6>
 8000f9e:	465b      	mov	r3, fp
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_ddiv+0x16a>
 8000fa4:	e169      	b.n	800127a <__aeabi_ddiv+0x43e>
 8000fa6:	4658      	mov	r0, fp
 8000fa8:	f001 fbec 	bl	8002784 <__clzsi2>
 8000fac:	230b      	movs	r3, #11
 8000fae:	425b      	negs	r3, r3
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	4484      	add	ip, r0
 8000fb6:	4666      	mov	r6, ip
 8000fb8:	231d      	movs	r3, #29
 8000fba:	1b9b      	subs	r3, r3, r6
 8000fbc:	0026      	movs	r6, r4
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	4658      	mov	r0, fp
 8000fc2:	40de      	lsrs	r6, r3
 8000fc4:	3908      	subs	r1, #8
 8000fc6:	4088      	lsls	r0, r1
 8000fc8:	0033      	movs	r3, r6
 8000fca:	4303      	orrs	r3, r0
 8000fcc:	4699      	mov	r9, r3
 8000fce:	0023      	movs	r3, r4
 8000fd0:	408b      	lsls	r3, r1
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	4b25      	ldr	r3, [pc, #148]	@ (800106c <__aeabi_ddiv+0x230>)
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	469a      	mov	sl, r3
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9303      	str	r3, [sp, #12]
 8000fe0:	e753      	b.n	8000e8a <__aeabi_ddiv+0x4e>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	4698      	mov	r8, r3
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	2404      	movs	r4, #4
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	e74c      	b.n	8000e8a <__aeabi_ddiv+0x4e>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	469b      	mov	fp, r3
 8000ffa:	e764      	b.n	8000ec6 <__aeabi_ddiv+0x8a>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	0032      	movs	r2, r6
 8001000:	2103      	movs	r1, #3
 8001002:	431c      	orrs	r4, r3
 8001004:	e75f      	b.n	8000ec6 <__aeabi_ddiv+0x8a>
 8001006:	469a      	mov	sl, r3
 8001008:	2303      	movs	r3, #3
 800100a:	46d9      	mov	r9, fp
 800100c:	240c      	movs	r4, #12
 800100e:	9303      	str	r3, [sp, #12]
 8001010:	e73b      	b.n	8000e8a <__aeabi_ddiv+0x4e>
 8001012:	2300      	movs	r3, #0
 8001014:	2480      	movs	r4, #128	@ 0x80
 8001016:	4698      	mov	r8, r3
 8001018:	2600      	movs	r6, #0
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <__aeabi_ddiv+0x21c>)
 800101c:	0324      	lsls	r4, r4, #12
 800101e:	e779      	b.n	8000f14 <__aeabi_ddiv+0xd8>
 8001020:	2480      	movs	r4, #128	@ 0x80
 8001022:	465b      	mov	r3, fp
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	431c      	orrs	r4, r3
 8001028:	0324      	lsls	r4, r4, #12
 800102a:	002e      	movs	r6, r5
 800102c:	4690      	mov	r8, r2
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <__aeabi_ddiv+0x21c>)
 8001030:	0b24      	lsrs	r4, r4, #12
 8001032:	e76f      	b.n	8000f14 <__aeabi_ddiv+0xd8>
 8001034:	2480      	movs	r4, #128	@ 0x80
 8001036:	464b      	mov	r3, r9
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	4223      	tst	r3, r4
 800103c:	d002      	beq.n	8001044 <__aeabi_ddiv+0x208>
 800103e:	465b      	mov	r3, fp
 8001040:	4223      	tst	r3, r4
 8001042:	d0f0      	beq.n	8001026 <__aeabi_ddiv+0x1ea>
 8001044:	2480      	movs	r4, #128	@ 0x80
 8001046:	464b      	mov	r3, r9
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	431c      	orrs	r4, r3
 800104c:	0324      	lsls	r4, r4, #12
 800104e:	9e02      	ldr	r6, [sp, #8]
 8001050:	4b01      	ldr	r3, [pc, #4]	@ (8001058 <__aeabi_ddiv+0x21c>)
 8001052:	0b24      	lsrs	r4, r4, #12
 8001054:	e75e      	b.n	8000f14 <__aeabi_ddiv+0xd8>
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	000007ff 	.word	0x000007ff
 800105c:	fffffc01 	.word	0xfffffc01
 8001060:	0800afdc 	.word	0x0800afdc
 8001064:	fffff801 	.word	0xfffff801
 8001068:	000003f3 	.word	0x000003f3
 800106c:	fffffc0d 	.word	0xfffffc0d
 8001070:	45cb      	cmp	fp, r9
 8001072:	d200      	bcs.n	8001076 <__aeabi_ddiv+0x23a>
 8001074:	e0f8      	b.n	8001268 <__aeabi_ddiv+0x42c>
 8001076:	d100      	bne.n	800107a <__aeabi_ddiv+0x23e>
 8001078:	e0f3      	b.n	8001262 <__aeabi_ddiv+0x426>
 800107a:	2301      	movs	r3, #1
 800107c:	425b      	negs	r3, r3
 800107e:	469c      	mov	ip, r3
 8001080:	4644      	mov	r4, r8
 8001082:	4648      	mov	r0, r9
 8001084:	2500      	movs	r5, #0
 8001086:	44e2      	add	sl, ip
 8001088:	465b      	mov	r3, fp
 800108a:	0e17      	lsrs	r7, r2, #24
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	431f      	orrs	r7, r3
 8001090:	0c19      	lsrs	r1, r3, #16
 8001092:	043b      	lsls	r3, r7, #16
 8001094:	0212      	lsls	r2, r2, #8
 8001096:	9700      	str	r7, [sp, #0]
 8001098:	0c1f      	lsrs	r7, r3, #16
 800109a:	4691      	mov	r9, r2
 800109c:	9102      	str	r1, [sp, #8]
 800109e:	9703      	str	r7, [sp, #12]
 80010a0:	f7ff f8d2 	bl	8000248 <__aeabi_uidivmod>
 80010a4:	0002      	movs	r2, r0
 80010a6:	437a      	muls	r2, r7
 80010a8:	040b      	lsls	r3, r1, #16
 80010aa:	0c21      	lsrs	r1, r4, #16
 80010ac:	4680      	mov	r8, r0
 80010ae:	4319      	orrs	r1, r3
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d909      	bls.n	80010c8 <__aeabi_ddiv+0x28c>
 80010b4:	9f00      	ldr	r7, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	46bc      	mov	ip, r7
 80010ba:	425b      	negs	r3, r3
 80010bc:	4461      	add	r1, ip
 80010be:	469c      	mov	ip, r3
 80010c0:	44e0      	add	r8, ip
 80010c2:	428f      	cmp	r7, r1
 80010c4:	d800      	bhi.n	80010c8 <__aeabi_ddiv+0x28c>
 80010c6:	e15c      	b.n	8001382 <__aeabi_ddiv+0x546>
 80010c8:	1a88      	subs	r0, r1, r2
 80010ca:	9902      	ldr	r1, [sp, #8]
 80010cc:	f7ff f8bc 	bl	8000248 <__aeabi_uidivmod>
 80010d0:	9a03      	ldr	r2, [sp, #12]
 80010d2:	0424      	lsls	r4, r4, #16
 80010d4:	4342      	muls	r2, r0
 80010d6:	0409      	lsls	r1, r1, #16
 80010d8:	0c24      	lsrs	r4, r4, #16
 80010da:	0003      	movs	r3, r0
 80010dc:	430c      	orrs	r4, r1
 80010de:	42a2      	cmp	r2, r4
 80010e0:	d906      	bls.n	80010f0 <__aeabi_ddiv+0x2b4>
 80010e2:	9900      	ldr	r1, [sp, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	468c      	mov	ip, r1
 80010e8:	4464      	add	r4, ip
 80010ea:	42a1      	cmp	r1, r4
 80010ec:	d800      	bhi.n	80010f0 <__aeabi_ddiv+0x2b4>
 80010ee:	e142      	b.n	8001376 <__aeabi_ddiv+0x53a>
 80010f0:	1aa0      	subs	r0, r4, r2
 80010f2:	4642      	mov	r2, r8
 80010f4:	0412      	lsls	r2, r2, #16
 80010f6:	431a      	orrs	r2, r3
 80010f8:	4693      	mov	fp, r2
 80010fa:	464b      	mov	r3, r9
 80010fc:	4659      	mov	r1, fp
 80010fe:	0c1b      	lsrs	r3, r3, #16
 8001100:	001f      	movs	r7, r3
 8001102:	9304      	str	r3, [sp, #16]
 8001104:	040b      	lsls	r3, r1, #16
 8001106:	4649      	mov	r1, r9
 8001108:	0409      	lsls	r1, r1, #16
 800110a:	0c09      	lsrs	r1, r1, #16
 800110c:	000c      	movs	r4, r1
 800110e:	0c1b      	lsrs	r3, r3, #16
 8001110:	435c      	muls	r4, r3
 8001112:	0c12      	lsrs	r2, r2, #16
 8001114:	437b      	muls	r3, r7
 8001116:	4688      	mov	r8, r1
 8001118:	4351      	muls	r1, r2
 800111a:	437a      	muls	r2, r7
 800111c:	0c27      	lsrs	r7, r4, #16
 800111e:	46bc      	mov	ip, r7
 8001120:	185b      	adds	r3, r3, r1
 8001122:	4463      	add	r3, ip
 8001124:	4299      	cmp	r1, r3
 8001126:	d903      	bls.n	8001130 <__aeabi_ddiv+0x2f4>
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	0249      	lsls	r1, r1, #9
 800112c:	468c      	mov	ip, r1
 800112e:	4462      	add	r2, ip
 8001130:	0c19      	lsrs	r1, r3, #16
 8001132:	0424      	lsls	r4, r4, #16
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	0c24      	lsrs	r4, r4, #16
 8001138:	188a      	adds	r2, r1, r2
 800113a:	191c      	adds	r4, r3, r4
 800113c:	4290      	cmp	r0, r2
 800113e:	d302      	bcc.n	8001146 <__aeabi_ddiv+0x30a>
 8001140:	d116      	bne.n	8001170 <__aeabi_ddiv+0x334>
 8001142:	42a5      	cmp	r5, r4
 8001144:	d214      	bcs.n	8001170 <__aeabi_ddiv+0x334>
 8001146:	465b      	mov	r3, fp
 8001148:	9f00      	ldr	r7, [sp, #0]
 800114a:	3b01      	subs	r3, #1
 800114c:	444d      	add	r5, r9
 800114e:	9305      	str	r3, [sp, #20]
 8001150:	454d      	cmp	r5, r9
 8001152:	419b      	sbcs	r3, r3
 8001154:	46bc      	mov	ip, r7
 8001156:	425b      	negs	r3, r3
 8001158:	4463      	add	r3, ip
 800115a:	18c0      	adds	r0, r0, r3
 800115c:	4287      	cmp	r7, r0
 800115e:	d300      	bcc.n	8001162 <__aeabi_ddiv+0x326>
 8001160:	e102      	b.n	8001368 <__aeabi_ddiv+0x52c>
 8001162:	4282      	cmp	r2, r0
 8001164:	d900      	bls.n	8001168 <__aeabi_ddiv+0x32c>
 8001166:	e129      	b.n	80013bc <__aeabi_ddiv+0x580>
 8001168:	d100      	bne.n	800116c <__aeabi_ddiv+0x330>
 800116a:	e124      	b.n	80013b6 <__aeabi_ddiv+0x57a>
 800116c:	9b05      	ldr	r3, [sp, #20]
 800116e:	469b      	mov	fp, r3
 8001170:	1b2c      	subs	r4, r5, r4
 8001172:	42a5      	cmp	r5, r4
 8001174:	41ad      	sbcs	r5, r5
 8001176:	9b00      	ldr	r3, [sp, #0]
 8001178:	1a80      	subs	r0, r0, r2
 800117a:	426d      	negs	r5, r5
 800117c:	1b40      	subs	r0, r0, r5
 800117e:	4283      	cmp	r3, r0
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x348>
 8001182:	e10f      	b.n	80013a4 <__aeabi_ddiv+0x568>
 8001184:	9902      	ldr	r1, [sp, #8]
 8001186:	f7ff f85f 	bl	8000248 <__aeabi_uidivmod>
 800118a:	9a03      	ldr	r2, [sp, #12]
 800118c:	040b      	lsls	r3, r1, #16
 800118e:	4342      	muls	r2, r0
 8001190:	0c21      	lsrs	r1, r4, #16
 8001192:	0005      	movs	r5, r0
 8001194:	4319      	orrs	r1, r3
 8001196:	428a      	cmp	r2, r1
 8001198:	d900      	bls.n	800119c <__aeabi_ddiv+0x360>
 800119a:	e0cb      	b.n	8001334 <__aeabi_ddiv+0x4f8>
 800119c:	1a88      	subs	r0, r1, r2
 800119e:	9902      	ldr	r1, [sp, #8]
 80011a0:	f7ff f852 	bl	8000248 <__aeabi_uidivmod>
 80011a4:	9a03      	ldr	r2, [sp, #12]
 80011a6:	0424      	lsls	r4, r4, #16
 80011a8:	4342      	muls	r2, r0
 80011aa:	0409      	lsls	r1, r1, #16
 80011ac:	0c24      	lsrs	r4, r4, #16
 80011ae:	0003      	movs	r3, r0
 80011b0:	430c      	orrs	r4, r1
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	d900      	bls.n	80011b8 <__aeabi_ddiv+0x37c>
 80011b6:	e0ca      	b.n	800134e <__aeabi_ddiv+0x512>
 80011b8:	4641      	mov	r1, r8
 80011ba:	1aa4      	subs	r4, r4, r2
 80011bc:	042a      	lsls	r2, r5, #16
 80011be:	431a      	orrs	r2, r3
 80011c0:	9f04      	ldr	r7, [sp, #16]
 80011c2:	0413      	lsls	r3, r2, #16
 80011c4:	0c1b      	lsrs	r3, r3, #16
 80011c6:	4359      	muls	r1, r3
 80011c8:	4640      	mov	r0, r8
 80011ca:	437b      	muls	r3, r7
 80011cc:	469c      	mov	ip, r3
 80011ce:	0c15      	lsrs	r5, r2, #16
 80011d0:	4368      	muls	r0, r5
 80011d2:	0c0b      	lsrs	r3, r1, #16
 80011d4:	4484      	add	ip, r0
 80011d6:	4463      	add	r3, ip
 80011d8:	437d      	muls	r5, r7
 80011da:	4298      	cmp	r0, r3
 80011dc:	d903      	bls.n	80011e6 <__aeabi_ddiv+0x3aa>
 80011de:	2080      	movs	r0, #128	@ 0x80
 80011e0:	0240      	lsls	r0, r0, #9
 80011e2:	4684      	mov	ip, r0
 80011e4:	4465      	add	r5, ip
 80011e6:	0c18      	lsrs	r0, r3, #16
 80011e8:	0409      	lsls	r1, r1, #16
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	0c09      	lsrs	r1, r1, #16
 80011ee:	1940      	adds	r0, r0, r5
 80011f0:	185b      	adds	r3, r3, r1
 80011f2:	4284      	cmp	r4, r0
 80011f4:	d327      	bcc.n	8001246 <__aeabi_ddiv+0x40a>
 80011f6:	d023      	beq.n	8001240 <__aeabi_ddiv+0x404>
 80011f8:	2301      	movs	r3, #1
 80011fa:	0035      	movs	r5, r6
 80011fc:	431a      	orrs	r2, r3
 80011fe:	4b94      	ldr	r3, [pc, #592]	@ (8001450 <__aeabi_ddiv+0x614>)
 8001200:	4453      	add	r3, sl
 8001202:	2b00      	cmp	r3, #0
 8001204:	dd60      	ble.n	80012c8 <__aeabi_ddiv+0x48c>
 8001206:	0751      	lsls	r1, r2, #29
 8001208:	d000      	beq.n	800120c <__aeabi_ddiv+0x3d0>
 800120a:	e086      	b.n	800131a <__aeabi_ddiv+0x4de>
 800120c:	002e      	movs	r6, r5
 800120e:	08d1      	lsrs	r1, r2, #3
 8001210:	465a      	mov	r2, fp
 8001212:	01d2      	lsls	r2, r2, #7
 8001214:	d506      	bpl.n	8001224 <__aeabi_ddiv+0x3e8>
 8001216:	465a      	mov	r2, fp
 8001218:	4b8e      	ldr	r3, [pc, #568]	@ (8001454 <__aeabi_ddiv+0x618>)
 800121a:	401a      	ands	r2, r3
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	4693      	mov	fp, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4453      	add	r3, sl
 8001224:	4a8c      	ldr	r2, [pc, #560]	@ (8001458 <__aeabi_ddiv+0x61c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	dd00      	ble.n	800122c <__aeabi_ddiv+0x3f0>
 800122a:	e680      	b.n	8000f2e <__aeabi_ddiv+0xf2>
 800122c:	465a      	mov	r2, fp
 800122e:	0752      	lsls	r2, r2, #29
 8001230:	430a      	orrs	r2, r1
 8001232:	4690      	mov	r8, r2
 8001234:	465a      	mov	r2, fp
 8001236:	055b      	lsls	r3, r3, #21
 8001238:	0254      	lsls	r4, r2, #9
 800123a:	0b24      	lsrs	r4, r4, #12
 800123c:	0d5b      	lsrs	r3, r3, #21
 800123e:	e669      	b.n	8000f14 <__aeabi_ddiv+0xd8>
 8001240:	0035      	movs	r5, r6
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0db      	beq.n	80011fe <__aeabi_ddiv+0x3c2>
 8001246:	9d00      	ldr	r5, [sp, #0]
 8001248:	1e51      	subs	r1, r2, #1
 800124a:	46ac      	mov	ip, r5
 800124c:	4464      	add	r4, ip
 800124e:	42ac      	cmp	r4, r5
 8001250:	d200      	bcs.n	8001254 <__aeabi_ddiv+0x418>
 8001252:	e09e      	b.n	8001392 <__aeabi_ddiv+0x556>
 8001254:	4284      	cmp	r4, r0
 8001256:	d200      	bcs.n	800125a <__aeabi_ddiv+0x41e>
 8001258:	e0e1      	b.n	800141e <__aeabi_ddiv+0x5e2>
 800125a:	d100      	bne.n	800125e <__aeabi_ddiv+0x422>
 800125c:	e0ee      	b.n	800143c <__aeabi_ddiv+0x600>
 800125e:	000a      	movs	r2, r1
 8001260:	e7ca      	b.n	80011f8 <__aeabi_ddiv+0x3bc>
 8001262:	4542      	cmp	r2, r8
 8001264:	d900      	bls.n	8001268 <__aeabi_ddiv+0x42c>
 8001266:	e708      	b.n	800107a <__aeabi_ddiv+0x23e>
 8001268:	464b      	mov	r3, r9
 800126a:	07dc      	lsls	r4, r3, #31
 800126c:	0858      	lsrs	r0, r3, #1
 800126e:	4643      	mov	r3, r8
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	431c      	orrs	r4, r3
 8001274:	4643      	mov	r3, r8
 8001276:	07dd      	lsls	r5, r3, #31
 8001278:	e706      	b.n	8001088 <__aeabi_ddiv+0x24c>
 800127a:	f001 fa83 	bl	8002784 <__clzsi2>
 800127e:	2315      	movs	r3, #21
 8001280:	469c      	mov	ip, r3
 8001282:	4484      	add	ip, r0
 8001284:	0002      	movs	r2, r0
 8001286:	4663      	mov	r3, ip
 8001288:	3220      	adds	r2, #32
 800128a:	2b1c      	cmp	r3, #28
 800128c:	dc00      	bgt.n	8001290 <__aeabi_ddiv+0x454>
 800128e:	e692      	b.n	8000fb6 <__aeabi_ddiv+0x17a>
 8001290:	0023      	movs	r3, r4
 8001292:	3808      	subs	r0, #8
 8001294:	4083      	lsls	r3, r0
 8001296:	4699      	mov	r9, r3
 8001298:	2300      	movs	r3, #0
 800129a:	4698      	mov	r8, r3
 800129c:	e69a      	b.n	8000fd4 <__aeabi_ddiv+0x198>
 800129e:	f001 fa71 	bl	8002784 <__clzsi2>
 80012a2:	0002      	movs	r2, r0
 80012a4:	0003      	movs	r3, r0
 80012a6:	3215      	adds	r2, #21
 80012a8:	3320      	adds	r3, #32
 80012aa:	2a1c      	cmp	r2, #28
 80012ac:	dc00      	bgt.n	80012b0 <__aeabi_ddiv+0x474>
 80012ae:	e65f      	b.n	8000f70 <__aeabi_ddiv+0x134>
 80012b0:	9900      	ldr	r1, [sp, #0]
 80012b2:	3808      	subs	r0, #8
 80012b4:	4081      	lsls	r1, r0
 80012b6:	2200      	movs	r2, #0
 80012b8:	468b      	mov	fp, r1
 80012ba:	e666      	b.n	8000f8a <__aeabi_ddiv+0x14e>
 80012bc:	2200      	movs	r2, #0
 80012be:	002e      	movs	r6, r5
 80012c0:	2400      	movs	r4, #0
 80012c2:	4690      	mov	r8, r2
 80012c4:	4b65      	ldr	r3, [pc, #404]	@ (800145c <__aeabi_ddiv+0x620>)
 80012c6:	e625      	b.n	8000f14 <__aeabi_ddiv+0xd8>
 80012c8:	002e      	movs	r6, r5
 80012ca:	2101      	movs	r1, #1
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	2938      	cmp	r1, #56	@ 0x38
 80012d0:	dd00      	ble.n	80012d4 <__aeabi_ddiv+0x498>
 80012d2:	e61b      	b.n	8000f0c <__aeabi_ddiv+0xd0>
 80012d4:	291f      	cmp	r1, #31
 80012d6:	dc7e      	bgt.n	80013d6 <__aeabi_ddiv+0x59a>
 80012d8:	4861      	ldr	r0, [pc, #388]	@ (8001460 <__aeabi_ddiv+0x624>)
 80012da:	0014      	movs	r4, r2
 80012dc:	4450      	add	r0, sl
 80012de:	465b      	mov	r3, fp
 80012e0:	4082      	lsls	r2, r0
 80012e2:	4083      	lsls	r3, r0
 80012e4:	40cc      	lsrs	r4, r1
 80012e6:	1e50      	subs	r0, r2, #1
 80012e8:	4182      	sbcs	r2, r0
 80012ea:	4323      	orrs	r3, r4
 80012ec:	431a      	orrs	r2, r3
 80012ee:	465b      	mov	r3, fp
 80012f0:	40cb      	lsrs	r3, r1
 80012f2:	0751      	lsls	r1, r2, #29
 80012f4:	d009      	beq.n	800130a <__aeabi_ddiv+0x4ce>
 80012f6:	210f      	movs	r1, #15
 80012f8:	4011      	ands	r1, r2
 80012fa:	2904      	cmp	r1, #4
 80012fc:	d005      	beq.n	800130a <__aeabi_ddiv+0x4ce>
 80012fe:	1d11      	adds	r1, r2, #4
 8001300:	4291      	cmp	r1, r2
 8001302:	4192      	sbcs	r2, r2
 8001304:	4252      	negs	r2, r2
 8001306:	189b      	adds	r3, r3, r2
 8001308:	000a      	movs	r2, r1
 800130a:	0219      	lsls	r1, r3, #8
 800130c:	d400      	bmi.n	8001310 <__aeabi_ddiv+0x4d4>
 800130e:	e09b      	b.n	8001448 <__aeabi_ddiv+0x60c>
 8001310:	2200      	movs	r2, #0
 8001312:	2301      	movs	r3, #1
 8001314:	2400      	movs	r4, #0
 8001316:	4690      	mov	r8, r2
 8001318:	e5fc      	b.n	8000f14 <__aeabi_ddiv+0xd8>
 800131a:	210f      	movs	r1, #15
 800131c:	4011      	ands	r1, r2
 800131e:	2904      	cmp	r1, #4
 8001320:	d100      	bne.n	8001324 <__aeabi_ddiv+0x4e8>
 8001322:	e773      	b.n	800120c <__aeabi_ddiv+0x3d0>
 8001324:	1d11      	adds	r1, r2, #4
 8001326:	4291      	cmp	r1, r2
 8001328:	4192      	sbcs	r2, r2
 800132a:	4252      	negs	r2, r2
 800132c:	002e      	movs	r6, r5
 800132e:	08c9      	lsrs	r1, r1, #3
 8001330:	4493      	add	fp, r2
 8001332:	e76d      	b.n	8001210 <__aeabi_ddiv+0x3d4>
 8001334:	9b00      	ldr	r3, [sp, #0]
 8001336:	3d01      	subs	r5, #1
 8001338:	469c      	mov	ip, r3
 800133a:	4461      	add	r1, ip
 800133c:	428b      	cmp	r3, r1
 800133e:	d900      	bls.n	8001342 <__aeabi_ddiv+0x506>
 8001340:	e72c      	b.n	800119c <__aeabi_ddiv+0x360>
 8001342:	428a      	cmp	r2, r1
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x50c>
 8001346:	e729      	b.n	800119c <__aeabi_ddiv+0x360>
 8001348:	1e85      	subs	r5, r0, #2
 800134a:	4461      	add	r1, ip
 800134c:	e726      	b.n	800119c <__aeabi_ddiv+0x360>
 800134e:	9900      	ldr	r1, [sp, #0]
 8001350:	3b01      	subs	r3, #1
 8001352:	468c      	mov	ip, r1
 8001354:	4464      	add	r4, ip
 8001356:	42a1      	cmp	r1, r4
 8001358:	d900      	bls.n	800135c <__aeabi_ddiv+0x520>
 800135a:	e72d      	b.n	80011b8 <__aeabi_ddiv+0x37c>
 800135c:	42a2      	cmp	r2, r4
 800135e:	d800      	bhi.n	8001362 <__aeabi_ddiv+0x526>
 8001360:	e72a      	b.n	80011b8 <__aeabi_ddiv+0x37c>
 8001362:	1e83      	subs	r3, r0, #2
 8001364:	4464      	add	r4, ip
 8001366:	e727      	b.n	80011b8 <__aeabi_ddiv+0x37c>
 8001368:	4287      	cmp	r7, r0
 800136a:	d000      	beq.n	800136e <__aeabi_ddiv+0x532>
 800136c:	e6fe      	b.n	800116c <__aeabi_ddiv+0x330>
 800136e:	45a9      	cmp	r9, r5
 8001370:	d900      	bls.n	8001374 <__aeabi_ddiv+0x538>
 8001372:	e6fb      	b.n	800116c <__aeabi_ddiv+0x330>
 8001374:	e6f5      	b.n	8001162 <__aeabi_ddiv+0x326>
 8001376:	42a2      	cmp	r2, r4
 8001378:	d800      	bhi.n	800137c <__aeabi_ddiv+0x540>
 800137a:	e6b9      	b.n	80010f0 <__aeabi_ddiv+0x2b4>
 800137c:	1e83      	subs	r3, r0, #2
 800137e:	4464      	add	r4, ip
 8001380:	e6b6      	b.n	80010f0 <__aeabi_ddiv+0x2b4>
 8001382:	428a      	cmp	r2, r1
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x54c>
 8001386:	e69f      	b.n	80010c8 <__aeabi_ddiv+0x28c>
 8001388:	46bc      	mov	ip, r7
 800138a:	1e83      	subs	r3, r0, #2
 800138c:	4698      	mov	r8, r3
 800138e:	4461      	add	r1, ip
 8001390:	e69a      	b.n	80010c8 <__aeabi_ddiv+0x28c>
 8001392:	000a      	movs	r2, r1
 8001394:	4284      	cmp	r4, r0
 8001396:	d000      	beq.n	800139a <__aeabi_ddiv+0x55e>
 8001398:	e72e      	b.n	80011f8 <__aeabi_ddiv+0x3bc>
 800139a:	454b      	cmp	r3, r9
 800139c:	d000      	beq.n	80013a0 <__aeabi_ddiv+0x564>
 800139e:	e72b      	b.n	80011f8 <__aeabi_ddiv+0x3bc>
 80013a0:	0035      	movs	r5, r6
 80013a2:	e72c      	b.n	80011fe <__aeabi_ddiv+0x3c2>
 80013a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001450 <__aeabi_ddiv+0x614>)
 80013a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001464 <__aeabi_ddiv+0x628>)
 80013a8:	4453      	add	r3, sl
 80013aa:	4592      	cmp	sl, r2
 80013ac:	db43      	blt.n	8001436 <__aeabi_ddiv+0x5fa>
 80013ae:	2201      	movs	r2, #1
 80013b0:	2100      	movs	r1, #0
 80013b2:	4493      	add	fp, r2
 80013b4:	e72c      	b.n	8001210 <__aeabi_ddiv+0x3d4>
 80013b6:	42ac      	cmp	r4, r5
 80013b8:	d800      	bhi.n	80013bc <__aeabi_ddiv+0x580>
 80013ba:	e6d7      	b.n	800116c <__aeabi_ddiv+0x330>
 80013bc:	2302      	movs	r3, #2
 80013be:	425b      	negs	r3, r3
 80013c0:	469c      	mov	ip, r3
 80013c2:	9900      	ldr	r1, [sp, #0]
 80013c4:	444d      	add	r5, r9
 80013c6:	454d      	cmp	r5, r9
 80013c8:	419b      	sbcs	r3, r3
 80013ca:	44e3      	add	fp, ip
 80013cc:	468c      	mov	ip, r1
 80013ce:	425b      	negs	r3, r3
 80013d0:	4463      	add	r3, ip
 80013d2:	18c0      	adds	r0, r0, r3
 80013d4:	e6cc      	b.n	8001170 <__aeabi_ddiv+0x334>
 80013d6:	201f      	movs	r0, #31
 80013d8:	4240      	negs	r0, r0
 80013da:	1ac3      	subs	r3, r0, r3
 80013dc:	4658      	mov	r0, fp
 80013de:	40d8      	lsrs	r0, r3
 80013e0:	2920      	cmp	r1, #32
 80013e2:	d004      	beq.n	80013ee <__aeabi_ddiv+0x5b2>
 80013e4:	4659      	mov	r1, fp
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <__aeabi_ddiv+0x62c>)
 80013e8:	4453      	add	r3, sl
 80013ea:	4099      	lsls	r1, r3
 80013ec:	430a      	orrs	r2, r1
 80013ee:	1e53      	subs	r3, r2, #1
 80013f0:	419a      	sbcs	r2, r3
 80013f2:	2307      	movs	r3, #7
 80013f4:	0019      	movs	r1, r3
 80013f6:	4302      	orrs	r2, r0
 80013f8:	2400      	movs	r4, #0
 80013fa:	4011      	ands	r1, r2
 80013fc:	4213      	tst	r3, r2
 80013fe:	d009      	beq.n	8001414 <__aeabi_ddiv+0x5d8>
 8001400:	3308      	adds	r3, #8
 8001402:	4013      	ands	r3, r2
 8001404:	2b04      	cmp	r3, #4
 8001406:	d01d      	beq.n	8001444 <__aeabi_ddiv+0x608>
 8001408:	1d13      	adds	r3, r2, #4
 800140a:	4293      	cmp	r3, r2
 800140c:	4189      	sbcs	r1, r1
 800140e:	001a      	movs	r2, r3
 8001410:	4249      	negs	r1, r1
 8001412:	0749      	lsls	r1, r1, #29
 8001414:	08d2      	lsrs	r2, r2, #3
 8001416:	430a      	orrs	r2, r1
 8001418:	4690      	mov	r8, r2
 800141a:	2300      	movs	r3, #0
 800141c:	e57a      	b.n	8000f14 <__aeabi_ddiv+0xd8>
 800141e:	4649      	mov	r1, r9
 8001420:	9f00      	ldr	r7, [sp, #0]
 8001422:	004d      	lsls	r5, r1, #1
 8001424:	454d      	cmp	r5, r9
 8001426:	4189      	sbcs	r1, r1
 8001428:	46bc      	mov	ip, r7
 800142a:	4249      	negs	r1, r1
 800142c:	4461      	add	r1, ip
 800142e:	46a9      	mov	r9, r5
 8001430:	3a02      	subs	r2, #2
 8001432:	1864      	adds	r4, r4, r1
 8001434:	e7ae      	b.n	8001394 <__aeabi_ddiv+0x558>
 8001436:	2201      	movs	r2, #1
 8001438:	4252      	negs	r2, r2
 800143a:	e746      	b.n	80012ca <__aeabi_ddiv+0x48e>
 800143c:	4599      	cmp	r9, r3
 800143e:	d3ee      	bcc.n	800141e <__aeabi_ddiv+0x5e2>
 8001440:	000a      	movs	r2, r1
 8001442:	e7aa      	b.n	800139a <__aeabi_ddiv+0x55e>
 8001444:	2100      	movs	r1, #0
 8001446:	e7e5      	b.n	8001414 <__aeabi_ddiv+0x5d8>
 8001448:	0759      	lsls	r1, r3, #29
 800144a:	025b      	lsls	r3, r3, #9
 800144c:	0b1c      	lsrs	r4, r3, #12
 800144e:	e7e1      	b.n	8001414 <__aeabi_ddiv+0x5d8>
 8001450:	000003ff 	.word	0x000003ff
 8001454:	feffffff 	.word	0xfeffffff
 8001458:	000007fe 	.word	0x000007fe
 800145c:	000007ff 	.word	0x000007ff
 8001460:	0000041e 	.word	0x0000041e
 8001464:	fffffc02 	.word	0xfffffc02
 8001468:	0000043e 	.word	0x0000043e

0800146c <__eqdf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	4657      	mov	r7, sl
 8001470:	46de      	mov	lr, fp
 8001472:	464e      	mov	r6, r9
 8001474:	4645      	mov	r5, r8
 8001476:	b5e0      	push	{r5, r6, r7, lr}
 8001478:	000d      	movs	r5, r1
 800147a:	0004      	movs	r4, r0
 800147c:	0fe8      	lsrs	r0, r5, #31
 800147e:	4683      	mov	fp, r0
 8001480:	0309      	lsls	r1, r1, #12
 8001482:	0fd8      	lsrs	r0, r3, #31
 8001484:	0b09      	lsrs	r1, r1, #12
 8001486:	4682      	mov	sl, r0
 8001488:	4819      	ldr	r0, [pc, #100]	@ (80014f0 <__eqdf2+0x84>)
 800148a:	468c      	mov	ip, r1
 800148c:	031f      	lsls	r7, r3, #12
 800148e:	0069      	lsls	r1, r5, #1
 8001490:	005e      	lsls	r6, r3, #1
 8001492:	0d49      	lsrs	r1, r1, #21
 8001494:	0b3f      	lsrs	r7, r7, #12
 8001496:	0d76      	lsrs	r6, r6, #21
 8001498:	4281      	cmp	r1, r0
 800149a:	d018      	beq.n	80014ce <__eqdf2+0x62>
 800149c:	4286      	cmp	r6, r0
 800149e:	d00f      	beq.n	80014c0 <__eqdf2+0x54>
 80014a0:	2001      	movs	r0, #1
 80014a2:	42b1      	cmp	r1, r6
 80014a4:	d10d      	bne.n	80014c2 <__eqdf2+0x56>
 80014a6:	45bc      	cmp	ip, r7
 80014a8:	d10b      	bne.n	80014c2 <__eqdf2+0x56>
 80014aa:	4294      	cmp	r4, r2
 80014ac:	d109      	bne.n	80014c2 <__eqdf2+0x56>
 80014ae:	45d3      	cmp	fp, sl
 80014b0:	d01c      	beq.n	80014ec <__eqdf2+0x80>
 80014b2:	2900      	cmp	r1, #0
 80014b4:	d105      	bne.n	80014c2 <__eqdf2+0x56>
 80014b6:	4660      	mov	r0, ip
 80014b8:	4320      	orrs	r0, r4
 80014ba:	1e43      	subs	r3, r0, #1
 80014bc:	4198      	sbcs	r0, r3
 80014be:	e000      	b.n	80014c2 <__eqdf2+0x56>
 80014c0:	2001      	movs	r0, #1
 80014c2:	bcf0      	pop	{r4, r5, r6, r7}
 80014c4:	46bb      	mov	fp, r7
 80014c6:	46b2      	mov	sl, r6
 80014c8:	46a9      	mov	r9, r5
 80014ca:	46a0      	mov	r8, r4
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	2001      	movs	r0, #1
 80014d0:	428e      	cmp	r6, r1
 80014d2:	d1f6      	bne.n	80014c2 <__eqdf2+0x56>
 80014d4:	4661      	mov	r1, ip
 80014d6:	4339      	orrs	r1, r7
 80014d8:	000f      	movs	r7, r1
 80014da:	4317      	orrs	r7, r2
 80014dc:	4327      	orrs	r7, r4
 80014de:	d1f0      	bne.n	80014c2 <__eqdf2+0x56>
 80014e0:	465b      	mov	r3, fp
 80014e2:	4652      	mov	r2, sl
 80014e4:	1a98      	subs	r0, r3, r2
 80014e6:	1e43      	subs	r3, r0, #1
 80014e8:	4198      	sbcs	r0, r3
 80014ea:	e7ea      	b.n	80014c2 <__eqdf2+0x56>
 80014ec:	2000      	movs	r0, #0
 80014ee:	e7e8      	b.n	80014c2 <__eqdf2+0x56>
 80014f0:	000007ff 	.word	0x000007ff

080014f4 <__gedf2>:
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	4657      	mov	r7, sl
 80014f8:	464e      	mov	r6, r9
 80014fa:	4645      	mov	r5, r8
 80014fc:	46de      	mov	lr, fp
 80014fe:	b5e0      	push	{r5, r6, r7, lr}
 8001500:	000d      	movs	r5, r1
 8001502:	030e      	lsls	r6, r1, #12
 8001504:	0049      	lsls	r1, r1, #1
 8001506:	0d49      	lsrs	r1, r1, #21
 8001508:	468a      	mov	sl, r1
 800150a:	0fdf      	lsrs	r7, r3, #31
 800150c:	0fe9      	lsrs	r1, r5, #31
 800150e:	46bc      	mov	ip, r7
 8001510:	b083      	sub	sp, #12
 8001512:	4f2f      	ldr	r7, [pc, #188]	@ (80015d0 <__gedf2+0xdc>)
 8001514:	0004      	movs	r4, r0
 8001516:	4680      	mov	r8, r0
 8001518:	9101      	str	r1, [sp, #4]
 800151a:	0058      	lsls	r0, r3, #1
 800151c:	0319      	lsls	r1, r3, #12
 800151e:	4691      	mov	r9, r2
 8001520:	0b36      	lsrs	r6, r6, #12
 8001522:	0b09      	lsrs	r1, r1, #12
 8001524:	0d40      	lsrs	r0, r0, #21
 8001526:	45ba      	cmp	sl, r7
 8001528:	d01d      	beq.n	8001566 <__gedf2+0x72>
 800152a:	42b8      	cmp	r0, r7
 800152c:	d00d      	beq.n	800154a <__gedf2+0x56>
 800152e:	4657      	mov	r7, sl
 8001530:	2f00      	cmp	r7, #0
 8001532:	d12a      	bne.n	800158a <__gedf2+0x96>
 8001534:	4334      	orrs	r4, r6
 8001536:	2800      	cmp	r0, #0
 8001538:	d124      	bne.n	8001584 <__gedf2+0x90>
 800153a:	430a      	orrs	r2, r1
 800153c:	d036      	beq.n	80015ac <__gedf2+0xb8>
 800153e:	2c00      	cmp	r4, #0
 8001540:	d141      	bne.n	80015c6 <__gedf2+0xd2>
 8001542:	4663      	mov	r3, ip
 8001544:	0058      	lsls	r0, r3, #1
 8001546:	3801      	subs	r0, #1
 8001548:	e015      	b.n	8001576 <__gedf2+0x82>
 800154a:	4311      	orrs	r1, r2
 800154c:	d138      	bne.n	80015c0 <__gedf2+0xcc>
 800154e:	4653      	mov	r3, sl
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <__gedf2+0x64>
 8001554:	4326      	orrs	r6, r4
 8001556:	d0f4      	beq.n	8001542 <__gedf2+0x4e>
 8001558:	9b01      	ldr	r3, [sp, #4]
 800155a:	4563      	cmp	r3, ip
 800155c:	d107      	bne.n	800156e <__gedf2+0x7a>
 800155e:	9b01      	ldr	r3, [sp, #4]
 8001560:	0058      	lsls	r0, r3, #1
 8001562:	3801      	subs	r0, #1
 8001564:	e007      	b.n	8001576 <__gedf2+0x82>
 8001566:	4326      	orrs	r6, r4
 8001568:	d12a      	bne.n	80015c0 <__gedf2+0xcc>
 800156a:	4550      	cmp	r0, sl
 800156c:	d021      	beq.n	80015b2 <__gedf2+0xbe>
 800156e:	2001      	movs	r0, #1
 8001570:	9b01      	ldr	r3, [sp, #4]
 8001572:	425f      	negs	r7, r3
 8001574:	4338      	orrs	r0, r7
 8001576:	b003      	add	sp, #12
 8001578:	bcf0      	pop	{r4, r5, r6, r7}
 800157a:	46bb      	mov	fp, r7
 800157c:	46b2      	mov	sl, r6
 800157e:	46a9      	mov	r9, r5
 8001580:	46a0      	mov	r8, r4
 8001582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001584:	2c00      	cmp	r4, #0
 8001586:	d0dc      	beq.n	8001542 <__gedf2+0x4e>
 8001588:	e7e6      	b.n	8001558 <__gedf2+0x64>
 800158a:	2800      	cmp	r0, #0
 800158c:	d0ef      	beq.n	800156e <__gedf2+0x7a>
 800158e:	9b01      	ldr	r3, [sp, #4]
 8001590:	4563      	cmp	r3, ip
 8001592:	d1ec      	bne.n	800156e <__gedf2+0x7a>
 8001594:	4582      	cmp	sl, r0
 8001596:	dcea      	bgt.n	800156e <__gedf2+0x7a>
 8001598:	dbe1      	blt.n	800155e <__gedf2+0x6a>
 800159a:	428e      	cmp	r6, r1
 800159c:	d8e7      	bhi.n	800156e <__gedf2+0x7a>
 800159e:	d1de      	bne.n	800155e <__gedf2+0x6a>
 80015a0:	45c8      	cmp	r8, r9
 80015a2:	d8e4      	bhi.n	800156e <__gedf2+0x7a>
 80015a4:	2000      	movs	r0, #0
 80015a6:	45c8      	cmp	r8, r9
 80015a8:	d2e5      	bcs.n	8001576 <__gedf2+0x82>
 80015aa:	e7d8      	b.n	800155e <__gedf2+0x6a>
 80015ac:	2c00      	cmp	r4, #0
 80015ae:	d0e2      	beq.n	8001576 <__gedf2+0x82>
 80015b0:	e7dd      	b.n	800156e <__gedf2+0x7a>
 80015b2:	4311      	orrs	r1, r2
 80015b4:	d104      	bne.n	80015c0 <__gedf2+0xcc>
 80015b6:	9b01      	ldr	r3, [sp, #4]
 80015b8:	4563      	cmp	r3, ip
 80015ba:	d1d8      	bne.n	800156e <__gedf2+0x7a>
 80015bc:	2000      	movs	r0, #0
 80015be:	e7da      	b.n	8001576 <__gedf2+0x82>
 80015c0:	2002      	movs	r0, #2
 80015c2:	4240      	negs	r0, r0
 80015c4:	e7d7      	b.n	8001576 <__gedf2+0x82>
 80015c6:	9b01      	ldr	r3, [sp, #4]
 80015c8:	4563      	cmp	r3, ip
 80015ca:	d0e6      	beq.n	800159a <__gedf2+0xa6>
 80015cc:	e7cf      	b.n	800156e <__gedf2+0x7a>
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	000007ff 	.word	0x000007ff

080015d4 <__ledf2>:
 80015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d6:	4657      	mov	r7, sl
 80015d8:	464e      	mov	r6, r9
 80015da:	4645      	mov	r5, r8
 80015dc:	46de      	mov	lr, fp
 80015de:	b5e0      	push	{r5, r6, r7, lr}
 80015e0:	000d      	movs	r5, r1
 80015e2:	030e      	lsls	r6, r1, #12
 80015e4:	0049      	lsls	r1, r1, #1
 80015e6:	0d49      	lsrs	r1, r1, #21
 80015e8:	468a      	mov	sl, r1
 80015ea:	0fdf      	lsrs	r7, r3, #31
 80015ec:	0fe9      	lsrs	r1, r5, #31
 80015ee:	46bc      	mov	ip, r7
 80015f0:	b083      	sub	sp, #12
 80015f2:	4f2e      	ldr	r7, [pc, #184]	@ (80016ac <__ledf2+0xd8>)
 80015f4:	0004      	movs	r4, r0
 80015f6:	4680      	mov	r8, r0
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	0058      	lsls	r0, r3, #1
 80015fc:	0319      	lsls	r1, r3, #12
 80015fe:	4691      	mov	r9, r2
 8001600:	0b36      	lsrs	r6, r6, #12
 8001602:	0b09      	lsrs	r1, r1, #12
 8001604:	0d40      	lsrs	r0, r0, #21
 8001606:	45ba      	cmp	sl, r7
 8001608:	d01e      	beq.n	8001648 <__ledf2+0x74>
 800160a:	42b8      	cmp	r0, r7
 800160c:	d00d      	beq.n	800162a <__ledf2+0x56>
 800160e:	4657      	mov	r7, sl
 8001610:	2f00      	cmp	r7, #0
 8001612:	d127      	bne.n	8001664 <__ledf2+0x90>
 8001614:	4334      	orrs	r4, r6
 8001616:	2800      	cmp	r0, #0
 8001618:	d133      	bne.n	8001682 <__ledf2+0xae>
 800161a:	430a      	orrs	r2, r1
 800161c:	d034      	beq.n	8001688 <__ledf2+0xb4>
 800161e:	2c00      	cmp	r4, #0
 8001620:	d140      	bne.n	80016a4 <__ledf2+0xd0>
 8001622:	4663      	mov	r3, ip
 8001624:	0058      	lsls	r0, r3, #1
 8001626:	3801      	subs	r0, #1
 8001628:	e015      	b.n	8001656 <__ledf2+0x82>
 800162a:	4311      	orrs	r1, r2
 800162c:	d112      	bne.n	8001654 <__ledf2+0x80>
 800162e:	4653      	mov	r3, sl
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <__ledf2+0x64>
 8001634:	4326      	orrs	r6, r4
 8001636:	d0f4      	beq.n	8001622 <__ledf2+0x4e>
 8001638:	9b01      	ldr	r3, [sp, #4]
 800163a:	4563      	cmp	r3, ip
 800163c:	d01d      	beq.n	800167a <__ledf2+0xa6>
 800163e:	2001      	movs	r0, #1
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	425f      	negs	r7, r3
 8001644:	4338      	orrs	r0, r7
 8001646:	e006      	b.n	8001656 <__ledf2+0x82>
 8001648:	4326      	orrs	r6, r4
 800164a:	d103      	bne.n	8001654 <__ledf2+0x80>
 800164c:	4550      	cmp	r0, sl
 800164e:	d1f6      	bne.n	800163e <__ledf2+0x6a>
 8001650:	4311      	orrs	r1, r2
 8001652:	d01c      	beq.n	800168e <__ledf2+0xba>
 8001654:	2002      	movs	r0, #2
 8001656:	b003      	add	sp, #12
 8001658:	bcf0      	pop	{r4, r5, r6, r7}
 800165a:	46bb      	mov	fp, r7
 800165c:	46b2      	mov	sl, r6
 800165e:	46a9      	mov	r9, r5
 8001660:	46a0      	mov	r8, r4
 8001662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001664:	2800      	cmp	r0, #0
 8001666:	d0ea      	beq.n	800163e <__ledf2+0x6a>
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	4563      	cmp	r3, ip
 800166c:	d1e7      	bne.n	800163e <__ledf2+0x6a>
 800166e:	4582      	cmp	sl, r0
 8001670:	dce5      	bgt.n	800163e <__ledf2+0x6a>
 8001672:	db02      	blt.n	800167a <__ledf2+0xa6>
 8001674:	428e      	cmp	r6, r1
 8001676:	d8e2      	bhi.n	800163e <__ledf2+0x6a>
 8001678:	d00e      	beq.n	8001698 <__ledf2+0xc4>
 800167a:	9b01      	ldr	r3, [sp, #4]
 800167c:	0058      	lsls	r0, r3, #1
 800167e:	3801      	subs	r0, #1
 8001680:	e7e9      	b.n	8001656 <__ledf2+0x82>
 8001682:	2c00      	cmp	r4, #0
 8001684:	d0cd      	beq.n	8001622 <__ledf2+0x4e>
 8001686:	e7d7      	b.n	8001638 <__ledf2+0x64>
 8001688:	2c00      	cmp	r4, #0
 800168a:	d0e4      	beq.n	8001656 <__ledf2+0x82>
 800168c:	e7d7      	b.n	800163e <__ledf2+0x6a>
 800168e:	9b01      	ldr	r3, [sp, #4]
 8001690:	2000      	movs	r0, #0
 8001692:	4563      	cmp	r3, ip
 8001694:	d0df      	beq.n	8001656 <__ledf2+0x82>
 8001696:	e7d2      	b.n	800163e <__ledf2+0x6a>
 8001698:	45c8      	cmp	r8, r9
 800169a:	d8d0      	bhi.n	800163e <__ledf2+0x6a>
 800169c:	2000      	movs	r0, #0
 800169e:	45c8      	cmp	r8, r9
 80016a0:	d2d9      	bcs.n	8001656 <__ledf2+0x82>
 80016a2:	e7ea      	b.n	800167a <__ledf2+0xa6>
 80016a4:	9b01      	ldr	r3, [sp, #4]
 80016a6:	4563      	cmp	r3, ip
 80016a8:	d0e4      	beq.n	8001674 <__ledf2+0xa0>
 80016aa:	e7c8      	b.n	800163e <__ledf2+0x6a>
 80016ac:	000007ff 	.word	0x000007ff

080016b0 <__aeabi_dmul>:
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b2:	4657      	mov	r7, sl
 80016b4:	464e      	mov	r6, r9
 80016b6:	46de      	mov	lr, fp
 80016b8:	4645      	mov	r5, r8
 80016ba:	b5e0      	push	{r5, r6, r7, lr}
 80016bc:	001f      	movs	r7, r3
 80016be:	030b      	lsls	r3, r1, #12
 80016c0:	0b1b      	lsrs	r3, r3, #12
 80016c2:	0016      	movs	r6, r2
 80016c4:	469a      	mov	sl, r3
 80016c6:	0fca      	lsrs	r2, r1, #31
 80016c8:	004b      	lsls	r3, r1, #1
 80016ca:	0004      	movs	r4, r0
 80016cc:	4691      	mov	r9, r2
 80016ce:	b085      	sub	sp, #20
 80016d0:	0d5b      	lsrs	r3, r3, #21
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dmul+0x26>
 80016d4:	e1cf      	b.n	8001a76 <__aeabi_dmul+0x3c6>
 80016d6:	4acd      	ldr	r2, [pc, #820]	@ (8001a0c <__aeabi_dmul+0x35c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d055      	beq.n	8001788 <__aeabi_dmul+0xd8>
 80016dc:	4651      	mov	r1, sl
 80016de:	0f42      	lsrs	r2, r0, #29
 80016e0:	00c9      	lsls	r1, r1, #3
 80016e2:	430a      	orrs	r2, r1
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	4311      	orrs	r1, r2
 80016ea:	00c2      	lsls	r2, r0, #3
 80016ec:	4690      	mov	r8, r2
 80016ee:	4ac8      	ldr	r2, [pc, #800]	@ (8001a10 <__aeabi_dmul+0x360>)
 80016f0:	468a      	mov	sl, r1
 80016f2:	4693      	mov	fp, r2
 80016f4:	449b      	add	fp, r3
 80016f6:	2300      	movs	r3, #0
 80016f8:	2500      	movs	r5, #0
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	033c      	lsls	r4, r7, #12
 80016fe:	007b      	lsls	r3, r7, #1
 8001700:	0ffa      	lsrs	r2, r7, #31
 8001702:	9601      	str	r6, [sp, #4]
 8001704:	0b24      	lsrs	r4, r4, #12
 8001706:	0d5b      	lsrs	r3, r3, #21
 8001708:	9200      	str	r2, [sp, #0]
 800170a:	d100      	bne.n	800170e <__aeabi_dmul+0x5e>
 800170c:	e188      	b.n	8001a20 <__aeabi_dmul+0x370>
 800170e:	4abf      	ldr	r2, [pc, #764]	@ (8001a0c <__aeabi_dmul+0x35c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d100      	bne.n	8001716 <__aeabi_dmul+0x66>
 8001714:	e092      	b.n	800183c <__aeabi_dmul+0x18c>
 8001716:	4abe      	ldr	r2, [pc, #760]	@ (8001a10 <__aeabi_dmul+0x360>)
 8001718:	4694      	mov	ip, r2
 800171a:	4463      	add	r3, ip
 800171c:	449b      	add	fp, r3
 800171e:	2d0a      	cmp	r5, #10
 8001720:	dc42      	bgt.n	80017a8 <__aeabi_dmul+0xf8>
 8001722:	00e4      	lsls	r4, r4, #3
 8001724:	0f73      	lsrs	r3, r6, #29
 8001726:	4323      	orrs	r3, r4
 8001728:	2480      	movs	r4, #128	@ 0x80
 800172a:	4649      	mov	r1, r9
 800172c:	0424      	lsls	r4, r4, #16
 800172e:	431c      	orrs	r4, r3
 8001730:	00f3      	lsls	r3, r6, #3
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	9b00      	ldr	r3, [sp, #0]
 8001736:	2000      	movs	r0, #0
 8001738:	4059      	eors	r1, r3
 800173a:	b2cb      	uxtb	r3, r1
 800173c:	9303      	str	r3, [sp, #12]
 800173e:	2d02      	cmp	r5, #2
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dmul+0x94>
 8001742:	e094      	b.n	800186e <__aeabi_dmul+0x1be>
 8001744:	2301      	movs	r3, #1
 8001746:	40ab      	lsls	r3, r5
 8001748:	001d      	movs	r5, r3
 800174a:	23a6      	movs	r3, #166	@ 0xa6
 800174c:	002a      	movs	r2, r5
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	401a      	ands	r2, r3
 8001752:	421d      	tst	r5, r3
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0xa8>
 8001756:	e229      	b.n	8001bac <__aeabi_dmul+0x4fc>
 8001758:	2390      	movs	r3, #144	@ 0x90
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	421d      	tst	r5, r3
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0xb2>
 8001760:	e24d      	b.n	8001bfe <__aeabi_dmul+0x54e>
 8001762:	2300      	movs	r3, #0
 8001764:	2480      	movs	r4, #128	@ 0x80
 8001766:	4699      	mov	r9, r3
 8001768:	0324      	lsls	r4, r4, #12
 800176a:	4ba8      	ldr	r3, [pc, #672]	@ (8001a0c <__aeabi_dmul+0x35c>)
 800176c:	0010      	movs	r0, r2
 800176e:	464a      	mov	r2, r9
 8001770:	051b      	lsls	r3, r3, #20
 8001772:	4323      	orrs	r3, r4
 8001774:	07d2      	lsls	r2, r2, #31
 8001776:	4313      	orrs	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	b005      	add	sp, #20
 800177c:	bcf0      	pop	{r4, r5, r6, r7}
 800177e:	46bb      	mov	fp, r7
 8001780:	46b2      	mov	sl, r6
 8001782:	46a9      	mov	r9, r5
 8001784:	46a0      	mov	r8, r4
 8001786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001788:	4652      	mov	r2, sl
 800178a:	4302      	orrs	r2, r0
 800178c:	4690      	mov	r8, r2
 800178e:	d000      	beq.n	8001792 <__aeabi_dmul+0xe2>
 8001790:	e1ac      	b.n	8001aec <__aeabi_dmul+0x43c>
 8001792:	469b      	mov	fp, r3
 8001794:	2302      	movs	r3, #2
 8001796:	4692      	mov	sl, r2
 8001798:	2508      	movs	r5, #8
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	e7ae      	b.n	80016fc <__aeabi_dmul+0x4c>
 800179e:	9b00      	ldr	r3, [sp, #0]
 80017a0:	46a2      	mov	sl, r4
 80017a2:	4699      	mov	r9, r3
 80017a4:	9b01      	ldr	r3, [sp, #4]
 80017a6:	4698      	mov	r8, r3
 80017a8:	9b02      	ldr	r3, [sp, #8]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dmul+0x100>
 80017ae:	e1ca      	b.n	8001b46 <__aeabi_dmul+0x496>
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dmul+0x106>
 80017b4:	e192      	b.n	8001adc <__aeabi_dmul+0x42c>
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d110      	bne.n	80017dc <__aeabi_dmul+0x12c>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2400      	movs	r4, #0
 80017be:	2200      	movs	r2, #0
 80017c0:	e7d4      	b.n	800176c <__aeabi_dmul+0xbc>
 80017c2:	2201      	movs	r2, #1
 80017c4:	087b      	lsrs	r3, r7, #1
 80017c6:	403a      	ands	r2, r7
 80017c8:	4313      	orrs	r3, r2
 80017ca:	4652      	mov	r2, sl
 80017cc:	07d2      	lsls	r2, r2, #31
 80017ce:	4313      	orrs	r3, r2
 80017d0:	4698      	mov	r8, r3
 80017d2:	4653      	mov	r3, sl
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	469a      	mov	sl, r3
 80017d8:	9b03      	ldr	r3, [sp, #12]
 80017da:	4699      	mov	r9, r3
 80017dc:	465b      	mov	r3, fp
 80017de:	1c58      	adds	r0, r3, #1
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	445b      	add	r3, fp
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_dmul+0x13c>
 80017ea:	e1b1      	b.n	8001b50 <__aeabi_dmul+0x4a0>
 80017ec:	4642      	mov	r2, r8
 80017ee:	0752      	lsls	r2, r2, #29
 80017f0:	d00b      	beq.n	800180a <__aeabi_dmul+0x15a>
 80017f2:	220f      	movs	r2, #15
 80017f4:	4641      	mov	r1, r8
 80017f6:	400a      	ands	r2, r1
 80017f8:	2a04      	cmp	r2, #4
 80017fa:	d006      	beq.n	800180a <__aeabi_dmul+0x15a>
 80017fc:	4642      	mov	r2, r8
 80017fe:	1d11      	adds	r1, r2, #4
 8001800:	4541      	cmp	r1, r8
 8001802:	4192      	sbcs	r2, r2
 8001804:	4688      	mov	r8, r1
 8001806:	4252      	negs	r2, r2
 8001808:	4492      	add	sl, r2
 800180a:	4652      	mov	r2, sl
 800180c:	01d2      	lsls	r2, r2, #7
 800180e:	d506      	bpl.n	800181e <__aeabi_dmul+0x16e>
 8001810:	4652      	mov	r2, sl
 8001812:	4b80      	ldr	r3, [pc, #512]	@ (8001a14 <__aeabi_dmul+0x364>)
 8001814:	401a      	ands	r2, r3
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	4692      	mov	sl, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	18c3      	adds	r3, r0, r3
 800181e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a18 <__aeabi_dmul+0x368>)
 8001820:	4293      	cmp	r3, r2
 8001822:	dd00      	ble.n	8001826 <__aeabi_dmul+0x176>
 8001824:	e18f      	b.n	8001b46 <__aeabi_dmul+0x496>
 8001826:	4642      	mov	r2, r8
 8001828:	08d1      	lsrs	r1, r2, #3
 800182a:	4652      	mov	r2, sl
 800182c:	0752      	lsls	r2, r2, #29
 800182e:	430a      	orrs	r2, r1
 8001830:	4651      	mov	r1, sl
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	024c      	lsls	r4, r1, #9
 8001836:	0b24      	lsrs	r4, r4, #12
 8001838:	0d5b      	lsrs	r3, r3, #21
 800183a:	e797      	b.n	800176c <__aeabi_dmul+0xbc>
 800183c:	4b73      	ldr	r3, [pc, #460]	@ (8001a0c <__aeabi_dmul+0x35c>)
 800183e:	4326      	orrs	r6, r4
 8001840:	469c      	mov	ip, r3
 8001842:	44e3      	add	fp, ip
 8001844:	2e00      	cmp	r6, #0
 8001846:	d100      	bne.n	800184a <__aeabi_dmul+0x19a>
 8001848:	e16f      	b.n	8001b2a <__aeabi_dmul+0x47a>
 800184a:	2303      	movs	r3, #3
 800184c:	4649      	mov	r1, r9
 800184e:	431d      	orrs	r5, r3
 8001850:	9b00      	ldr	r3, [sp, #0]
 8001852:	4059      	eors	r1, r3
 8001854:	b2cb      	uxtb	r3, r1
 8001856:	9303      	str	r3, [sp, #12]
 8001858:	2d0a      	cmp	r5, #10
 800185a:	dd00      	ble.n	800185e <__aeabi_dmul+0x1ae>
 800185c:	e133      	b.n	8001ac6 <__aeabi_dmul+0x416>
 800185e:	2301      	movs	r3, #1
 8001860:	40ab      	lsls	r3, r5
 8001862:	001d      	movs	r5, r3
 8001864:	2303      	movs	r3, #3
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	2288      	movs	r2, #136	@ 0x88
 800186a:	422a      	tst	r2, r5
 800186c:	d197      	bne.n	800179e <__aeabi_dmul+0xee>
 800186e:	4642      	mov	r2, r8
 8001870:	4643      	mov	r3, r8
 8001872:	0412      	lsls	r2, r2, #16
 8001874:	0c12      	lsrs	r2, r2, #16
 8001876:	0016      	movs	r6, r2
 8001878:	9801      	ldr	r0, [sp, #4]
 800187a:	0c1d      	lsrs	r5, r3, #16
 800187c:	0c03      	lsrs	r3, r0, #16
 800187e:	0400      	lsls	r0, r0, #16
 8001880:	0c00      	lsrs	r0, r0, #16
 8001882:	4346      	muls	r6, r0
 8001884:	46b4      	mov	ip, r6
 8001886:	001e      	movs	r6, r3
 8001888:	436e      	muls	r6, r5
 800188a:	9600      	str	r6, [sp, #0]
 800188c:	0016      	movs	r6, r2
 800188e:	0007      	movs	r7, r0
 8001890:	435e      	muls	r6, r3
 8001892:	4661      	mov	r1, ip
 8001894:	46b0      	mov	r8, r6
 8001896:	436f      	muls	r7, r5
 8001898:	0c0e      	lsrs	r6, r1, #16
 800189a:	44b8      	add	r8, r7
 800189c:	4446      	add	r6, r8
 800189e:	42b7      	cmp	r7, r6
 80018a0:	d905      	bls.n	80018ae <__aeabi_dmul+0x1fe>
 80018a2:	2180      	movs	r1, #128	@ 0x80
 80018a4:	0249      	lsls	r1, r1, #9
 80018a6:	4688      	mov	r8, r1
 80018a8:	9f00      	ldr	r7, [sp, #0]
 80018aa:	4447      	add	r7, r8
 80018ac:	9700      	str	r7, [sp, #0]
 80018ae:	4661      	mov	r1, ip
 80018b0:	0409      	lsls	r1, r1, #16
 80018b2:	0c09      	lsrs	r1, r1, #16
 80018b4:	0c37      	lsrs	r7, r6, #16
 80018b6:	0436      	lsls	r6, r6, #16
 80018b8:	468c      	mov	ip, r1
 80018ba:	0031      	movs	r1, r6
 80018bc:	4461      	add	r1, ip
 80018be:	9101      	str	r1, [sp, #4]
 80018c0:	0011      	movs	r1, r2
 80018c2:	0c26      	lsrs	r6, r4, #16
 80018c4:	0424      	lsls	r4, r4, #16
 80018c6:	0c24      	lsrs	r4, r4, #16
 80018c8:	4361      	muls	r1, r4
 80018ca:	468c      	mov	ip, r1
 80018cc:	0021      	movs	r1, r4
 80018ce:	4369      	muls	r1, r5
 80018d0:	4689      	mov	r9, r1
 80018d2:	4661      	mov	r1, ip
 80018d4:	0c09      	lsrs	r1, r1, #16
 80018d6:	4688      	mov	r8, r1
 80018d8:	4372      	muls	r2, r6
 80018da:	444a      	add	r2, r9
 80018dc:	4442      	add	r2, r8
 80018de:	4375      	muls	r5, r6
 80018e0:	4591      	cmp	r9, r2
 80018e2:	d903      	bls.n	80018ec <__aeabi_dmul+0x23c>
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	0249      	lsls	r1, r1, #9
 80018e8:	4688      	mov	r8, r1
 80018ea:	4445      	add	r5, r8
 80018ec:	0c11      	lsrs	r1, r2, #16
 80018ee:	4688      	mov	r8, r1
 80018f0:	4661      	mov	r1, ip
 80018f2:	0409      	lsls	r1, r1, #16
 80018f4:	0c09      	lsrs	r1, r1, #16
 80018f6:	468c      	mov	ip, r1
 80018f8:	0412      	lsls	r2, r2, #16
 80018fa:	4462      	add	r2, ip
 80018fc:	18b9      	adds	r1, r7, r2
 80018fe:	9102      	str	r1, [sp, #8]
 8001900:	4651      	mov	r1, sl
 8001902:	0c09      	lsrs	r1, r1, #16
 8001904:	468c      	mov	ip, r1
 8001906:	4651      	mov	r1, sl
 8001908:	040f      	lsls	r7, r1, #16
 800190a:	0c3f      	lsrs	r7, r7, #16
 800190c:	0039      	movs	r1, r7
 800190e:	4341      	muls	r1, r0
 8001910:	4445      	add	r5, r8
 8001912:	4688      	mov	r8, r1
 8001914:	4661      	mov	r1, ip
 8001916:	4341      	muls	r1, r0
 8001918:	468a      	mov	sl, r1
 800191a:	4641      	mov	r1, r8
 800191c:	4660      	mov	r0, ip
 800191e:	0c09      	lsrs	r1, r1, #16
 8001920:	4689      	mov	r9, r1
 8001922:	4358      	muls	r0, r3
 8001924:	437b      	muls	r3, r7
 8001926:	4453      	add	r3, sl
 8001928:	444b      	add	r3, r9
 800192a:	459a      	cmp	sl, r3
 800192c:	d903      	bls.n	8001936 <__aeabi_dmul+0x286>
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	0249      	lsls	r1, r1, #9
 8001932:	4689      	mov	r9, r1
 8001934:	4448      	add	r0, r9
 8001936:	0c19      	lsrs	r1, r3, #16
 8001938:	4689      	mov	r9, r1
 800193a:	4641      	mov	r1, r8
 800193c:	0409      	lsls	r1, r1, #16
 800193e:	0c09      	lsrs	r1, r1, #16
 8001940:	4688      	mov	r8, r1
 8001942:	0039      	movs	r1, r7
 8001944:	4361      	muls	r1, r4
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	4443      	add	r3, r8
 800194a:	4688      	mov	r8, r1
 800194c:	4661      	mov	r1, ip
 800194e:	434c      	muls	r4, r1
 8001950:	4371      	muls	r1, r6
 8001952:	468c      	mov	ip, r1
 8001954:	4641      	mov	r1, r8
 8001956:	4377      	muls	r7, r6
 8001958:	0c0e      	lsrs	r6, r1, #16
 800195a:	193f      	adds	r7, r7, r4
 800195c:	19f6      	adds	r6, r6, r7
 800195e:	4448      	add	r0, r9
 8001960:	42b4      	cmp	r4, r6
 8001962:	d903      	bls.n	800196c <__aeabi_dmul+0x2bc>
 8001964:	2180      	movs	r1, #128	@ 0x80
 8001966:	0249      	lsls	r1, r1, #9
 8001968:	4689      	mov	r9, r1
 800196a:	44cc      	add	ip, r9
 800196c:	9902      	ldr	r1, [sp, #8]
 800196e:	9f00      	ldr	r7, [sp, #0]
 8001970:	4689      	mov	r9, r1
 8001972:	0431      	lsls	r1, r6, #16
 8001974:	444f      	add	r7, r9
 8001976:	4689      	mov	r9, r1
 8001978:	4641      	mov	r1, r8
 800197a:	4297      	cmp	r7, r2
 800197c:	4192      	sbcs	r2, r2
 800197e:	040c      	lsls	r4, r1, #16
 8001980:	0c24      	lsrs	r4, r4, #16
 8001982:	444c      	add	r4, r9
 8001984:	18ff      	adds	r7, r7, r3
 8001986:	4252      	negs	r2, r2
 8001988:	1964      	adds	r4, r4, r5
 800198a:	18a1      	adds	r1, r4, r2
 800198c:	429f      	cmp	r7, r3
 800198e:	419b      	sbcs	r3, r3
 8001990:	4688      	mov	r8, r1
 8001992:	4682      	mov	sl, r0
 8001994:	425b      	negs	r3, r3
 8001996:	4699      	mov	r9, r3
 8001998:	4590      	cmp	r8, r2
 800199a:	4192      	sbcs	r2, r2
 800199c:	42ac      	cmp	r4, r5
 800199e:	41a4      	sbcs	r4, r4
 80019a0:	44c2      	add	sl, r8
 80019a2:	44d1      	add	r9, sl
 80019a4:	4252      	negs	r2, r2
 80019a6:	4264      	negs	r4, r4
 80019a8:	4314      	orrs	r4, r2
 80019aa:	4599      	cmp	r9, r3
 80019ac:	419b      	sbcs	r3, r3
 80019ae:	4582      	cmp	sl, r0
 80019b0:	4192      	sbcs	r2, r2
 80019b2:	425b      	negs	r3, r3
 80019b4:	4252      	negs	r2, r2
 80019b6:	4313      	orrs	r3, r2
 80019b8:	464a      	mov	r2, r9
 80019ba:	0c36      	lsrs	r6, r6, #16
 80019bc:	19a4      	adds	r4, r4, r6
 80019be:	18e3      	adds	r3, r4, r3
 80019c0:	4463      	add	r3, ip
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	0dd2      	lsrs	r2, r2, #23
 80019c6:	431a      	orrs	r2, r3
 80019c8:	9901      	ldr	r1, [sp, #4]
 80019ca:	4692      	mov	sl, r2
 80019cc:	027a      	lsls	r2, r7, #9
 80019ce:	430a      	orrs	r2, r1
 80019d0:	1e50      	subs	r0, r2, #1
 80019d2:	4182      	sbcs	r2, r0
 80019d4:	0dff      	lsrs	r7, r7, #23
 80019d6:	4317      	orrs	r7, r2
 80019d8:	464a      	mov	r2, r9
 80019da:	0252      	lsls	r2, r2, #9
 80019dc:	4317      	orrs	r7, r2
 80019de:	46b8      	mov	r8, r7
 80019e0:	01db      	lsls	r3, r3, #7
 80019e2:	d500      	bpl.n	80019e6 <__aeabi_dmul+0x336>
 80019e4:	e6ed      	b.n	80017c2 <__aeabi_dmul+0x112>
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <__aeabi_dmul+0x36c>)
 80019e8:	9a03      	ldr	r2, [sp, #12]
 80019ea:	445b      	add	r3, fp
 80019ec:	4691      	mov	r9, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dc00      	bgt.n	80019f4 <__aeabi_dmul+0x344>
 80019f2:	e0ac      	b.n	8001b4e <__aeabi_dmul+0x49e>
 80019f4:	003a      	movs	r2, r7
 80019f6:	0752      	lsls	r2, r2, #29
 80019f8:	d100      	bne.n	80019fc <__aeabi_dmul+0x34c>
 80019fa:	e710      	b.n	800181e <__aeabi_dmul+0x16e>
 80019fc:	220f      	movs	r2, #15
 80019fe:	4658      	mov	r0, fp
 8001a00:	403a      	ands	r2, r7
 8001a02:	2a04      	cmp	r2, #4
 8001a04:	d000      	beq.n	8001a08 <__aeabi_dmul+0x358>
 8001a06:	e6f9      	b.n	80017fc <__aeabi_dmul+0x14c>
 8001a08:	e709      	b.n	800181e <__aeabi_dmul+0x16e>
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	000007ff 	.word	0x000007ff
 8001a10:	fffffc01 	.word	0xfffffc01
 8001a14:	feffffff 	.word	0xfeffffff
 8001a18:	000007fe 	.word	0x000007fe
 8001a1c:	000003ff 	.word	0x000003ff
 8001a20:	0022      	movs	r2, r4
 8001a22:	4332      	orrs	r2, r6
 8001a24:	d06f      	beq.n	8001b06 <__aeabi_dmul+0x456>
 8001a26:	2c00      	cmp	r4, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dmul+0x37c>
 8001a2a:	e0c2      	b.n	8001bb2 <__aeabi_dmul+0x502>
 8001a2c:	0020      	movs	r0, r4
 8001a2e:	f000 fea9 	bl	8002784 <__clzsi2>
 8001a32:	0002      	movs	r2, r0
 8001a34:	0003      	movs	r3, r0
 8001a36:	3a0b      	subs	r2, #11
 8001a38:	201d      	movs	r0, #29
 8001a3a:	1a82      	subs	r2, r0, r2
 8001a3c:	0030      	movs	r0, r6
 8001a3e:	0019      	movs	r1, r3
 8001a40:	40d0      	lsrs	r0, r2
 8001a42:	3908      	subs	r1, #8
 8001a44:	408c      	lsls	r4, r1
 8001a46:	0002      	movs	r2, r0
 8001a48:	4322      	orrs	r2, r4
 8001a4a:	0034      	movs	r4, r6
 8001a4c:	408c      	lsls	r4, r1
 8001a4e:	4659      	mov	r1, fp
 8001a50:	1acb      	subs	r3, r1, r3
 8001a52:	4986      	ldr	r1, [pc, #536]	@ (8001c6c <__aeabi_dmul+0x5bc>)
 8001a54:	468b      	mov	fp, r1
 8001a56:	449b      	add	fp, r3
 8001a58:	2d0a      	cmp	r5, #10
 8001a5a:	dd00      	ble.n	8001a5e <__aeabi_dmul+0x3ae>
 8001a5c:	e6a4      	b.n	80017a8 <__aeabi_dmul+0xf8>
 8001a5e:	4649      	mov	r1, r9
 8001a60:	9b00      	ldr	r3, [sp, #0]
 8001a62:	9401      	str	r4, [sp, #4]
 8001a64:	4059      	eors	r1, r3
 8001a66:	b2cb      	uxtb	r3, r1
 8001a68:	0014      	movs	r4, r2
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	9303      	str	r3, [sp, #12]
 8001a6e:	2d02      	cmp	r5, #2
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_dmul+0x3c4>
 8001a72:	e667      	b.n	8001744 <__aeabi_dmul+0x94>
 8001a74:	e6fb      	b.n	800186e <__aeabi_dmul+0x1be>
 8001a76:	4653      	mov	r3, sl
 8001a78:	4303      	orrs	r3, r0
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	d03c      	beq.n	8001af8 <__aeabi_dmul+0x448>
 8001a7e:	4653      	mov	r3, sl
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0x3d6>
 8001a84:	e0a3      	b.n	8001bce <__aeabi_dmul+0x51e>
 8001a86:	4650      	mov	r0, sl
 8001a88:	f000 fe7c 	bl	8002784 <__clzsi2>
 8001a8c:	230b      	movs	r3, #11
 8001a8e:	425b      	negs	r3, r3
 8001a90:	469c      	mov	ip, r3
 8001a92:	0002      	movs	r2, r0
 8001a94:	4484      	add	ip, r0
 8001a96:	0011      	movs	r1, r2
 8001a98:	4650      	mov	r0, sl
 8001a9a:	3908      	subs	r1, #8
 8001a9c:	4088      	lsls	r0, r1
 8001a9e:	231d      	movs	r3, #29
 8001aa0:	4680      	mov	r8, r0
 8001aa2:	4660      	mov	r0, ip
 8001aa4:	1a1b      	subs	r3, r3, r0
 8001aa6:	0020      	movs	r0, r4
 8001aa8:	40d8      	lsrs	r0, r3
 8001aaa:	0003      	movs	r3, r0
 8001aac:	4640      	mov	r0, r8
 8001aae:	4303      	orrs	r3, r0
 8001ab0:	469a      	mov	sl, r3
 8001ab2:	0023      	movs	r3, r4
 8001ab4:	408b      	lsls	r3, r1
 8001ab6:	4698      	mov	r8, r3
 8001ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c6c <__aeabi_dmul+0x5bc>)
 8001aba:	2500      	movs	r5, #0
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	469b      	mov	fp, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	e61a      	b.n	80016fc <__aeabi_dmul+0x4c>
 8001ac6:	2d0f      	cmp	r5, #15
 8001ac8:	d000      	beq.n	8001acc <__aeabi_dmul+0x41c>
 8001aca:	e0c9      	b.n	8001c60 <__aeabi_dmul+0x5b0>
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	4652      	mov	r2, sl
 8001ad0:	031b      	lsls	r3, r3, #12
 8001ad2:	421a      	tst	r2, r3
 8001ad4:	d002      	beq.n	8001adc <__aeabi_dmul+0x42c>
 8001ad6:	421c      	tst	r4, r3
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dmul+0x42c>
 8001ada:	e092      	b.n	8001c02 <__aeabi_dmul+0x552>
 8001adc:	2480      	movs	r4, #128	@ 0x80
 8001ade:	4653      	mov	r3, sl
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	431c      	orrs	r4, r3
 8001ae4:	0324      	lsls	r4, r4, #12
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	0b24      	lsrs	r4, r4, #12
 8001aea:	e63e      	b.n	800176a <__aeabi_dmul+0xba>
 8001aec:	469b      	mov	fp, r3
 8001aee:	2303      	movs	r3, #3
 8001af0:	4680      	mov	r8, r0
 8001af2:	250c      	movs	r5, #12
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	e601      	b.n	80016fc <__aeabi_dmul+0x4c>
 8001af8:	2300      	movs	r3, #0
 8001afa:	469a      	mov	sl, r3
 8001afc:	469b      	mov	fp, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	2504      	movs	r5, #4
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	e5fa      	b.n	80016fc <__aeabi_dmul+0x4c>
 8001b06:	2101      	movs	r1, #1
 8001b08:	430d      	orrs	r5, r1
 8001b0a:	2d0a      	cmp	r5, #10
 8001b0c:	dd00      	ble.n	8001b10 <__aeabi_dmul+0x460>
 8001b0e:	e64b      	b.n	80017a8 <__aeabi_dmul+0xf8>
 8001b10:	4649      	mov	r1, r9
 8001b12:	9800      	ldr	r0, [sp, #0]
 8001b14:	4041      	eors	r1, r0
 8001b16:	b2c9      	uxtb	r1, r1
 8001b18:	9103      	str	r1, [sp, #12]
 8001b1a:	2d02      	cmp	r5, #2
 8001b1c:	dc00      	bgt.n	8001b20 <__aeabi_dmul+0x470>
 8001b1e:	e096      	b.n	8001c4e <__aeabi_dmul+0x59e>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2400      	movs	r4, #0
 8001b24:	2001      	movs	r0, #1
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	e60c      	b.n	8001744 <__aeabi_dmul+0x94>
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	9a00      	ldr	r2, [sp, #0]
 8001b30:	432b      	orrs	r3, r5
 8001b32:	4051      	eors	r1, r2
 8001b34:	b2ca      	uxtb	r2, r1
 8001b36:	9203      	str	r2, [sp, #12]
 8001b38:	2b0a      	cmp	r3, #10
 8001b3a:	dd00      	ble.n	8001b3e <__aeabi_dmul+0x48e>
 8001b3c:	e634      	b.n	80017a8 <__aeabi_dmul+0xf8>
 8001b3e:	2d00      	cmp	r5, #0
 8001b40:	d157      	bne.n	8001bf2 <__aeabi_dmul+0x542>
 8001b42:	9b03      	ldr	r3, [sp, #12]
 8001b44:	4699      	mov	r9, r3
 8001b46:	2400      	movs	r4, #0
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4b49      	ldr	r3, [pc, #292]	@ (8001c70 <__aeabi_dmul+0x5c0>)
 8001b4c:	e60e      	b.n	800176c <__aeabi_dmul+0xbc>
 8001b4e:	4658      	mov	r0, fp
 8001b50:	2101      	movs	r1, #1
 8001b52:	1ac9      	subs	r1, r1, r3
 8001b54:	2938      	cmp	r1, #56	@ 0x38
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dmul+0x4aa>
 8001b58:	e62f      	b.n	80017ba <__aeabi_dmul+0x10a>
 8001b5a:	291f      	cmp	r1, #31
 8001b5c:	dd56      	ble.n	8001c0c <__aeabi_dmul+0x55c>
 8001b5e:	221f      	movs	r2, #31
 8001b60:	4654      	mov	r4, sl
 8001b62:	4252      	negs	r2, r2
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	40dc      	lsrs	r4, r3
 8001b68:	2920      	cmp	r1, #32
 8001b6a:	d007      	beq.n	8001b7c <__aeabi_dmul+0x4cc>
 8001b6c:	4b41      	ldr	r3, [pc, #260]	@ (8001c74 <__aeabi_dmul+0x5c4>)
 8001b6e:	4642      	mov	r2, r8
 8001b70:	469c      	mov	ip, r3
 8001b72:	4653      	mov	r3, sl
 8001b74:	4460      	add	r0, ip
 8001b76:	4083      	lsls	r3, r0
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	4690      	mov	r8, r2
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	2107      	movs	r1, #7
 8001b80:	1e53      	subs	r3, r2, #1
 8001b82:	419a      	sbcs	r2, r3
 8001b84:	000b      	movs	r3, r1
 8001b86:	4322      	orrs	r2, r4
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2400      	movs	r4, #0
 8001b8c:	4211      	tst	r1, r2
 8001b8e:	d009      	beq.n	8001ba4 <__aeabi_dmul+0x4f4>
 8001b90:	230f      	movs	r3, #15
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d05d      	beq.n	8001c54 <__aeabi_dmul+0x5a4>
 8001b98:	1d11      	adds	r1, r2, #4
 8001b9a:	4291      	cmp	r1, r2
 8001b9c:	419b      	sbcs	r3, r3
 8001b9e:	000a      	movs	r2, r1
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	075b      	lsls	r3, r3, #29
 8001ba4:	08d2      	lsrs	r2, r2, #3
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e5df      	b.n	800176c <__aeabi_dmul+0xbc>
 8001bac:	9b03      	ldr	r3, [sp, #12]
 8001bae:	4699      	mov	r9, r3
 8001bb0:	e5fa      	b.n	80017a8 <__aeabi_dmul+0xf8>
 8001bb2:	9801      	ldr	r0, [sp, #4]
 8001bb4:	f000 fde6 	bl	8002784 <__clzsi2>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	0003      	movs	r3, r0
 8001bbc:	3215      	adds	r2, #21
 8001bbe:	3320      	adds	r3, #32
 8001bc0:	2a1c      	cmp	r2, #28
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_dmul+0x516>
 8001bc4:	e738      	b.n	8001a38 <__aeabi_dmul+0x388>
 8001bc6:	9a01      	ldr	r2, [sp, #4]
 8001bc8:	3808      	subs	r0, #8
 8001bca:	4082      	lsls	r2, r0
 8001bcc:	e73f      	b.n	8001a4e <__aeabi_dmul+0x39e>
 8001bce:	f000 fdd9 	bl	8002784 <__clzsi2>
 8001bd2:	2315      	movs	r3, #21
 8001bd4:	469c      	mov	ip, r3
 8001bd6:	4484      	add	ip, r0
 8001bd8:	0002      	movs	r2, r0
 8001bda:	4663      	mov	r3, ip
 8001bdc:	3220      	adds	r2, #32
 8001bde:	2b1c      	cmp	r3, #28
 8001be0:	dc00      	bgt.n	8001be4 <__aeabi_dmul+0x534>
 8001be2:	e758      	b.n	8001a96 <__aeabi_dmul+0x3e6>
 8001be4:	2300      	movs	r3, #0
 8001be6:	4698      	mov	r8, r3
 8001be8:	0023      	movs	r3, r4
 8001bea:	3808      	subs	r0, #8
 8001bec:	4083      	lsls	r3, r0
 8001bee:	469a      	mov	sl, r3
 8001bf0:	e762      	b.n	8001ab8 <__aeabi_dmul+0x408>
 8001bf2:	001d      	movs	r5, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	2400      	movs	r4, #0
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	e5a2      	b.n	8001744 <__aeabi_dmul+0x94>
 8001bfe:	9002      	str	r0, [sp, #8]
 8001c00:	e632      	b.n	8001868 <__aeabi_dmul+0x1b8>
 8001c02:	431c      	orrs	r4, r3
 8001c04:	9b00      	ldr	r3, [sp, #0]
 8001c06:	9a01      	ldr	r2, [sp, #4]
 8001c08:	4699      	mov	r9, r3
 8001c0a:	e5ae      	b.n	800176a <__aeabi_dmul+0xba>
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <__aeabi_dmul+0x5c8>)
 8001c0e:	4652      	mov	r2, sl
 8001c10:	18c3      	adds	r3, r0, r3
 8001c12:	4640      	mov	r0, r8
 8001c14:	409a      	lsls	r2, r3
 8001c16:	40c8      	lsrs	r0, r1
 8001c18:	4302      	orrs	r2, r0
 8001c1a:	4640      	mov	r0, r8
 8001c1c:	4098      	lsls	r0, r3
 8001c1e:	0003      	movs	r3, r0
 8001c20:	1e58      	subs	r0, r3, #1
 8001c22:	4183      	sbcs	r3, r0
 8001c24:	4654      	mov	r4, sl
 8001c26:	431a      	orrs	r2, r3
 8001c28:	40cc      	lsrs	r4, r1
 8001c2a:	0753      	lsls	r3, r2, #29
 8001c2c:	d009      	beq.n	8001c42 <__aeabi_dmul+0x592>
 8001c2e:	230f      	movs	r3, #15
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d005      	beq.n	8001c42 <__aeabi_dmul+0x592>
 8001c36:	1d13      	adds	r3, r2, #4
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	4192      	sbcs	r2, r2
 8001c3c:	4252      	negs	r2, r2
 8001c3e:	18a4      	adds	r4, r4, r2
 8001c40:	001a      	movs	r2, r3
 8001c42:	0223      	lsls	r3, r4, #8
 8001c44:	d508      	bpl.n	8001c58 <__aeabi_dmul+0x5a8>
 8001c46:	2301      	movs	r3, #1
 8001c48:	2400      	movs	r4, #0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	e58e      	b.n	800176c <__aeabi_dmul+0xbc>
 8001c4e:	4689      	mov	r9, r1
 8001c50:	2400      	movs	r4, #0
 8001c52:	e58b      	b.n	800176c <__aeabi_dmul+0xbc>
 8001c54:	2300      	movs	r3, #0
 8001c56:	e7a5      	b.n	8001ba4 <__aeabi_dmul+0x4f4>
 8001c58:	0763      	lsls	r3, r4, #29
 8001c5a:	0264      	lsls	r4, r4, #9
 8001c5c:	0b24      	lsrs	r4, r4, #12
 8001c5e:	e7a1      	b.n	8001ba4 <__aeabi_dmul+0x4f4>
 8001c60:	9b00      	ldr	r3, [sp, #0]
 8001c62:	46a2      	mov	sl, r4
 8001c64:	4699      	mov	r9, r3
 8001c66:	9b01      	ldr	r3, [sp, #4]
 8001c68:	4698      	mov	r8, r3
 8001c6a:	e737      	b.n	8001adc <__aeabi_dmul+0x42c>
 8001c6c:	fffffc0d 	.word	0xfffffc0d
 8001c70:	000007ff 	.word	0x000007ff
 8001c74:	0000043e 	.word	0x0000043e
 8001c78:	0000041e 	.word	0x0000041e

08001c7c <__aeabi_dsub>:
 8001c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7e:	4657      	mov	r7, sl
 8001c80:	464e      	mov	r6, r9
 8001c82:	4645      	mov	r5, r8
 8001c84:	46de      	mov	lr, fp
 8001c86:	b5e0      	push	{r5, r6, r7, lr}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	9000      	str	r0, [sp, #0]
 8001c8c:	9101      	str	r1, [sp, #4]
 8001c8e:	030c      	lsls	r4, r1, #12
 8001c90:	004d      	lsls	r5, r1, #1
 8001c92:	0fce      	lsrs	r6, r1, #31
 8001c94:	0a61      	lsrs	r1, r4, #9
 8001c96:	9c00      	ldr	r4, [sp, #0]
 8001c98:	005f      	lsls	r7, r3, #1
 8001c9a:	0f64      	lsrs	r4, r4, #29
 8001c9c:	430c      	orrs	r4, r1
 8001c9e:	9900      	ldr	r1, [sp, #0]
 8001ca0:	9200      	str	r2, [sp, #0]
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	00c8      	lsls	r0, r1, #3
 8001ca6:	0319      	lsls	r1, r3, #12
 8001ca8:	0d7b      	lsrs	r3, r7, #21
 8001caa:	4699      	mov	r9, r3
 8001cac:	9b01      	ldr	r3, [sp, #4]
 8001cae:	4fcc      	ldr	r7, [pc, #816]	@ (8001fe0 <__aeabi_dsub+0x364>)
 8001cb0:	0fdb      	lsrs	r3, r3, #31
 8001cb2:	469c      	mov	ip, r3
 8001cb4:	0a4b      	lsrs	r3, r1, #9
 8001cb6:	9900      	ldr	r1, [sp, #0]
 8001cb8:	4680      	mov	r8, r0
 8001cba:	0f49      	lsrs	r1, r1, #29
 8001cbc:	4319      	orrs	r1, r3
 8001cbe:	9b00      	ldr	r3, [sp, #0]
 8001cc0:	468b      	mov	fp, r1
 8001cc2:	00da      	lsls	r2, r3, #3
 8001cc4:	4692      	mov	sl, r2
 8001cc6:	0d6d      	lsrs	r5, r5, #21
 8001cc8:	45b9      	cmp	r9, r7
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x52>
 8001ccc:	e0bf      	b.n	8001e4e <__aeabi_dsub+0x1d2>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	4059      	eors	r1, r3
 8001cd4:	464b      	mov	r3, r9
 8001cd6:	468c      	mov	ip, r1
 8001cd8:	1aeb      	subs	r3, r5, r3
 8001cda:	428e      	cmp	r6, r1
 8001cdc:	d075      	beq.n	8001dca <__aeabi_dsub+0x14e>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	dc00      	bgt.n	8001ce4 <__aeabi_dsub+0x68>
 8001ce2:	e2a3      	b.n	800222c <__aeabi_dsub+0x5b0>
 8001ce4:	4649      	mov	r1, r9
 8001ce6:	2900      	cmp	r1, #0
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x70>
 8001cea:	e0ce      	b.n	8001e8a <__aeabi_dsub+0x20e>
 8001cec:	42bd      	cmp	r5, r7
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dsub+0x76>
 8001cf0:	e200      	b.n	80020f4 <__aeabi_dsub+0x478>
 8001cf2:	2701      	movs	r7, #1
 8001cf4:	2b38      	cmp	r3, #56	@ 0x38
 8001cf6:	dc19      	bgt.n	8001d2c <__aeabi_dsub+0xb0>
 8001cf8:	2780      	movs	r7, #128	@ 0x80
 8001cfa:	4659      	mov	r1, fp
 8001cfc:	043f      	lsls	r7, r7, #16
 8001cfe:	4339      	orrs	r1, r7
 8001d00:	468b      	mov	fp, r1
 8001d02:	2b1f      	cmp	r3, #31
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x8c>
 8001d06:	e1fa      	b.n	80020fe <__aeabi_dsub+0x482>
 8001d08:	2720      	movs	r7, #32
 8001d0a:	1af9      	subs	r1, r7, r3
 8001d0c:	468c      	mov	ip, r1
 8001d0e:	4659      	mov	r1, fp
 8001d10:	4667      	mov	r7, ip
 8001d12:	40b9      	lsls	r1, r7
 8001d14:	000f      	movs	r7, r1
 8001d16:	0011      	movs	r1, r2
 8001d18:	40d9      	lsrs	r1, r3
 8001d1a:	430f      	orrs	r7, r1
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	408a      	lsls	r2, r1
 8001d20:	1e51      	subs	r1, r2, #1
 8001d22:	418a      	sbcs	r2, r1
 8001d24:	4659      	mov	r1, fp
 8001d26:	40d9      	lsrs	r1, r3
 8001d28:	4317      	orrs	r7, r2
 8001d2a:	1a64      	subs	r4, r4, r1
 8001d2c:	1bc7      	subs	r7, r0, r7
 8001d2e:	42b8      	cmp	r0, r7
 8001d30:	4180      	sbcs	r0, r0
 8001d32:	4240      	negs	r0, r0
 8001d34:	1a24      	subs	r4, r4, r0
 8001d36:	0223      	lsls	r3, r4, #8
 8001d38:	d400      	bmi.n	8001d3c <__aeabi_dsub+0xc0>
 8001d3a:	e140      	b.n	8001fbe <__aeabi_dsub+0x342>
 8001d3c:	0264      	lsls	r4, r4, #9
 8001d3e:	0a64      	lsrs	r4, r4, #9
 8001d40:	2c00      	cmp	r4, #0
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0xca>
 8001d44:	e154      	b.n	8001ff0 <__aeabi_dsub+0x374>
 8001d46:	0020      	movs	r0, r4
 8001d48:	f000 fd1c 	bl	8002784 <__clzsi2>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	3b08      	subs	r3, #8
 8001d50:	2120      	movs	r1, #32
 8001d52:	0038      	movs	r0, r7
 8001d54:	1aca      	subs	r2, r1, r3
 8001d56:	40d0      	lsrs	r0, r2
 8001d58:	409c      	lsls	r4, r3
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	409f      	lsls	r7, r3
 8001d5e:	4322      	orrs	r2, r4
 8001d60:	429d      	cmp	r5, r3
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dsub+0xea>
 8001d64:	e1a6      	b.n	80020b4 <__aeabi_dsub+0x438>
 8001d66:	1b58      	subs	r0, r3, r5
 8001d68:	3001      	adds	r0, #1
 8001d6a:	1a09      	subs	r1, r1, r0
 8001d6c:	003c      	movs	r4, r7
 8001d6e:	408f      	lsls	r7, r1
 8001d70:	40c4      	lsrs	r4, r0
 8001d72:	1e7b      	subs	r3, r7, #1
 8001d74:	419f      	sbcs	r7, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	408b      	lsls	r3, r1
 8001d7a:	4327      	orrs	r7, r4
 8001d7c:	431f      	orrs	r7, r3
 8001d7e:	40c2      	lsrs	r2, r0
 8001d80:	003b      	movs	r3, r7
 8001d82:	0014      	movs	r4, r2
 8001d84:	2500      	movs	r5, #0
 8001d86:	4313      	orrs	r3, r2
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dsub+0x110>
 8001d8a:	e1f7      	b.n	800217c <__aeabi_dsub+0x500>
 8001d8c:	077b      	lsls	r3, r7, #29
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x116>
 8001d90:	e377      	b.n	8002482 <__aeabi_dsub+0x806>
 8001d92:	230f      	movs	r3, #15
 8001d94:	0038      	movs	r0, r7
 8001d96:	403b      	ands	r3, r7
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d004      	beq.n	8001da6 <__aeabi_dsub+0x12a>
 8001d9c:	1d38      	adds	r0, r7, #4
 8001d9e:	42b8      	cmp	r0, r7
 8001da0:	41bf      	sbcs	r7, r7
 8001da2:	427f      	negs	r7, r7
 8001da4:	19e4      	adds	r4, r4, r7
 8001da6:	0223      	lsls	r3, r4, #8
 8001da8:	d400      	bmi.n	8001dac <__aeabi_dsub+0x130>
 8001daa:	e368      	b.n	800247e <__aeabi_dsub+0x802>
 8001dac:	4b8c      	ldr	r3, [pc, #560]	@ (8001fe0 <__aeabi_dsub+0x364>)
 8001dae:	3501      	adds	r5, #1
 8001db0:	429d      	cmp	r5, r3
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x13a>
 8001db4:	e0f4      	b.n	8001fa0 <__aeabi_dsub+0x324>
 8001db6:	4b8b      	ldr	r3, [pc, #556]	@ (8001fe4 <__aeabi_dsub+0x368>)
 8001db8:	056d      	lsls	r5, r5, #21
 8001dba:	401c      	ands	r4, r3
 8001dbc:	0d6d      	lsrs	r5, r5, #21
 8001dbe:	0767      	lsls	r7, r4, #29
 8001dc0:	08c0      	lsrs	r0, r0, #3
 8001dc2:	0264      	lsls	r4, r4, #9
 8001dc4:	4307      	orrs	r7, r0
 8001dc6:	0b24      	lsrs	r4, r4, #12
 8001dc8:	e0ec      	b.n	8001fa4 <__aeabi_dsub+0x328>
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	dc00      	bgt.n	8001dd0 <__aeabi_dsub+0x154>
 8001dce:	e329      	b.n	8002424 <__aeabi_dsub+0x7a8>
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	2900      	cmp	r1, #0
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dsub+0x15c>
 8001dd6:	e0d6      	b.n	8001f86 <__aeabi_dsub+0x30a>
 8001dd8:	4659      	mov	r1, fp
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dsub+0x164>
 8001dde:	e12e      	b.n	800203e <__aeabi_dsub+0x3c2>
 8001de0:	1e59      	subs	r1, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x16c>
 8001de6:	e1e6      	b.n	80021b6 <__aeabi_dsub+0x53a>
 8001de8:	42bb      	cmp	r3, r7
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x172>
 8001dec:	e182      	b.n	80020f4 <__aeabi_dsub+0x478>
 8001dee:	2701      	movs	r7, #1
 8001df0:	000b      	movs	r3, r1
 8001df2:	2938      	cmp	r1, #56	@ 0x38
 8001df4:	dc14      	bgt.n	8001e20 <__aeabi_dsub+0x1a4>
 8001df6:	2b1f      	cmp	r3, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x180>
 8001dfa:	e23c      	b.n	8002276 <__aeabi_dsub+0x5fa>
 8001dfc:	2720      	movs	r7, #32
 8001dfe:	1af9      	subs	r1, r7, r3
 8001e00:	468c      	mov	ip, r1
 8001e02:	4659      	mov	r1, fp
 8001e04:	4667      	mov	r7, ip
 8001e06:	40b9      	lsls	r1, r7
 8001e08:	000f      	movs	r7, r1
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	40d9      	lsrs	r1, r3
 8001e0e:	430f      	orrs	r7, r1
 8001e10:	4661      	mov	r1, ip
 8001e12:	408a      	lsls	r2, r1
 8001e14:	1e51      	subs	r1, r2, #1
 8001e16:	418a      	sbcs	r2, r1
 8001e18:	4659      	mov	r1, fp
 8001e1a:	40d9      	lsrs	r1, r3
 8001e1c:	4317      	orrs	r7, r2
 8001e1e:	1864      	adds	r4, r4, r1
 8001e20:	183f      	adds	r7, r7, r0
 8001e22:	4287      	cmp	r7, r0
 8001e24:	4180      	sbcs	r0, r0
 8001e26:	4240      	negs	r0, r0
 8001e28:	1824      	adds	r4, r4, r0
 8001e2a:	0223      	lsls	r3, r4, #8
 8001e2c:	d400      	bmi.n	8001e30 <__aeabi_dsub+0x1b4>
 8001e2e:	e0c6      	b.n	8001fbe <__aeabi_dsub+0x342>
 8001e30:	4b6b      	ldr	r3, [pc, #428]	@ (8001fe0 <__aeabi_dsub+0x364>)
 8001e32:	3501      	adds	r5, #1
 8001e34:	429d      	cmp	r5, r3
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x1be>
 8001e38:	e0b2      	b.n	8001fa0 <__aeabi_dsub+0x324>
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4b69      	ldr	r3, [pc, #420]	@ (8001fe4 <__aeabi_dsub+0x368>)
 8001e3e:	087a      	lsrs	r2, r7, #1
 8001e40:	401c      	ands	r4, r3
 8001e42:	4039      	ands	r1, r7
 8001e44:	430a      	orrs	r2, r1
 8001e46:	07e7      	lsls	r7, r4, #31
 8001e48:	4317      	orrs	r7, r2
 8001e4a:	0864      	lsrs	r4, r4, #1
 8001e4c:	e79e      	b.n	8001d8c <__aeabi_dsub+0x110>
 8001e4e:	4b66      	ldr	r3, [pc, #408]	@ (8001fe8 <__aeabi_dsub+0x36c>)
 8001e50:	4311      	orrs	r1, r2
 8001e52:	468a      	mov	sl, r1
 8001e54:	18eb      	adds	r3, r5, r3
 8001e56:	2900      	cmp	r1, #0
 8001e58:	d028      	beq.n	8001eac <__aeabi_dsub+0x230>
 8001e5a:	4566      	cmp	r6, ip
 8001e5c:	d02c      	beq.n	8001eb8 <__aeabi_dsub+0x23c>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d05b      	beq.n	8001f1a <__aeabi_dsub+0x29e>
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x1ec>
 8001e66:	e12c      	b.n	80020c2 <__aeabi_dsub+0x446>
 8001e68:	465b      	mov	r3, fp
 8001e6a:	4666      	mov	r6, ip
 8001e6c:	075f      	lsls	r7, r3, #29
 8001e6e:	08d2      	lsrs	r2, r2, #3
 8001e70:	4317      	orrs	r7, r2
 8001e72:	08dd      	lsrs	r5, r3, #3
 8001e74:	003b      	movs	r3, r7
 8001e76:	432b      	orrs	r3, r5
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x200>
 8001e7a:	e0e2      	b.n	8002042 <__aeabi_dsub+0x3c6>
 8001e7c:	2480      	movs	r4, #128	@ 0x80
 8001e7e:	0324      	lsls	r4, r4, #12
 8001e80:	432c      	orrs	r4, r5
 8001e82:	0324      	lsls	r4, r4, #12
 8001e84:	4d56      	ldr	r5, [pc, #344]	@ (8001fe0 <__aeabi_dsub+0x364>)
 8001e86:	0b24      	lsrs	r4, r4, #12
 8001e88:	e08c      	b.n	8001fa4 <__aeabi_dsub+0x328>
 8001e8a:	4659      	mov	r1, fp
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dsub+0x216>
 8001e90:	e0d5      	b.n	800203e <__aeabi_dsub+0x3c2>
 8001e92:	1e59      	subs	r1, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dsub+0x21e>
 8001e98:	e1b9      	b.n	800220e <__aeabi_dsub+0x592>
 8001e9a:	42bb      	cmp	r3, r7
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x224>
 8001e9e:	e1b1      	b.n	8002204 <__aeabi_dsub+0x588>
 8001ea0:	2701      	movs	r7, #1
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	2938      	cmp	r1, #56	@ 0x38
 8001ea6:	dd00      	ble.n	8001eaa <__aeabi_dsub+0x22e>
 8001ea8:	e740      	b.n	8001d2c <__aeabi_dsub+0xb0>
 8001eaa:	e72a      	b.n	8001d02 <__aeabi_dsub+0x86>
 8001eac:	4661      	mov	r1, ip
 8001eae:	2701      	movs	r7, #1
 8001eb0:	4079      	eors	r1, r7
 8001eb2:	468c      	mov	ip, r1
 8001eb4:	4566      	cmp	r6, ip
 8001eb6:	d1d2      	bne.n	8001e5e <__aeabi_dsub+0x1e2>
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <__aeabi_dsub+0x242>
 8001ebc:	e0c5      	b.n	800204a <__aeabi_dsub+0x3ce>
 8001ebe:	2d00      	cmp	r5, #0
 8001ec0:	d000      	beq.n	8001ec4 <__aeabi_dsub+0x248>
 8001ec2:	e155      	b.n	8002170 <__aeabi_dsub+0x4f4>
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	0025      	movs	r5, r4
 8001ec8:	4305      	orrs	r5, r0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x252>
 8001ecc:	e212      	b.n	80022f4 <__aeabi_dsub+0x678>
 8001ece:	1e59      	subs	r1, r3, #1
 8001ed0:	468c      	mov	ip, r1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x25c>
 8001ed6:	e249      	b.n	800236c <__aeabi_dsub+0x6f0>
 8001ed8:	4d41      	ldr	r5, [pc, #260]	@ (8001fe0 <__aeabi_dsub+0x364>)
 8001eda:	42ab      	cmp	r3, r5
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x264>
 8001ede:	e28f      	b.n	8002400 <__aeabi_dsub+0x784>
 8001ee0:	2701      	movs	r7, #1
 8001ee2:	2938      	cmp	r1, #56	@ 0x38
 8001ee4:	dc11      	bgt.n	8001f0a <__aeabi_dsub+0x28e>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	2b1f      	cmp	r3, #31
 8001eea:	dd00      	ble.n	8001eee <__aeabi_dsub+0x272>
 8001eec:	e25b      	b.n	80023a6 <__aeabi_dsub+0x72a>
 8001eee:	4661      	mov	r1, ip
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	0027      	movs	r7, r4
 8001ef4:	1a5b      	subs	r3, r3, r1
 8001ef6:	0005      	movs	r5, r0
 8001ef8:	4098      	lsls	r0, r3
 8001efa:	409f      	lsls	r7, r3
 8001efc:	40cd      	lsrs	r5, r1
 8001efe:	1e43      	subs	r3, r0, #1
 8001f00:	4198      	sbcs	r0, r3
 8001f02:	40cc      	lsrs	r4, r1
 8001f04:	432f      	orrs	r7, r5
 8001f06:	4307      	orrs	r7, r0
 8001f08:	44a3      	add	fp, r4
 8001f0a:	18bf      	adds	r7, r7, r2
 8001f0c:	4297      	cmp	r7, r2
 8001f0e:	4192      	sbcs	r2, r2
 8001f10:	4252      	negs	r2, r2
 8001f12:	445a      	add	r2, fp
 8001f14:	0014      	movs	r4, r2
 8001f16:	464d      	mov	r5, r9
 8001f18:	e787      	b.n	8001e2a <__aeabi_dsub+0x1ae>
 8001f1a:	4f34      	ldr	r7, [pc, #208]	@ (8001fec <__aeabi_dsub+0x370>)
 8001f1c:	1c6b      	adds	r3, r5, #1
 8001f1e:	423b      	tst	r3, r7
 8001f20:	d000      	beq.n	8001f24 <__aeabi_dsub+0x2a8>
 8001f22:	e0b6      	b.n	8002092 <__aeabi_dsub+0x416>
 8001f24:	4659      	mov	r1, fp
 8001f26:	0023      	movs	r3, r4
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	000f      	movs	r7, r1
 8001f2c:	4303      	orrs	r3, r0
 8001f2e:	2d00      	cmp	r5, #0
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x2b8>
 8001f32:	e126      	b.n	8002182 <__aeabi_dsub+0x506>
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dsub+0x2be>
 8001f38:	e1c0      	b.n	80022bc <__aeabi_dsub+0x640>
 8001f3a:	2900      	cmp	r1, #0
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x2c4>
 8001f3e:	e0a1      	b.n	8002084 <__aeabi_dsub+0x408>
 8001f40:	1a83      	subs	r3, r0, r2
 8001f42:	4698      	mov	r8, r3
 8001f44:	465b      	mov	r3, fp
 8001f46:	4540      	cmp	r0, r8
 8001f48:	41ad      	sbcs	r5, r5
 8001f4a:	1ae3      	subs	r3, r4, r3
 8001f4c:	426d      	negs	r5, r5
 8001f4e:	1b5b      	subs	r3, r3, r5
 8001f50:	2580      	movs	r5, #128	@ 0x80
 8001f52:	042d      	lsls	r5, r5, #16
 8001f54:	422b      	tst	r3, r5
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x2de>
 8001f58:	e14b      	b.n	80021f2 <__aeabi_dsub+0x576>
 8001f5a:	465b      	mov	r3, fp
 8001f5c:	1a10      	subs	r0, r2, r0
 8001f5e:	4282      	cmp	r2, r0
 8001f60:	4192      	sbcs	r2, r2
 8001f62:	1b1c      	subs	r4, r3, r4
 8001f64:	0007      	movs	r7, r0
 8001f66:	2601      	movs	r6, #1
 8001f68:	4663      	mov	r3, ip
 8001f6a:	4252      	negs	r2, r2
 8001f6c:	1aa4      	subs	r4, r4, r2
 8001f6e:	4327      	orrs	r7, r4
 8001f70:	401e      	ands	r6, r3
 8001f72:	2f00      	cmp	r7, #0
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x2fc>
 8001f76:	e142      	b.n	80021fe <__aeabi_dsub+0x582>
 8001f78:	422c      	tst	r4, r5
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x302>
 8001f7c:	e26d      	b.n	800245a <__aeabi_dsub+0x7de>
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <__aeabi_dsub+0x368>)
 8001f80:	2501      	movs	r5, #1
 8001f82:	401c      	ands	r4, r3
 8001f84:	e71b      	b.n	8001dbe <__aeabi_dsub+0x142>
 8001f86:	42bd      	cmp	r5, r7
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x310>
 8001f8a:	e13b      	b.n	8002204 <__aeabi_dsub+0x588>
 8001f8c:	2701      	movs	r7, #1
 8001f8e:	2b38      	cmp	r3, #56	@ 0x38
 8001f90:	dd00      	ble.n	8001f94 <__aeabi_dsub+0x318>
 8001f92:	e745      	b.n	8001e20 <__aeabi_dsub+0x1a4>
 8001f94:	2780      	movs	r7, #128	@ 0x80
 8001f96:	4659      	mov	r1, fp
 8001f98:	043f      	lsls	r7, r7, #16
 8001f9a:	4339      	orrs	r1, r7
 8001f9c:	468b      	mov	fp, r1
 8001f9e:	e72a      	b.n	8001df6 <__aeabi_dsub+0x17a>
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	2700      	movs	r7, #0
 8001fa4:	052d      	lsls	r5, r5, #20
 8001fa6:	4325      	orrs	r5, r4
 8001fa8:	07f6      	lsls	r6, r6, #31
 8001faa:	4335      	orrs	r5, r6
 8001fac:	0038      	movs	r0, r7
 8001fae:	0029      	movs	r1, r5
 8001fb0:	b003      	add	sp, #12
 8001fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb4:	46bb      	mov	fp, r7
 8001fb6:	46b2      	mov	sl, r6
 8001fb8:	46a9      	mov	r9, r5
 8001fba:	46a0      	mov	r8, r4
 8001fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbe:	077b      	lsls	r3, r7, #29
 8001fc0:	d004      	beq.n	8001fcc <__aeabi_dsub+0x350>
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	403b      	ands	r3, r7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d000      	beq.n	8001fcc <__aeabi_dsub+0x350>
 8001fca:	e6e7      	b.n	8001d9c <__aeabi_dsub+0x120>
 8001fcc:	002b      	movs	r3, r5
 8001fce:	08f8      	lsrs	r0, r7, #3
 8001fd0:	4a03      	ldr	r2, [pc, #12]	@ (8001fe0 <__aeabi_dsub+0x364>)
 8001fd2:	0767      	lsls	r7, r4, #29
 8001fd4:	4307      	orrs	r7, r0
 8001fd6:	08e5      	lsrs	r5, r4, #3
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x362>
 8001fdc:	e74a      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 8001fde:	e0a5      	b.n	800212c <__aeabi_dsub+0x4b0>
 8001fe0:	000007ff 	.word	0x000007ff
 8001fe4:	ff7fffff 	.word	0xff7fffff
 8001fe8:	fffff801 	.word	0xfffff801
 8001fec:	000007fe 	.word	0x000007fe
 8001ff0:	0038      	movs	r0, r7
 8001ff2:	f000 fbc7 	bl	8002784 <__clzsi2>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	2b1f      	cmp	r3, #31
 8001ffc:	dc00      	bgt.n	8002000 <__aeabi_dsub+0x384>
 8001ffe:	e6a7      	b.n	8001d50 <__aeabi_dsub+0xd4>
 8002000:	003a      	movs	r2, r7
 8002002:	3808      	subs	r0, #8
 8002004:	4082      	lsls	r2, r0
 8002006:	429d      	cmp	r5, r3
 8002008:	dd00      	ble.n	800200c <__aeabi_dsub+0x390>
 800200a:	e08a      	b.n	8002122 <__aeabi_dsub+0x4a6>
 800200c:	1b5b      	subs	r3, r3, r5
 800200e:	1c58      	adds	r0, r3, #1
 8002010:	281f      	cmp	r0, #31
 8002012:	dc00      	bgt.n	8002016 <__aeabi_dsub+0x39a>
 8002014:	e1d8      	b.n	80023c8 <__aeabi_dsub+0x74c>
 8002016:	0017      	movs	r7, r2
 8002018:	3b1f      	subs	r3, #31
 800201a:	40df      	lsrs	r7, r3
 800201c:	2820      	cmp	r0, #32
 800201e:	d005      	beq.n	800202c <__aeabi_dsub+0x3b0>
 8002020:	2340      	movs	r3, #64	@ 0x40
 8002022:	1a1b      	subs	r3, r3, r0
 8002024:	409a      	lsls	r2, r3
 8002026:	1e53      	subs	r3, r2, #1
 8002028:	419a      	sbcs	r2, r3
 800202a:	4317      	orrs	r7, r2
 800202c:	2500      	movs	r5, #0
 800202e:	2f00      	cmp	r7, #0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x3b8>
 8002032:	e0e5      	b.n	8002200 <__aeabi_dsub+0x584>
 8002034:	077b      	lsls	r3, r7, #29
 8002036:	d000      	beq.n	800203a <__aeabi_dsub+0x3be>
 8002038:	e6ab      	b.n	8001d92 <__aeabi_dsub+0x116>
 800203a:	002c      	movs	r4, r5
 800203c:	e7c6      	b.n	8001fcc <__aeabi_dsub+0x350>
 800203e:	08c0      	lsrs	r0, r0, #3
 8002040:	e7c6      	b.n	8001fd0 <__aeabi_dsub+0x354>
 8002042:	2700      	movs	r7, #0
 8002044:	2400      	movs	r4, #0
 8002046:	4dd1      	ldr	r5, [pc, #836]	@ (800238c <__aeabi_dsub+0x710>)
 8002048:	e7ac      	b.n	8001fa4 <__aeabi_dsub+0x328>
 800204a:	4fd1      	ldr	r7, [pc, #836]	@ (8002390 <__aeabi_dsub+0x714>)
 800204c:	1c6b      	adds	r3, r5, #1
 800204e:	423b      	tst	r3, r7
 8002050:	d171      	bne.n	8002136 <__aeabi_dsub+0x4ba>
 8002052:	0023      	movs	r3, r4
 8002054:	4303      	orrs	r3, r0
 8002056:	2d00      	cmp	r5, #0
 8002058:	d000      	beq.n	800205c <__aeabi_dsub+0x3e0>
 800205a:	e14e      	b.n	80022fa <__aeabi_dsub+0x67e>
 800205c:	4657      	mov	r7, sl
 800205e:	2b00      	cmp	r3, #0
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x3e8>
 8002062:	e1b5      	b.n	80023d0 <__aeabi_dsub+0x754>
 8002064:	2f00      	cmp	r7, #0
 8002066:	d00d      	beq.n	8002084 <__aeabi_dsub+0x408>
 8002068:	1883      	adds	r3, r0, r2
 800206a:	4283      	cmp	r3, r0
 800206c:	4180      	sbcs	r0, r0
 800206e:	445c      	add	r4, fp
 8002070:	4240      	negs	r0, r0
 8002072:	1824      	adds	r4, r4, r0
 8002074:	0222      	lsls	r2, r4, #8
 8002076:	d500      	bpl.n	800207a <__aeabi_dsub+0x3fe>
 8002078:	e1c8      	b.n	800240c <__aeabi_dsub+0x790>
 800207a:	001f      	movs	r7, r3
 800207c:	4698      	mov	r8, r3
 800207e:	4327      	orrs	r7, r4
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x408>
 8002082:	e0bc      	b.n	80021fe <__aeabi_dsub+0x582>
 8002084:	4643      	mov	r3, r8
 8002086:	0767      	lsls	r7, r4, #29
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	431f      	orrs	r7, r3
 800208c:	08e5      	lsrs	r5, r4, #3
 800208e:	2300      	movs	r3, #0
 8002090:	e04c      	b.n	800212c <__aeabi_dsub+0x4b0>
 8002092:	1a83      	subs	r3, r0, r2
 8002094:	4698      	mov	r8, r3
 8002096:	465b      	mov	r3, fp
 8002098:	4540      	cmp	r0, r8
 800209a:	41bf      	sbcs	r7, r7
 800209c:	1ae3      	subs	r3, r4, r3
 800209e:	427f      	negs	r7, r7
 80020a0:	1bdb      	subs	r3, r3, r7
 80020a2:	021f      	lsls	r7, r3, #8
 80020a4:	d47c      	bmi.n	80021a0 <__aeabi_dsub+0x524>
 80020a6:	4647      	mov	r7, r8
 80020a8:	431f      	orrs	r7, r3
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x432>
 80020ac:	e0a6      	b.n	80021fc <__aeabi_dsub+0x580>
 80020ae:	001c      	movs	r4, r3
 80020b0:	4647      	mov	r7, r8
 80020b2:	e645      	b.n	8001d40 <__aeabi_dsub+0xc4>
 80020b4:	4cb7      	ldr	r4, [pc, #732]	@ (8002394 <__aeabi_dsub+0x718>)
 80020b6:	1aed      	subs	r5, r5, r3
 80020b8:	4014      	ands	r4, r2
 80020ba:	077b      	lsls	r3, r7, #29
 80020bc:	d000      	beq.n	80020c0 <__aeabi_dsub+0x444>
 80020be:	e780      	b.n	8001fc2 <__aeabi_dsub+0x346>
 80020c0:	e784      	b.n	8001fcc <__aeabi_dsub+0x350>
 80020c2:	464b      	mov	r3, r9
 80020c4:	0025      	movs	r5, r4
 80020c6:	4305      	orrs	r5, r0
 80020c8:	d066      	beq.n	8002198 <__aeabi_dsub+0x51c>
 80020ca:	1e5f      	subs	r7, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x456>
 80020d0:	e0fc      	b.n	80022cc <__aeabi_dsub+0x650>
 80020d2:	4dae      	ldr	r5, [pc, #696]	@ (800238c <__aeabi_dsub+0x710>)
 80020d4:	42ab      	cmp	r3, r5
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x45e>
 80020d8:	e15e      	b.n	8002398 <__aeabi_dsub+0x71c>
 80020da:	4666      	mov	r6, ip
 80020dc:	2f38      	cmp	r7, #56	@ 0x38
 80020de:	dc00      	bgt.n	80020e2 <__aeabi_dsub+0x466>
 80020e0:	e0b4      	b.n	800224c <__aeabi_dsub+0x5d0>
 80020e2:	2001      	movs	r0, #1
 80020e4:	1a17      	subs	r7, r2, r0
 80020e6:	42ba      	cmp	r2, r7
 80020e8:	4192      	sbcs	r2, r2
 80020ea:	465b      	mov	r3, fp
 80020ec:	4252      	negs	r2, r2
 80020ee:	464d      	mov	r5, r9
 80020f0:	1a9c      	subs	r4, r3, r2
 80020f2:	e620      	b.n	8001d36 <__aeabi_dsub+0xba>
 80020f4:	0767      	lsls	r7, r4, #29
 80020f6:	08c0      	lsrs	r0, r0, #3
 80020f8:	4307      	orrs	r7, r0
 80020fa:	08e5      	lsrs	r5, r4, #3
 80020fc:	e6ba      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 80020fe:	001f      	movs	r7, r3
 8002100:	4659      	mov	r1, fp
 8002102:	3f20      	subs	r7, #32
 8002104:	40f9      	lsrs	r1, r7
 8002106:	000f      	movs	r7, r1
 8002108:	2b20      	cmp	r3, #32
 800210a:	d005      	beq.n	8002118 <__aeabi_dsub+0x49c>
 800210c:	2140      	movs	r1, #64	@ 0x40
 800210e:	1acb      	subs	r3, r1, r3
 8002110:	4659      	mov	r1, fp
 8002112:	4099      	lsls	r1, r3
 8002114:	430a      	orrs	r2, r1
 8002116:	4692      	mov	sl, r2
 8002118:	4653      	mov	r3, sl
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	4193      	sbcs	r3, r2
 800211e:	431f      	orrs	r7, r3
 8002120:	e604      	b.n	8001d2c <__aeabi_dsub+0xb0>
 8002122:	1aeb      	subs	r3, r5, r3
 8002124:	4d9b      	ldr	r5, [pc, #620]	@ (8002394 <__aeabi_dsub+0x718>)
 8002126:	4015      	ands	r5, r2
 8002128:	076f      	lsls	r7, r5, #29
 800212a:	08ed      	lsrs	r5, r5, #3
 800212c:	032c      	lsls	r4, r5, #12
 800212e:	055d      	lsls	r5, r3, #21
 8002130:	0b24      	lsrs	r4, r4, #12
 8002132:	0d6d      	lsrs	r5, r5, #21
 8002134:	e736      	b.n	8001fa4 <__aeabi_dsub+0x328>
 8002136:	4d95      	ldr	r5, [pc, #596]	@ (800238c <__aeabi_dsub+0x710>)
 8002138:	42ab      	cmp	r3, r5
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x4c2>
 800213c:	e0d6      	b.n	80022ec <__aeabi_dsub+0x670>
 800213e:	1882      	adds	r2, r0, r2
 8002140:	0021      	movs	r1, r4
 8002142:	4282      	cmp	r2, r0
 8002144:	4180      	sbcs	r0, r0
 8002146:	4459      	add	r1, fp
 8002148:	4240      	negs	r0, r0
 800214a:	1808      	adds	r0, r1, r0
 800214c:	07c7      	lsls	r7, r0, #31
 800214e:	0852      	lsrs	r2, r2, #1
 8002150:	4317      	orrs	r7, r2
 8002152:	0844      	lsrs	r4, r0, #1
 8002154:	0752      	lsls	r2, r2, #29
 8002156:	d400      	bmi.n	800215a <__aeabi_dsub+0x4de>
 8002158:	e185      	b.n	8002466 <__aeabi_dsub+0x7ea>
 800215a:	220f      	movs	r2, #15
 800215c:	001d      	movs	r5, r3
 800215e:	403a      	ands	r2, r7
 8002160:	2a04      	cmp	r2, #4
 8002162:	d000      	beq.n	8002166 <__aeabi_dsub+0x4ea>
 8002164:	e61a      	b.n	8001d9c <__aeabi_dsub+0x120>
 8002166:	08ff      	lsrs	r7, r7, #3
 8002168:	0764      	lsls	r4, r4, #29
 800216a:	4327      	orrs	r7, r4
 800216c:	0905      	lsrs	r5, r0, #4
 800216e:	e7dd      	b.n	800212c <__aeabi_dsub+0x4b0>
 8002170:	465b      	mov	r3, fp
 8002172:	08d2      	lsrs	r2, r2, #3
 8002174:	075f      	lsls	r7, r3, #29
 8002176:	4317      	orrs	r7, r2
 8002178:	08dd      	lsrs	r5, r3, #3
 800217a:	e67b      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 800217c:	2700      	movs	r7, #0
 800217e:	2400      	movs	r4, #0
 8002180:	e710      	b.n	8001fa4 <__aeabi_dsub+0x328>
 8002182:	2b00      	cmp	r3, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x50c>
 8002186:	e0d6      	b.n	8002336 <__aeabi_dsub+0x6ba>
 8002188:	2900      	cmp	r1, #0
 800218a:	d000      	beq.n	800218e <__aeabi_dsub+0x512>
 800218c:	e12f      	b.n	80023ee <__aeabi_dsub+0x772>
 800218e:	2480      	movs	r4, #128	@ 0x80
 8002190:	2600      	movs	r6, #0
 8002192:	4d7e      	ldr	r5, [pc, #504]	@ (800238c <__aeabi_dsub+0x710>)
 8002194:	0324      	lsls	r4, r4, #12
 8002196:	e705      	b.n	8001fa4 <__aeabi_dsub+0x328>
 8002198:	4666      	mov	r6, ip
 800219a:	465c      	mov	r4, fp
 800219c:	08d0      	lsrs	r0, r2, #3
 800219e:	e717      	b.n	8001fd0 <__aeabi_dsub+0x354>
 80021a0:	465b      	mov	r3, fp
 80021a2:	1a17      	subs	r7, r2, r0
 80021a4:	42ba      	cmp	r2, r7
 80021a6:	4192      	sbcs	r2, r2
 80021a8:	1b1c      	subs	r4, r3, r4
 80021aa:	2601      	movs	r6, #1
 80021ac:	4663      	mov	r3, ip
 80021ae:	4252      	negs	r2, r2
 80021b0:	1aa4      	subs	r4, r4, r2
 80021b2:	401e      	ands	r6, r3
 80021b4:	e5c4      	b.n	8001d40 <__aeabi_dsub+0xc4>
 80021b6:	1883      	adds	r3, r0, r2
 80021b8:	4283      	cmp	r3, r0
 80021ba:	4180      	sbcs	r0, r0
 80021bc:	445c      	add	r4, fp
 80021be:	4240      	negs	r0, r0
 80021c0:	1825      	adds	r5, r4, r0
 80021c2:	022a      	lsls	r2, r5, #8
 80021c4:	d400      	bmi.n	80021c8 <__aeabi_dsub+0x54c>
 80021c6:	e0da      	b.n	800237e <__aeabi_dsub+0x702>
 80021c8:	4a72      	ldr	r2, [pc, #456]	@ (8002394 <__aeabi_dsub+0x718>)
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	4015      	ands	r5, r2
 80021ce:	07ea      	lsls	r2, r5, #31
 80021d0:	431a      	orrs	r2, r3
 80021d2:	0869      	lsrs	r1, r5, #1
 80021d4:	075b      	lsls	r3, r3, #29
 80021d6:	d400      	bmi.n	80021da <__aeabi_dsub+0x55e>
 80021d8:	e14a      	b.n	8002470 <__aeabi_dsub+0x7f4>
 80021da:	230f      	movs	r3, #15
 80021dc:	4013      	ands	r3, r2
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x568>
 80021e2:	e0fc      	b.n	80023de <__aeabi_dsub+0x762>
 80021e4:	1d17      	adds	r7, r2, #4
 80021e6:	4297      	cmp	r7, r2
 80021e8:	41a4      	sbcs	r4, r4
 80021ea:	4264      	negs	r4, r4
 80021ec:	2502      	movs	r5, #2
 80021ee:	1864      	adds	r4, r4, r1
 80021f0:	e6ec      	b.n	8001fcc <__aeabi_dsub+0x350>
 80021f2:	4647      	mov	r7, r8
 80021f4:	001c      	movs	r4, r3
 80021f6:	431f      	orrs	r7, r3
 80021f8:	d000      	beq.n	80021fc <__aeabi_dsub+0x580>
 80021fa:	e743      	b.n	8002084 <__aeabi_dsub+0x408>
 80021fc:	2600      	movs	r6, #0
 80021fe:	2500      	movs	r5, #0
 8002200:	2400      	movs	r4, #0
 8002202:	e6cf      	b.n	8001fa4 <__aeabi_dsub+0x328>
 8002204:	08c0      	lsrs	r0, r0, #3
 8002206:	0767      	lsls	r7, r4, #29
 8002208:	4307      	orrs	r7, r0
 800220a:	08e5      	lsrs	r5, r4, #3
 800220c:	e632      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 800220e:	1a87      	subs	r7, r0, r2
 8002210:	465b      	mov	r3, fp
 8002212:	42b8      	cmp	r0, r7
 8002214:	4180      	sbcs	r0, r0
 8002216:	1ae4      	subs	r4, r4, r3
 8002218:	4240      	negs	r0, r0
 800221a:	1a24      	subs	r4, r4, r0
 800221c:	0223      	lsls	r3, r4, #8
 800221e:	d428      	bmi.n	8002272 <__aeabi_dsub+0x5f6>
 8002220:	0763      	lsls	r3, r4, #29
 8002222:	08ff      	lsrs	r7, r7, #3
 8002224:	431f      	orrs	r7, r3
 8002226:	08e5      	lsrs	r5, r4, #3
 8002228:	2301      	movs	r3, #1
 800222a:	e77f      	b.n	800212c <__aeabi_dsub+0x4b0>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d100      	bne.n	8002232 <__aeabi_dsub+0x5b6>
 8002230:	e673      	b.n	8001f1a <__aeabi_dsub+0x29e>
 8002232:	464b      	mov	r3, r9
 8002234:	1b5f      	subs	r7, r3, r5
 8002236:	003b      	movs	r3, r7
 8002238:	2d00      	cmp	r5, #0
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x5c2>
 800223c:	e742      	b.n	80020c4 <__aeabi_dsub+0x448>
 800223e:	2f38      	cmp	r7, #56	@ 0x38
 8002240:	dd00      	ble.n	8002244 <__aeabi_dsub+0x5c8>
 8002242:	e0ec      	b.n	800241e <__aeabi_dsub+0x7a2>
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	000e      	movs	r6, r1
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	431c      	orrs	r4, r3
 800224c:	2f1f      	cmp	r7, #31
 800224e:	dc25      	bgt.n	800229c <__aeabi_dsub+0x620>
 8002250:	2520      	movs	r5, #32
 8002252:	0023      	movs	r3, r4
 8002254:	1bed      	subs	r5, r5, r7
 8002256:	0001      	movs	r1, r0
 8002258:	40a8      	lsls	r0, r5
 800225a:	40ab      	lsls	r3, r5
 800225c:	40f9      	lsrs	r1, r7
 800225e:	1e45      	subs	r5, r0, #1
 8002260:	41a8      	sbcs	r0, r5
 8002262:	430b      	orrs	r3, r1
 8002264:	40fc      	lsrs	r4, r7
 8002266:	4318      	orrs	r0, r3
 8002268:	465b      	mov	r3, fp
 800226a:	1b1b      	subs	r3, r3, r4
 800226c:	469b      	mov	fp, r3
 800226e:	e739      	b.n	80020e4 <__aeabi_dsub+0x468>
 8002270:	4666      	mov	r6, ip
 8002272:	2501      	movs	r5, #1
 8002274:	e562      	b.n	8001d3c <__aeabi_dsub+0xc0>
 8002276:	001f      	movs	r7, r3
 8002278:	4659      	mov	r1, fp
 800227a:	3f20      	subs	r7, #32
 800227c:	40f9      	lsrs	r1, r7
 800227e:	468c      	mov	ip, r1
 8002280:	2b20      	cmp	r3, #32
 8002282:	d005      	beq.n	8002290 <__aeabi_dsub+0x614>
 8002284:	2740      	movs	r7, #64	@ 0x40
 8002286:	4659      	mov	r1, fp
 8002288:	1afb      	subs	r3, r7, r3
 800228a:	4099      	lsls	r1, r3
 800228c:	430a      	orrs	r2, r1
 800228e:	4692      	mov	sl, r2
 8002290:	4657      	mov	r7, sl
 8002292:	1e7b      	subs	r3, r7, #1
 8002294:	419f      	sbcs	r7, r3
 8002296:	4663      	mov	r3, ip
 8002298:	431f      	orrs	r7, r3
 800229a:	e5c1      	b.n	8001e20 <__aeabi_dsub+0x1a4>
 800229c:	003b      	movs	r3, r7
 800229e:	0025      	movs	r5, r4
 80022a0:	3b20      	subs	r3, #32
 80022a2:	40dd      	lsrs	r5, r3
 80022a4:	2f20      	cmp	r7, #32
 80022a6:	d004      	beq.n	80022b2 <__aeabi_dsub+0x636>
 80022a8:	2340      	movs	r3, #64	@ 0x40
 80022aa:	1bdb      	subs	r3, r3, r7
 80022ac:	409c      	lsls	r4, r3
 80022ae:	4320      	orrs	r0, r4
 80022b0:	4680      	mov	r8, r0
 80022b2:	4640      	mov	r0, r8
 80022b4:	1e43      	subs	r3, r0, #1
 80022b6:	4198      	sbcs	r0, r3
 80022b8:	4328      	orrs	r0, r5
 80022ba:	e713      	b.n	80020e4 <__aeabi_dsub+0x468>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d09d      	beq.n	80021fc <__aeabi_dsub+0x580>
 80022c0:	2601      	movs	r6, #1
 80022c2:	4663      	mov	r3, ip
 80022c4:	465c      	mov	r4, fp
 80022c6:	4690      	mov	r8, r2
 80022c8:	401e      	ands	r6, r3
 80022ca:	e6db      	b.n	8002084 <__aeabi_dsub+0x408>
 80022cc:	1a17      	subs	r7, r2, r0
 80022ce:	465b      	mov	r3, fp
 80022d0:	42ba      	cmp	r2, r7
 80022d2:	4192      	sbcs	r2, r2
 80022d4:	1b1c      	subs	r4, r3, r4
 80022d6:	4252      	negs	r2, r2
 80022d8:	1aa4      	subs	r4, r4, r2
 80022da:	0223      	lsls	r3, r4, #8
 80022dc:	d4c8      	bmi.n	8002270 <__aeabi_dsub+0x5f4>
 80022de:	0763      	lsls	r3, r4, #29
 80022e0:	08ff      	lsrs	r7, r7, #3
 80022e2:	431f      	orrs	r7, r3
 80022e4:	4666      	mov	r6, ip
 80022e6:	2301      	movs	r3, #1
 80022e8:	08e5      	lsrs	r5, r4, #3
 80022ea:	e71f      	b.n	800212c <__aeabi_dsub+0x4b0>
 80022ec:	001d      	movs	r5, r3
 80022ee:	2400      	movs	r4, #0
 80022f0:	2700      	movs	r7, #0
 80022f2:	e657      	b.n	8001fa4 <__aeabi_dsub+0x328>
 80022f4:	465c      	mov	r4, fp
 80022f6:	08d0      	lsrs	r0, r2, #3
 80022f8:	e66a      	b.n	8001fd0 <__aeabi_dsub+0x354>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x684>
 80022fe:	e737      	b.n	8002170 <__aeabi_dsub+0x4f4>
 8002300:	4653      	mov	r3, sl
 8002302:	08c0      	lsrs	r0, r0, #3
 8002304:	0767      	lsls	r7, r4, #29
 8002306:	4307      	orrs	r7, r0
 8002308:	08e5      	lsrs	r5, r4, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x694>
 800230e:	e5b1      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	031b      	lsls	r3, r3, #12
 8002314:	421d      	tst	r5, r3
 8002316:	d008      	beq.n	800232a <__aeabi_dsub+0x6ae>
 8002318:	4659      	mov	r1, fp
 800231a:	08c8      	lsrs	r0, r1, #3
 800231c:	4218      	tst	r0, r3
 800231e:	d104      	bne.n	800232a <__aeabi_dsub+0x6ae>
 8002320:	08d2      	lsrs	r2, r2, #3
 8002322:	0749      	lsls	r1, r1, #29
 8002324:	430a      	orrs	r2, r1
 8002326:	0017      	movs	r7, r2
 8002328:	0005      	movs	r5, r0
 800232a:	0f7b      	lsrs	r3, r7, #29
 800232c:	00ff      	lsls	r7, r7, #3
 800232e:	08ff      	lsrs	r7, r7, #3
 8002330:	075b      	lsls	r3, r3, #29
 8002332:	431f      	orrs	r7, r3
 8002334:	e59e      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 8002336:	08c0      	lsrs	r0, r0, #3
 8002338:	0763      	lsls	r3, r4, #29
 800233a:	4318      	orrs	r0, r3
 800233c:	08e5      	lsrs	r5, r4, #3
 800233e:	2900      	cmp	r1, #0
 8002340:	d053      	beq.n	80023ea <__aeabi_dsub+0x76e>
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	031b      	lsls	r3, r3, #12
 8002346:	421d      	tst	r5, r3
 8002348:	d00a      	beq.n	8002360 <__aeabi_dsub+0x6e4>
 800234a:	4659      	mov	r1, fp
 800234c:	08cc      	lsrs	r4, r1, #3
 800234e:	421c      	tst	r4, r3
 8002350:	d106      	bne.n	8002360 <__aeabi_dsub+0x6e4>
 8002352:	2601      	movs	r6, #1
 8002354:	4663      	mov	r3, ip
 8002356:	0025      	movs	r5, r4
 8002358:	08d0      	lsrs	r0, r2, #3
 800235a:	0749      	lsls	r1, r1, #29
 800235c:	4308      	orrs	r0, r1
 800235e:	401e      	ands	r6, r3
 8002360:	0f47      	lsrs	r7, r0, #29
 8002362:	00c0      	lsls	r0, r0, #3
 8002364:	08c0      	lsrs	r0, r0, #3
 8002366:	077f      	lsls	r7, r7, #29
 8002368:	4307      	orrs	r7, r0
 800236a:	e583      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 800236c:	1883      	adds	r3, r0, r2
 800236e:	4293      	cmp	r3, r2
 8002370:	4192      	sbcs	r2, r2
 8002372:	445c      	add	r4, fp
 8002374:	4252      	negs	r2, r2
 8002376:	18a5      	adds	r5, r4, r2
 8002378:	022a      	lsls	r2, r5, #8
 800237a:	d500      	bpl.n	800237e <__aeabi_dsub+0x702>
 800237c:	e724      	b.n	80021c8 <__aeabi_dsub+0x54c>
 800237e:	076f      	lsls	r7, r5, #29
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	431f      	orrs	r7, r3
 8002384:	08ed      	lsrs	r5, r5, #3
 8002386:	2301      	movs	r3, #1
 8002388:	e6d0      	b.n	800212c <__aeabi_dsub+0x4b0>
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	000007ff 	.word	0x000007ff
 8002390:	000007fe 	.word	0x000007fe
 8002394:	ff7fffff 	.word	0xff7fffff
 8002398:	465b      	mov	r3, fp
 800239a:	08d2      	lsrs	r2, r2, #3
 800239c:	075f      	lsls	r7, r3, #29
 800239e:	4666      	mov	r6, ip
 80023a0:	4317      	orrs	r7, r2
 80023a2:	08dd      	lsrs	r5, r3, #3
 80023a4:	e566      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 80023a6:	0025      	movs	r5, r4
 80023a8:	3b20      	subs	r3, #32
 80023aa:	40dd      	lsrs	r5, r3
 80023ac:	4663      	mov	r3, ip
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d005      	beq.n	80023be <__aeabi_dsub+0x742>
 80023b2:	2340      	movs	r3, #64	@ 0x40
 80023b4:	4661      	mov	r1, ip
 80023b6:	1a5b      	subs	r3, r3, r1
 80023b8:	409c      	lsls	r4, r3
 80023ba:	4320      	orrs	r0, r4
 80023bc:	4680      	mov	r8, r0
 80023be:	4647      	mov	r7, r8
 80023c0:	1e7b      	subs	r3, r7, #1
 80023c2:	419f      	sbcs	r7, r3
 80023c4:	432f      	orrs	r7, r5
 80023c6:	e5a0      	b.n	8001f0a <__aeabi_dsub+0x28e>
 80023c8:	2120      	movs	r1, #32
 80023ca:	2700      	movs	r7, #0
 80023cc:	1a09      	subs	r1, r1, r0
 80023ce:	e4d2      	b.n	8001d76 <__aeabi_dsub+0xfa>
 80023d0:	2f00      	cmp	r7, #0
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dsub+0x75a>
 80023d4:	e713      	b.n	80021fe <__aeabi_dsub+0x582>
 80023d6:	465c      	mov	r4, fp
 80023d8:	0017      	movs	r7, r2
 80023da:	2500      	movs	r5, #0
 80023dc:	e5f6      	b.n	8001fcc <__aeabi_dsub+0x350>
 80023de:	08d7      	lsrs	r7, r2, #3
 80023e0:	0749      	lsls	r1, r1, #29
 80023e2:	2302      	movs	r3, #2
 80023e4:	430f      	orrs	r7, r1
 80023e6:	092d      	lsrs	r5, r5, #4
 80023e8:	e6a0      	b.n	800212c <__aeabi_dsub+0x4b0>
 80023ea:	0007      	movs	r7, r0
 80023ec:	e542      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 80023ee:	465b      	mov	r3, fp
 80023f0:	2601      	movs	r6, #1
 80023f2:	075f      	lsls	r7, r3, #29
 80023f4:	08dd      	lsrs	r5, r3, #3
 80023f6:	4663      	mov	r3, ip
 80023f8:	08d2      	lsrs	r2, r2, #3
 80023fa:	4317      	orrs	r7, r2
 80023fc:	401e      	ands	r6, r3
 80023fe:	e539      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 8002400:	465b      	mov	r3, fp
 8002402:	08d2      	lsrs	r2, r2, #3
 8002404:	075f      	lsls	r7, r3, #29
 8002406:	4317      	orrs	r7, r2
 8002408:	08dd      	lsrs	r5, r3, #3
 800240a:	e533      	b.n	8001e74 <__aeabi_dsub+0x1f8>
 800240c:	4a1e      	ldr	r2, [pc, #120]	@ (8002488 <__aeabi_dsub+0x80c>)
 800240e:	08db      	lsrs	r3, r3, #3
 8002410:	4022      	ands	r2, r4
 8002412:	0757      	lsls	r7, r2, #29
 8002414:	0252      	lsls	r2, r2, #9
 8002416:	2501      	movs	r5, #1
 8002418:	431f      	orrs	r7, r3
 800241a:	0b14      	lsrs	r4, r2, #12
 800241c:	e5c2      	b.n	8001fa4 <__aeabi_dsub+0x328>
 800241e:	000e      	movs	r6, r1
 8002420:	2001      	movs	r0, #1
 8002422:	e65f      	b.n	80020e4 <__aeabi_dsub+0x468>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <__aeabi_dsub+0x7c8>
 8002428:	464b      	mov	r3, r9
 800242a:	1b5b      	subs	r3, r3, r5
 800242c:	469c      	mov	ip, r3
 800242e:	2d00      	cmp	r5, #0
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x7b8>
 8002432:	e548      	b.n	8001ec6 <__aeabi_dsub+0x24a>
 8002434:	2701      	movs	r7, #1
 8002436:	2b38      	cmp	r3, #56	@ 0x38
 8002438:	dd00      	ble.n	800243c <__aeabi_dsub+0x7c0>
 800243a:	e566      	b.n	8001f0a <__aeabi_dsub+0x28e>
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	431c      	orrs	r4, r3
 8002442:	e550      	b.n	8001ee6 <__aeabi_dsub+0x26a>
 8002444:	1c6b      	adds	r3, r5, #1
 8002446:	4d11      	ldr	r5, [pc, #68]	@ (800248c <__aeabi_dsub+0x810>)
 8002448:	422b      	tst	r3, r5
 800244a:	d000      	beq.n	800244e <__aeabi_dsub+0x7d2>
 800244c:	e673      	b.n	8002136 <__aeabi_dsub+0x4ba>
 800244e:	4659      	mov	r1, fp
 8002450:	0023      	movs	r3, r4
 8002452:	4311      	orrs	r1, r2
 8002454:	468a      	mov	sl, r1
 8002456:	4303      	orrs	r3, r0
 8002458:	e600      	b.n	800205c <__aeabi_dsub+0x3e0>
 800245a:	0767      	lsls	r7, r4, #29
 800245c:	08c0      	lsrs	r0, r0, #3
 800245e:	2300      	movs	r3, #0
 8002460:	4307      	orrs	r7, r0
 8002462:	08e5      	lsrs	r5, r4, #3
 8002464:	e662      	b.n	800212c <__aeabi_dsub+0x4b0>
 8002466:	0764      	lsls	r4, r4, #29
 8002468:	08ff      	lsrs	r7, r7, #3
 800246a:	4327      	orrs	r7, r4
 800246c:	0905      	lsrs	r5, r0, #4
 800246e:	e65d      	b.n	800212c <__aeabi_dsub+0x4b0>
 8002470:	08d2      	lsrs	r2, r2, #3
 8002472:	0749      	lsls	r1, r1, #29
 8002474:	4311      	orrs	r1, r2
 8002476:	000f      	movs	r7, r1
 8002478:	2302      	movs	r3, #2
 800247a:	092d      	lsrs	r5, r5, #4
 800247c:	e656      	b.n	800212c <__aeabi_dsub+0x4b0>
 800247e:	0007      	movs	r7, r0
 8002480:	e5a4      	b.n	8001fcc <__aeabi_dsub+0x350>
 8002482:	0038      	movs	r0, r7
 8002484:	e48f      	b.n	8001da6 <__aeabi_dsub+0x12a>
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	ff7fffff 	.word	0xff7fffff
 800248c:	000007fe 	.word	0x000007fe

08002490 <__aeabi_dcmpun>:
 8002490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002492:	46c6      	mov	lr, r8
 8002494:	031e      	lsls	r6, r3, #12
 8002496:	0b36      	lsrs	r6, r6, #12
 8002498:	46b0      	mov	r8, r6
 800249a:	4e0d      	ldr	r6, [pc, #52]	@ (80024d0 <__aeabi_dcmpun+0x40>)
 800249c:	030c      	lsls	r4, r1, #12
 800249e:	004d      	lsls	r5, r1, #1
 80024a0:	005f      	lsls	r7, r3, #1
 80024a2:	b500      	push	{lr}
 80024a4:	0b24      	lsrs	r4, r4, #12
 80024a6:	0d6d      	lsrs	r5, r5, #21
 80024a8:	0d7f      	lsrs	r7, r7, #21
 80024aa:	42b5      	cmp	r5, r6
 80024ac:	d00b      	beq.n	80024c6 <__aeabi_dcmpun+0x36>
 80024ae:	4908      	ldr	r1, [pc, #32]	@ (80024d0 <__aeabi_dcmpun+0x40>)
 80024b0:	2000      	movs	r0, #0
 80024b2:	428f      	cmp	r7, r1
 80024b4:	d104      	bne.n	80024c0 <__aeabi_dcmpun+0x30>
 80024b6:	4646      	mov	r6, r8
 80024b8:	4316      	orrs	r6, r2
 80024ba:	0030      	movs	r0, r6
 80024bc:	1e43      	subs	r3, r0, #1
 80024be:	4198      	sbcs	r0, r3
 80024c0:	bc80      	pop	{r7}
 80024c2:	46b8      	mov	r8, r7
 80024c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c6:	4304      	orrs	r4, r0
 80024c8:	2001      	movs	r0, #1
 80024ca:	2c00      	cmp	r4, #0
 80024cc:	d1f8      	bne.n	80024c0 <__aeabi_dcmpun+0x30>
 80024ce:	e7ee      	b.n	80024ae <__aeabi_dcmpun+0x1e>
 80024d0:	000007ff 	.word	0x000007ff

080024d4 <__aeabi_d2iz>:
 80024d4:	000b      	movs	r3, r1
 80024d6:	0002      	movs	r2, r0
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	4d16      	ldr	r5, [pc, #88]	@ (8002534 <__aeabi_d2iz+0x60>)
 80024dc:	030c      	lsls	r4, r1, #12
 80024de:	b082      	sub	sp, #8
 80024e0:	0049      	lsls	r1, r1, #1
 80024e2:	2000      	movs	r0, #0
 80024e4:	9200      	str	r2, [sp, #0]
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	0b24      	lsrs	r4, r4, #12
 80024ea:	0d49      	lsrs	r1, r1, #21
 80024ec:	0fde      	lsrs	r6, r3, #31
 80024ee:	42a9      	cmp	r1, r5
 80024f0:	dd04      	ble.n	80024fc <__aeabi_d2iz+0x28>
 80024f2:	4811      	ldr	r0, [pc, #68]	@ (8002538 <__aeabi_d2iz+0x64>)
 80024f4:	4281      	cmp	r1, r0
 80024f6:	dd03      	ble.n	8002500 <__aeabi_d2iz+0x2c>
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <__aeabi_d2iz+0x68>)
 80024fa:	18f0      	adds	r0, r6, r3
 80024fc:	b002      	add	sp, #8
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	2080      	movs	r0, #128	@ 0x80
 8002502:	0340      	lsls	r0, r0, #13
 8002504:	4320      	orrs	r0, r4
 8002506:	4c0e      	ldr	r4, [pc, #56]	@ (8002540 <__aeabi_d2iz+0x6c>)
 8002508:	1a64      	subs	r4, r4, r1
 800250a:	2c1f      	cmp	r4, #31
 800250c:	dd08      	ble.n	8002520 <__aeabi_d2iz+0x4c>
 800250e:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <__aeabi_d2iz+0x70>)
 8002510:	1a5b      	subs	r3, r3, r1
 8002512:	40d8      	lsrs	r0, r3
 8002514:	0003      	movs	r3, r0
 8002516:	4258      	negs	r0, r3
 8002518:	2e00      	cmp	r6, #0
 800251a:	d1ef      	bne.n	80024fc <__aeabi_d2iz+0x28>
 800251c:	0018      	movs	r0, r3
 800251e:	e7ed      	b.n	80024fc <__aeabi_d2iz+0x28>
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <__aeabi_d2iz+0x74>)
 8002522:	9a00      	ldr	r2, [sp, #0]
 8002524:	469c      	mov	ip, r3
 8002526:	0003      	movs	r3, r0
 8002528:	4461      	add	r1, ip
 800252a:	408b      	lsls	r3, r1
 800252c:	40e2      	lsrs	r2, r4
 800252e:	4313      	orrs	r3, r2
 8002530:	e7f1      	b.n	8002516 <__aeabi_d2iz+0x42>
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	000003fe 	.word	0x000003fe
 8002538:	0000041d 	.word	0x0000041d
 800253c:	7fffffff 	.word	0x7fffffff
 8002540:	00000433 	.word	0x00000433
 8002544:	00000413 	.word	0x00000413
 8002548:	fffffbed 	.word	0xfffffbed

0800254c <__aeabi_i2d>:
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	2800      	cmp	r0, #0
 8002550:	d016      	beq.n	8002580 <__aeabi_i2d+0x34>
 8002552:	17c3      	asrs	r3, r0, #31
 8002554:	18c5      	adds	r5, r0, r3
 8002556:	405d      	eors	r5, r3
 8002558:	0fc4      	lsrs	r4, r0, #31
 800255a:	0028      	movs	r0, r5
 800255c:	f000 f912 	bl	8002784 <__clzsi2>
 8002560:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <__aeabi_i2d+0x58>)
 8002562:	1a1b      	subs	r3, r3, r0
 8002564:	055b      	lsls	r3, r3, #21
 8002566:	0d5b      	lsrs	r3, r3, #21
 8002568:	280a      	cmp	r0, #10
 800256a:	dc14      	bgt.n	8002596 <__aeabi_i2d+0x4a>
 800256c:	0002      	movs	r2, r0
 800256e:	002e      	movs	r6, r5
 8002570:	3215      	adds	r2, #21
 8002572:	4096      	lsls	r6, r2
 8002574:	220b      	movs	r2, #11
 8002576:	1a12      	subs	r2, r2, r0
 8002578:	40d5      	lsrs	r5, r2
 800257a:	032d      	lsls	r5, r5, #12
 800257c:	0b2d      	lsrs	r5, r5, #12
 800257e:	e003      	b.n	8002588 <__aeabi_i2d+0x3c>
 8002580:	2400      	movs	r4, #0
 8002582:	2300      	movs	r3, #0
 8002584:	2500      	movs	r5, #0
 8002586:	2600      	movs	r6, #0
 8002588:	051b      	lsls	r3, r3, #20
 800258a:	432b      	orrs	r3, r5
 800258c:	07e4      	lsls	r4, r4, #31
 800258e:	4323      	orrs	r3, r4
 8002590:	0030      	movs	r0, r6
 8002592:	0019      	movs	r1, r3
 8002594:	bd70      	pop	{r4, r5, r6, pc}
 8002596:	380b      	subs	r0, #11
 8002598:	4085      	lsls	r5, r0
 800259a:	032d      	lsls	r5, r5, #12
 800259c:	2600      	movs	r6, #0
 800259e:	0b2d      	lsrs	r5, r5, #12
 80025a0:	e7f2      	b.n	8002588 <__aeabi_i2d+0x3c>
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	0000041e 	.word	0x0000041e

080025a8 <__aeabi_ui2d>:
 80025a8:	b510      	push	{r4, lr}
 80025aa:	1e04      	subs	r4, r0, #0
 80025ac:	d010      	beq.n	80025d0 <__aeabi_ui2d+0x28>
 80025ae:	f000 f8e9 	bl	8002784 <__clzsi2>
 80025b2:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <__aeabi_ui2d+0x44>)
 80025b4:	1a1b      	subs	r3, r3, r0
 80025b6:	055b      	lsls	r3, r3, #21
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	280a      	cmp	r0, #10
 80025bc:	dc0f      	bgt.n	80025de <__aeabi_ui2d+0x36>
 80025be:	220b      	movs	r2, #11
 80025c0:	0021      	movs	r1, r4
 80025c2:	1a12      	subs	r2, r2, r0
 80025c4:	40d1      	lsrs	r1, r2
 80025c6:	3015      	adds	r0, #21
 80025c8:	030a      	lsls	r2, r1, #12
 80025ca:	4084      	lsls	r4, r0
 80025cc:	0b12      	lsrs	r2, r2, #12
 80025ce:	e001      	b.n	80025d4 <__aeabi_ui2d+0x2c>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2200      	movs	r2, #0
 80025d4:	051b      	lsls	r3, r3, #20
 80025d6:	4313      	orrs	r3, r2
 80025d8:	0020      	movs	r0, r4
 80025da:	0019      	movs	r1, r3
 80025dc:	bd10      	pop	{r4, pc}
 80025de:	0022      	movs	r2, r4
 80025e0:	380b      	subs	r0, #11
 80025e2:	4082      	lsls	r2, r0
 80025e4:	0312      	lsls	r2, r2, #12
 80025e6:	2400      	movs	r4, #0
 80025e8:	0b12      	lsrs	r2, r2, #12
 80025ea:	e7f3      	b.n	80025d4 <__aeabi_ui2d+0x2c>
 80025ec:	0000041e 	.word	0x0000041e

080025f0 <__aeabi_f2d>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	0242      	lsls	r2, r0, #9
 80025f4:	0043      	lsls	r3, r0, #1
 80025f6:	0fc4      	lsrs	r4, r0, #31
 80025f8:	20fe      	movs	r0, #254	@ 0xfe
 80025fa:	0e1b      	lsrs	r3, r3, #24
 80025fc:	1c59      	adds	r1, r3, #1
 80025fe:	0a55      	lsrs	r5, r2, #9
 8002600:	4208      	tst	r0, r1
 8002602:	d00c      	beq.n	800261e <__aeabi_f2d+0x2e>
 8002604:	21e0      	movs	r1, #224	@ 0xe0
 8002606:	0089      	lsls	r1, r1, #2
 8002608:	468c      	mov	ip, r1
 800260a:	076d      	lsls	r5, r5, #29
 800260c:	0b12      	lsrs	r2, r2, #12
 800260e:	4463      	add	r3, ip
 8002610:	051b      	lsls	r3, r3, #20
 8002612:	4313      	orrs	r3, r2
 8002614:	07e4      	lsls	r4, r4, #31
 8002616:	4323      	orrs	r3, r4
 8002618:	0028      	movs	r0, r5
 800261a:	0019      	movs	r1, r3
 800261c:	bd70      	pop	{r4, r5, r6, pc}
 800261e:	2b00      	cmp	r3, #0
 8002620:	d114      	bne.n	800264c <__aeabi_f2d+0x5c>
 8002622:	2d00      	cmp	r5, #0
 8002624:	d01b      	beq.n	800265e <__aeabi_f2d+0x6e>
 8002626:	0028      	movs	r0, r5
 8002628:	f000 f8ac 	bl	8002784 <__clzsi2>
 800262c:	280a      	cmp	r0, #10
 800262e:	dc1c      	bgt.n	800266a <__aeabi_f2d+0x7a>
 8002630:	230b      	movs	r3, #11
 8002632:	002a      	movs	r2, r5
 8002634:	1a1b      	subs	r3, r3, r0
 8002636:	40da      	lsrs	r2, r3
 8002638:	0003      	movs	r3, r0
 800263a:	3315      	adds	r3, #21
 800263c:	409d      	lsls	r5, r3
 800263e:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <__aeabi_f2d+0x88>)
 8002640:	0312      	lsls	r2, r2, #12
 8002642:	1a1b      	subs	r3, r3, r0
 8002644:	055b      	lsls	r3, r3, #21
 8002646:	0b12      	lsrs	r2, r2, #12
 8002648:	0d5b      	lsrs	r3, r3, #21
 800264a:	e7e1      	b.n	8002610 <__aeabi_f2d+0x20>
 800264c:	2d00      	cmp	r5, #0
 800264e:	d009      	beq.n	8002664 <__aeabi_f2d+0x74>
 8002650:	0b13      	lsrs	r3, r2, #12
 8002652:	2280      	movs	r2, #128	@ 0x80
 8002654:	0312      	lsls	r2, r2, #12
 8002656:	431a      	orrs	r2, r3
 8002658:	076d      	lsls	r5, r5, #29
 800265a:	4b08      	ldr	r3, [pc, #32]	@ (800267c <__aeabi_f2d+0x8c>)
 800265c:	e7d8      	b.n	8002610 <__aeabi_f2d+0x20>
 800265e:	2300      	movs	r3, #0
 8002660:	2200      	movs	r2, #0
 8002662:	e7d5      	b.n	8002610 <__aeabi_f2d+0x20>
 8002664:	2200      	movs	r2, #0
 8002666:	4b05      	ldr	r3, [pc, #20]	@ (800267c <__aeabi_f2d+0x8c>)
 8002668:	e7d2      	b.n	8002610 <__aeabi_f2d+0x20>
 800266a:	0003      	movs	r3, r0
 800266c:	002a      	movs	r2, r5
 800266e:	3b0b      	subs	r3, #11
 8002670:	409a      	lsls	r2, r3
 8002672:	2500      	movs	r5, #0
 8002674:	e7e3      	b.n	800263e <__aeabi_f2d+0x4e>
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	00000389 	.word	0x00000389
 800267c:	000007ff 	.word	0x000007ff

08002680 <__aeabi_d2f>:
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	004b      	lsls	r3, r1, #1
 8002684:	030f      	lsls	r7, r1, #12
 8002686:	0d5b      	lsrs	r3, r3, #21
 8002688:	4c3a      	ldr	r4, [pc, #232]	@ (8002774 <__aeabi_d2f+0xf4>)
 800268a:	0f45      	lsrs	r5, r0, #29
 800268c:	b083      	sub	sp, #12
 800268e:	0a7f      	lsrs	r7, r7, #9
 8002690:	1c5e      	adds	r6, r3, #1
 8002692:	432f      	orrs	r7, r5
 8002694:	9000      	str	r0, [sp, #0]
 8002696:	9101      	str	r1, [sp, #4]
 8002698:	0fca      	lsrs	r2, r1, #31
 800269a:	00c5      	lsls	r5, r0, #3
 800269c:	4226      	tst	r6, r4
 800269e:	d00b      	beq.n	80026b8 <__aeabi_d2f+0x38>
 80026a0:	4935      	ldr	r1, [pc, #212]	@ (8002778 <__aeabi_d2f+0xf8>)
 80026a2:	185c      	adds	r4, r3, r1
 80026a4:	2cfe      	cmp	r4, #254	@ 0xfe
 80026a6:	dd13      	ble.n	80026d0 <__aeabi_d2f+0x50>
 80026a8:	20ff      	movs	r0, #255	@ 0xff
 80026aa:	2300      	movs	r3, #0
 80026ac:	05c0      	lsls	r0, r0, #23
 80026ae:	4318      	orrs	r0, r3
 80026b0:	07d2      	lsls	r2, r2, #31
 80026b2:	4310      	orrs	r0, r2
 80026b4:	b003      	add	sp, #12
 80026b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026b8:	433d      	orrs	r5, r7
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <__aeabi_d2f+0x42>
 80026be:	2000      	movs	r0, #0
 80026c0:	e7f4      	b.n	80026ac <__aeabi_d2f+0x2c>
 80026c2:	2d00      	cmp	r5, #0
 80026c4:	d0f0      	beq.n	80026a8 <__aeabi_d2f+0x28>
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	03db      	lsls	r3, r3, #15
 80026ca:	20ff      	movs	r0, #255	@ 0xff
 80026cc:	433b      	orrs	r3, r7
 80026ce:	e7ed      	b.n	80026ac <__aeabi_d2f+0x2c>
 80026d0:	2c00      	cmp	r4, #0
 80026d2:	dd0c      	ble.n	80026ee <__aeabi_d2f+0x6e>
 80026d4:	9b00      	ldr	r3, [sp, #0]
 80026d6:	00ff      	lsls	r7, r7, #3
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	4183      	sbcs	r3, r0
 80026de:	0f69      	lsrs	r1, r5, #29
 80026e0:	433b      	orrs	r3, r7
 80026e2:	430b      	orrs	r3, r1
 80026e4:	0759      	lsls	r1, r3, #29
 80026e6:	d127      	bne.n	8002738 <__aeabi_d2f+0xb8>
 80026e8:	08db      	lsrs	r3, r3, #3
 80026ea:	b2e0      	uxtb	r0, r4
 80026ec:	e7de      	b.n	80026ac <__aeabi_d2f+0x2c>
 80026ee:	0021      	movs	r1, r4
 80026f0:	3117      	adds	r1, #23
 80026f2:	db31      	blt.n	8002758 <__aeabi_d2f+0xd8>
 80026f4:	2180      	movs	r1, #128	@ 0x80
 80026f6:	201e      	movs	r0, #30
 80026f8:	0409      	lsls	r1, r1, #16
 80026fa:	4339      	orrs	r1, r7
 80026fc:	1b00      	subs	r0, r0, r4
 80026fe:	281f      	cmp	r0, #31
 8002700:	dd2d      	ble.n	800275e <__aeabi_d2f+0xde>
 8002702:	2602      	movs	r6, #2
 8002704:	4276      	negs	r6, r6
 8002706:	1b34      	subs	r4, r6, r4
 8002708:	000e      	movs	r6, r1
 800270a:	40e6      	lsrs	r6, r4
 800270c:	0034      	movs	r4, r6
 800270e:	2820      	cmp	r0, #32
 8002710:	d004      	beq.n	800271c <__aeabi_d2f+0x9c>
 8002712:	481a      	ldr	r0, [pc, #104]	@ (800277c <__aeabi_d2f+0xfc>)
 8002714:	4684      	mov	ip, r0
 8002716:	4463      	add	r3, ip
 8002718:	4099      	lsls	r1, r3
 800271a:	430d      	orrs	r5, r1
 800271c:	002b      	movs	r3, r5
 800271e:	1e59      	subs	r1, r3, #1
 8002720:	418b      	sbcs	r3, r1
 8002722:	4323      	orrs	r3, r4
 8002724:	0759      	lsls	r1, r3, #29
 8002726:	d003      	beq.n	8002730 <__aeabi_d2f+0xb0>
 8002728:	210f      	movs	r1, #15
 800272a:	4019      	ands	r1, r3
 800272c:	2904      	cmp	r1, #4
 800272e:	d10b      	bne.n	8002748 <__aeabi_d2f+0xc8>
 8002730:	019b      	lsls	r3, r3, #6
 8002732:	2000      	movs	r0, #0
 8002734:	0a5b      	lsrs	r3, r3, #9
 8002736:	e7b9      	b.n	80026ac <__aeabi_d2f+0x2c>
 8002738:	210f      	movs	r1, #15
 800273a:	4019      	ands	r1, r3
 800273c:	2904      	cmp	r1, #4
 800273e:	d104      	bne.n	800274a <__aeabi_d2f+0xca>
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	0a5b      	lsrs	r3, r3, #9
 8002744:	b2e0      	uxtb	r0, r4
 8002746:	e7b1      	b.n	80026ac <__aeabi_d2f+0x2c>
 8002748:	2400      	movs	r4, #0
 800274a:	3304      	adds	r3, #4
 800274c:	0159      	lsls	r1, r3, #5
 800274e:	d5f7      	bpl.n	8002740 <__aeabi_d2f+0xc0>
 8002750:	3401      	adds	r4, #1
 8002752:	2300      	movs	r3, #0
 8002754:	b2e0      	uxtb	r0, r4
 8002756:	e7a9      	b.n	80026ac <__aeabi_d2f+0x2c>
 8002758:	2000      	movs	r0, #0
 800275a:	2300      	movs	r3, #0
 800275c:	e7a6      	b.n	80026ac <__aeabi_d2f+0x2c>
 800275e:	4c08      	ldr	r4, [pc, #32]	@ (8002780 <__aeabi_d2f+0x100>)
 8002760:	191c      	adds	r4, r3, r4
 8002762:	002b      	movs	r3, r5
 8002764:	40a5      	lsls	r5, r4
 8002766:	40c3      	lsrs	r3, r0
 8002768:	40a1      	lsls	r1, r4
 800276a:	1e68      	subs	r0, r5, #1
 800276c:	4185      	sbcs	r5, r0
 800276e:	4329      	orrs	r1, r5
 8002770:	430b      	orrs	r3, r1
 8002772:	e7d7      	b.n	8002724 <__aeabi_d2f+0xa4>
 8002774:	000007fe 	.word	0x000007fe
 8002778:	fffffc80 	.word	0xfffffc80
 800277c:	fffffca2 	.word	0xfffffca2
 8002780:	fffffc82 	.word	0xfffffc82

08002784 <__clzsi2>:
 8002784:	211c      	movs	r1, #28
 8002786:	2301      	movs	r3, #1
 8002788:	041b      	lsls	r3, r3, #16
 800278a:	4298      	cmp	r0, r3
 800278c:	d301      	bcc.n	8002792 <__clzsi2+0xe>
 800278e:	0c00      	lsrs	r0, r0, #16
 8002790:	3910      	subs	r1, #16
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	4298      	cmp	r0, r3
 8002796:	d301      	bcc.n	800279c <__clzsi2+0x18>
 8002798:	0a00      	lsrs	r0, r0, #8
 800279a:	3908      	subs	r1, #8
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	4298      	cmp	r0, r3
 80027a0:	d301      	bcc.n	80027a6 <__clzsi2+0x22>
 80027a2:	0900      	lsrs	r0, r0, #4
 80027a4:	3904      	subs	r1, #4
 80027a6:	a202      	add	r2, pc, #8	@ (adr r2, 80027b0 <__clzsi2+0x2c>)
 80027a8:	5c10      	ldrb	r0, [r2, r0]
 80027aa:	1840      	adds	r0, r0, r1
 80027ac:	4770      	bx	lr
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	02020304 	.word	0x02020304
 80027b4:	01010101 	.word	0x01010101
	...

080027c0 <__divdi3>:
 80027c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c2:	464f      	mov	r7, r9
 80027c4:	4646      	mov	r6, r8
 80027c6:	46d6      	mov	lr, sl
 80027c8:	b5c0      	push	{r6, r7, lr}
 80027ca:	0006      	movs	r6, r0
 80027cc:	000f      	movs	r7, r1
 80027ce:	0010      	movs	r0, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	b082      	sub	sp, #8
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	db5d      	blt.n	8002894 <__divdi3+0xd4>
 80027d8:	0034      	movs	r4, r6
 80027da:	003d      	movs	r5, r7
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0b      	blt.n	80027f8 <__divdi3+0x38>
 80027e0:	0016      	movs	r6, r2
 80027e2:	001f      	movs	r7, r3
 80027e4:	42ab      	cmp	r3, r5
 80027e6:	d917      	bls.n	8002818 <__divdi3+0x58>
 80027e8:	2000      	movs	r0, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	b002      	add	sp, #8
 80027ee:	bce0      	pop	{r5, r6, r7}
 80027f0:	46ba      	mov	sl, r7
 80027f2:	46b1      	mov	r9, r6
 80027f4:	46a8      	mov	r8, r5
 80027f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f8:	2700      	movs	r7, #0
 80027fa:	4246      	negs	r6, r0
 80027fc:	418f      	sbcs	r7, r1
 80027fe:	42af      	cmp	r7, r5
 8002800:	d8f2      	bhi.n	80027e8 <__divdi3+0x28>
 8002802:	d100      	bne.n	8002806 <__divdi3+0x46>
 8002804:	e0a0      	b.n	8002948 <__divdi3+0x188>
 8002806:	2301      	movs	r3, #1
 8002808:	425b      	negs	r3, r3
 800280a:	4699      	mov	r9, r3
 800280c:	e009      	b.n	8002822 <__divdi3+0x62>
 800280e:	2700      	movs	r7, #0
 8002810:	4246      	negs	r6, r0
 8002812:	418f      	sbcs	r7, r1
 8002814:	42af      	cmp	r7, r5
 8002816:	d8e7      	bhi.n	80027e8 <__divdi3+0x28>
 8002818:	42af      	cmp	r7, r5
 800281a:	d100      	bne.n	800281e <__divdi3+0x5e>
 800281c:	e090      	b.n	8002940 <__divdi3+0x180>
 800281e:	2300      	movs	r3, #0
 8002820:	4699      	mov	r9, r3
 8002822:	0039      	movs	r1, r7
 8002824:	0030      	movs	r0, r6
 8002826:	f000 f8b7 	bl	8002998 <__clzdi2>
 800282a:	4680      	mov	r8, r0
 800282c:	0029      	movs	r1, r5
 800282e:	0020      	movs	r0, r4
 8002830:	f000 f8b2 	bl	8002998 <__clzdi2>
 8002834:	4643      	mov	r3, r8
 8002836:	1a1b      	subs	r3, r3, r0
 8002838:	4698      	mov	r8, r3
 800283a:	3b20      	subs	r3, #32
 800283c:	d475      	bmi.n	800292a <__divdi3+0x16a>
 800283e:	0031      	movs	r1, r6
 8002840:	4099      	lsls	r1, r3
 8002842:	469a      	mov	sl, r3
 8002844:	000b      	movs	r3, r1
 8002846:	0031      	movs	r1, r6
 8002848:	4640      	mov	r0, r8
 800284a:	4081      	lsls	r1, r0
 800284c:	000a      	movs	r2, r1
 800284e:	42ab      	cmp	r3, r5
 8002850:	d82e      	bhi.n	80028b0 <__divdi3+0xf0>
 8002852:	d02b      	beq.n	80028ac <__divdi3+0xec>
 8002854:	4651      	mov	r1, sl
 8002856:	1aa4      	subs	r4, r4, r2
 8002858:	419d      	sbcs	r5, r3
 800285a:	2900      	cmp	r1, #0
 800285c:	da00      	bge.n	8002860 <__divdi3+0xa0>
 800285e:	e090      	b.n	8002982 <__divdi3+0x1c2>
 8002860:	2100      	movs	r1, #0
 8002862:	2000      	movs	r0, #0
 8002864:	2601      	movs	r6, #1
 8002866:	9000      	str	r0, [sp, #0]
 8002868:	9101      	str	r1, [sp, #4]
 800286a:	4651      	mov	r1, sl
 800286c:	408e      	lsls	r6, r1
 800286e:	9601      	str	r6, [sp, #4]
 8002870:	4641      	mov	r1, r8
 8002872:	2601      	movs	r6, #1
 8002874:	408e      	lsls	r6, r1
 8002876:	4641      	mov	r1, r8
 8002878:	9600      	str	r6, [sp, #0]
 800287a:	2900      	cmp	r1, #0
 800287c:	d11f      	bne.n	80028be <__divdi3+0xfe>
 800287e:	9800      	ldr	r0, [sp, #0]
 8002880:	9901      	ldr	r1, [sp, #4]
 8002882:	464b      	mov	r3, r9
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0b1      	beq.n	80027ec <__divdi3+0x2c>
 8002888:	0003      	movs	r3, r0
 800288a:	000c      	movs	r4, r1
 800288c:	2100      	movs	r1, #0
 800288e:	4258      	negs	r0, r3
 8002890:	41a1      	sbcs	r1, r4
 8002892:	e7ab      	b.n	80027ec <__divdi3+0x2c>
 8002894:	2500      	movs	r5, #0
 8002896:	4274      	negs	r4, r6
 8002898:	41bd      	sbcs	r5, r7
 800289a:	2b00      	cmp	r3, #0
 800289c:	dbb7      	blt.n	800280e <__divdi3+0x4e>
 800289e:	0016      	movs	r6, r2
 80028a0:	001f      	movs	r7, r3
 80028a2:	42ab      	cmp	r3, r5
 80028a4:	d8a0      	bhi.n	80027e8 <__divdi3+0x28>
 80028a6:	42af      	cmp	r7, r5
 80028a8:	d1ad      	bne.n	8002806 <__divdi3+0x46>
 80028aa:	e04d      	b.n	8002948 <__divdi3+0x188>
 80028ac:	42a1      	cmp	r1, r4
 80028ae:	d9d1      	bls.n	8002854 <__divdi3+0x94>
 80028b0:	2100      	movs	r1, #0
 80028b2:	2000      	movs	r0, #0
 80028b4:	9000      	str	r0, [sp, #0]
 80028b6:	9101      	str	r1, [sp, #4]
 80028b8:	4641      	mov	r1, r8
 80028ba:	2900      	cmp	r1, #0
 80028bc:	d0df      	beq.n	800287e <__divdi3+0xbe>
 80028be:	07d9      	lsls	r1, r3, #31
 80028c0:	0856      	lsrs	r6, r2, #1
 80028c2:	085f      	lsrs	r7, r3, #1
 80028c4:	430e      	orrs	r6, r1
 80028c6:	4643      	mov	r3, r8
 80028c8:	e00e      	b.n	80028e8 <__divdi3+0x128>
 80028ca:	42af      	cmp	r7, r5
 80028cc:	d101      	bne.n	80028d2 <__divdi3+0x112>
 80028ce:	42a6      	cmp	r6, r4
 80028d0:	d80c      	bhi.n	80028ec <__divdi3+0x12c>
 80028d2:	1ba4      	subs	r4, r4, r6
 80028d4:	41bd      	sbcs	r5, r7
 80028d6:	2101      	movs	r1, #1
 80028d8:	1924      	adds	r4, r4, r4
 80028da:	416d      	adcs	r5, r5
 80028dc:	2200      	movs	r2, #0
 80028de:	3b01      	subs	r3, #1
 80028e0:	1864      	adds	r4, r4, r1
 80028e2:	4155      	adcs	r5, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <__divdi3+0x136>
 80028e8:	42af      	cmp	r7, r5
 80028ea:	d9ee      	bls.n	80028ca <__divdi3+0x10a>
 80028ec:	3b01      	subs	r3, #1
 80028ee:	1924      	adds	r4, r4, r4
 80028f0:	416d      	adcs	r5, r5
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f8      	bne.n	80028e8 <__divdi3+0x128>
 80028f6:	9a00      	ldr	r2, [sp, #0]
 80028f8:	9b01      	ldr	r3, [sp, #4]
 80028fa:	4651      	mov	r1, sl
 80028fc:	1912      	adds	r2, r2, r4
 80028fe:	416b      	adcs	r3, r5
 8002900:	2900      	cmp	r1, #0
 8002902:	db25      	blt.n	8002950 <__divdi3+0x190>
 8002904:	002e      	movs	r6, r5
 8002906:	002c      	movs	r4, r5
 8002908:	40ce      	lsrs	r6, r1
 800290a:	4641      	mov	r1, r8
 800290c:	40cc      	lsrs	r4, r1
 800290e:	4651      	mov	r1, sl
 8002910:	2900      	cmp	r1, #0
 8002912:	db2d      	blt.n	8002970 <__divdi3+0x1b0>
 8002914:	0034      	movs	r4, r6
 8002916:	408c      	lsls	r4, r1
 8002918:	0021      	movs	r1, r4
 800291a:	4644      	mov	r4, r8
 800291c:	40a6      	lsls	r6, r4
 800291e:	0030      	movs	r0, r6
 8002920:	1a12      	subs	r2, r2, r0
 8002922:	418b      	sbcs	r3, r1
 8002924:	9200      	str	r2, [sp, #0]
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	e7a9      	b.n	800287e <__divdi3+0xbe>
 800292a:	4642      	mov	r2, r8
 800292c:	0038      	movs	r0, r7
 800292e:	469a      	mov	sl, r3
 8002930:	2320      	movs	r3, #32
 8002932:	0031      	movs	r1, r6
 8002934:	4090      	lsls	r0, r2
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	40d9      	lsrs	r1, r3
 800293a:	0003      	movs	r3, r0
 800293c:	430b      	orrs	r3, r1
 800293e:	e782      	b.n	8002846 <__divdi3+0x86>
 8002940:	42a6      	cmp	r6, r4
 8002942:	d900      	bls.n	8002946 <__divdi3+0x186>
 8002944:	e750      	b.n	80027e8 <__divdi3+0x28>
 8002946:	e76a      	b.n	800281e <__divdi3+0x5e>
 8002948:	42a6      	cmp	r6, r4
 800294a:	d800      	bhi.n	800294e <__divdi3+0x18e>
 800294c:	e75b      	b.n	8002806 <__divdi3+0x46>
 800294e:	e74b      	b.n	80027e8 <__divdi3+0x28>
 8002950:	4640      	mov	r0, r8
 8002952:	2120      	movs	r1, #32
 8002954:	1a09      	subs	r1, r1, r0
 8002956:	0028      	movs	r0, r5
 8002958:	4088      	lsls	r0, r1
 800295a:	0026      	movs	r6, r4
 800295c:	0001      	movs	r1, r0
 800295e:	4640      	mov	r0, r8
 8002960:	40c6      	lsrs	r6, r0
 8002962:	002c      	movs	r4, r5
 8002964:	430e      	orrs	r6, r1
 8002966:	4641      	mov	r1, r8
 8002968:	40cc      	lsrs	r4, r1
 800296a:	4651      	mov	r1, sl
 800296c:	2900      	cmp	r1, #0
 800296e:	dad1      	bge.n	8002914 <__divdi3+0x154>
 8002970:	4640      	mov	r0, r8
 8002972:	2120      	movs	r1, #32
 8002974:	0035      	movs	r5, r6
 8002976:	4084      	lsls	r4, r0
 8002978:	1a09      	subs	r1, r1, r0
 800297a:	40cd      	lsrs	r5, r1
 800297c:	0021      	movs	r1, r4
 800297e:	4329      	orrs	r1, r5
 8002980:	e7cb      	b.n	800291a <__divdi3+0x15a>
 8002982:	4641      	mov	r1, r8
 8002984:	2620      	movs	r6, #32
 8002986:	2701      	movs	r7, #1
 8002988:	1a76      	subs	r6, r6, r1
 800298a:	2000      	movs	r0, #0
 800298c:	2100      	movs	r1, #0
 800298e:	40f7      	lsrs	r7, r6
 8002990:	9000      	str	r0, [sp, #0]
 8002992:	9101      	str	r1, [sp, #4]
 8002994:	9701      	str	r7, [sp, #4]
 8002996:	e76b      	b.n	8002870 <__divdi3+0xb0>

08002998 <__clzdi2>:
 8002998:	b510      	push	{r4, lr}
 800299a:	2900      	cmp	r1, #0
 800299c:	d103      	bne.n	80029a6 <__clzdi2+0xe>
 800299e:	f7ff fef1 	bl	8002784 <__clzsi2>
 80029a2:	3020      	adds	r0, #32
 80029a4:	e002      	b.n	80029ac <__clzdi2+0x14>
 80029a6:	0008      	movs	r0, r1
 80029a8:	f7ff feec 	bl	8002784 <__clzsi2>
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)

080029b0 <MPU6050_Init>:
#include"mpu.h"
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart2;
MPU6050_t MPU6050;
char uart_buf[2000];
void MPU6050_Init(void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // Check device ID WHO_AM_I
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 80029b6:	483e      	ldr	r0, [pc, #248]	@ (8002ab0 <MPU6050_Init+0x100>)
 80029b8:	23fa      	movs	r3, #250	@ 0xfa
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	2301      	movs	r3, #1
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2301      	movs	r3, #1
 80029c8:	2275      	movs	r2, #117	@ 0x75
 80029ca:	21d0      	movs	r1, #208	@ 0xd0
 80029cc:	f003 fa98 	bl	8005f00 <HAL_I2C_Mem_Read>

    if (check == 104) { // 0x68 will be returned by the sensor if everything goes well
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b68      	cmp	r3, #104	@ 0x68
 80029d6:	d152      	bne.n	8002a7e <MPU6050_Init+0xce>
        // Power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80029d8:	1dbb      	adds	r3, r7, #6
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80029de:	4834      	ldr	r0, [pc, #208]	@ (8002ab0 <MPU6050_Init+0x100>)
 80029e0:	23fa      	movs	r3, #250	@ 0xfa
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2301      	movs	r3, #1
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	1dbb      	adds	r3, r7, #6
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2301      	movs	r3, #1
 80029f0:	226b      	movs	r2, #107	@ 0x6b
 80029f2:	21d0      	movs	r1, #208	@ 0xd0
 80029f4:	f003 f956 	bl	8005ca4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80029f8:	1dbb      	adds	r3, r7, #6
 80029fa:	2207      	movs	r2, #7
 80029fc:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80029fe:	482c      	ldr	r0, [pc, #176]	@ (8002ab0 <MPU6050_Init+0x100>)
 8002a00:	23fa      	movs	r3, #250	@ 0xfa
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	2301      	movs	r3, #1
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	2219      	movs	r2, #25
 8002a12:	21d0      	movs	r1, #208	@ 0xd0
 8002a14:	f003 f946 	bl	8005ca4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
        Data = 0x00;
 8002a18:	1dbb      	adds	r3, r7, #6
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002a1e:	4824      	ldr	r0, [pc, #144]	@ (8002ab0 <MPU6050_Init+0x100>)
 8002a20:	23fa      	movs	r3, #250	@ 0xfa
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2301      	movs	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	1dbb      	adds	r3, r7, #6
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	221c      	movs	r2, #28
 8002a32:	21d0      	movs	r1, #208	@ 0xd0
 8002a34:	f003 f936 	bl	8005ca4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
        Data = 0x00;
 8002a38:	1dbb      	adds	r3, r7, #6
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002a3e:	481c      	ldr	r0, [pc, #112]	@ (8002ab0 <MPU6050_Init+0x100>)
 8002a40:	23fa      	movs	r3, #250	@ 0xfa
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	2301      	movs	r3, #1
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	1dbb      	adds	r3, r7, #6
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	221b      	movs	r2, #27
 8002a52:	21d0      	movs	r1, #208	@ 0xd0
 8002a54:	f003 f926 	bl	8005ca4 <HAL_I2C_Mem_Write>

        sprintf(uart_buf, "MPU6050 Initialization Successful!\r\n");
 8002a58:	4a16      	ldr	r2, [pc, #88]	@ (8002ab4 <MPU6050_Init+0x104>)
 8002a5a:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <MPU6050_Init+0x108>)
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f005 ff38 	bl	80088d4 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <MPU6050_Init+0x108>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fd fb4c 	bl	8000104 <strlen>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	2301      	movs	r3, #1
 8002a72:	425b      	negs	r3, r3
 8002a74:	4910      	ldr	r1, [pc, #64]	@ (8002ab8 <MPU6050_Init+0x108>)
 8002a76:	4811      	ldr	r0, [pc, #68]	@ (8002abc <MPU6050_Init+0x10c>)
 8002a78:	f004 fd50 	bl	800751c <HAL_UART_Transmit>
    } else {
        sprintf(uart_buf, "MPU6050 Initialization Failed! WHO_AM_I = %d\r\n", check);
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
    }
}
 8002a7c:	e013      	b.n	8002aa6 <MPU6050_Init+0xf6>
        sprintf(uart_buf, "MPU6050 Initialization Failed! WHO_AM_I = %d\r\n", check);
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	001a      	movs	r2, r3
 8002a84:	490e      	ldr	r1, [pc, #56]	@ (8002ac0 <MPU6050_Init+0x110>)
 8002a86:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <MPU6050_Init+0x108>)
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f005 ff23 	bl	80088d4 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <MPU6050_Init+0x108>)
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7fd fb37 	bl	8000104 <strlen>
 8002a96:	0003      	movs	r3, r0
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	4906      	ldr	r1, [pc, #24]	@ (8002ab8 <MPU6050_Init+0x108>)
 8002aa0:	4806      	ldr	r0, [pc, #24]	@ (8002abc <MPU6050_Init+0x10c>)
 8002aa2:	f004 fd3b 	bl	800751c <HAL_UART_Transmit>
}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	200001f4 	.word	0x200001f4
 8002ab4:	0800ac80 	.word	0x0800ac80
 8002ab8:	20000318 	.word	0x20000318
 8002abc:	20000248 	.word	0x20000248
 8002ac0:	0800aca8 	.word	0x0800aca8

08002ac4 <MPU6050_Read_All_Safe>:

    return true;
}

// Modified MPU6050_Read_All with better error handling
bool MPU6050_Read_All_Safe(void) {
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	b08c      	sub	sp, #48	@ 0x30
 8002ac8:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[14];
    HAL_StatusTypeDef status;
    static uint32_t error_count = 0;

    // Clear buffer before reading
    memset(Rec_Data, 0, sizeof(Rec_Data));
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	220e      	movs	r2, #14
 8002ace:	2100      	movs	r1, #0
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f005 ff6d 	bl	80089b0 <memset>

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register with error checking
    status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, 2000);
 8002ad6:	2517      	movs	r5, #23
 8002ad8:	197c      	adds	r4, r7, r5
 8002ada:	48aa      	ldr	r0, [pc, #680]	@ (8002d84 <MPU6050_Read_All_Safe+0x2c0>)
 8002adc:	23fa      	movs	r3, #250	@ 0xfa
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	9302      	str	r3, [sp, #8]
 8002ae2:	230e      	movs	r3, #14
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2301      	movs	r3, #1
 8002aec:	223b      	movs	r2, #59	@ 0x3b
 8002aee:	21d0      	movs	r1, #208	@ 0xd0
 8002af0:	f003 fa06 	bl	8005f00 <HAL_I2C_Mem_Read>
 8002af4:	0003      	movs	r3, r0
 8002af6:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 8002af8:	197b      	adds	r3, r7, r5
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d044      	beq.n	8002b8a <MPU6050_Read_All_Safe+0xc6>
        error_count++;
 8002b00:	4ba1      	ldr	r3, [pc, #644]	@ (8002d88 <MPU6050_Read_All_Safe+0x2c4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	4ba0      	ldr	r3, [pc, #640]	@ (8002d88 <MPU6050_Read_All_Safe+0x2c4>)
 8002b08:	601a      	str	r2, [r3, #0]
        sprintf(uart_buf, "I2C Error! Status: %d, Error Count: %lu\r\n", status, error_count);
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8002d88 <MPU6050_Read_All_Safe+0x2c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	499e      	ldr	r1, [pc, #632]	@ (8002d8c <MPU6050_Read_All_Safe+0x2c8>)
 8002b14:	489e      	ldr	r0, [pc, #632]	@ (8002d90 <MPU6050_Read_All_Safe+0x2cc>)
 8002b16:	f005 fedd 	bl	80088d4 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8002b1a:	4b9d      	ldr	r3, [pc, #628]	@ (8002d90 <MPU6050_Read_All_Safe+0x2cc>)
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7fd faf1 	bl	8000104 <strlen>
 8002b22:	0003      	movs	r3, r0
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	2301      	movs	r3, #1
 8002b28:	425b      	negs	r3, r3
 8002b2a:	4999      	ldr	r1, [pc, #612]	@ (8002d90 <MPU6050_Read_All_Safe+0x2cc>)
 8002b2c:	4899      	ldr	r0, [pc, #612]	@ (8002d94 <MPU6050_Read_All_Safe+0x2d0>)
 8002b2e:	f004 fcf5 	bl	800751c <HAL_UART_Transmit>

        // Try to recover I2C every 3 errors
        if (error_count % 3 == 0) {
 8002b32:	4b95      	ldr	r3, [pc, #596]	@ (8002d88 <MPU6050_Read_All_Safe+0x2c4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2103      	movs	r1, #3
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7fd fb85 	bl	8000248 <__aeabi_uidivmod>
 8002b3e:	1e0b      	subs	r3, r1, #0
 8002b40:	d121      	bne.n	8002b86 <MPU6050_Read_All_Safe+0xc2>
            sprintf(uart_buf, "Attempting I2C recovery...\r\n");
 8002b42:	4a95      	ldr	r2, [pc, #596]	@ (8002d98 <MPU6050_Read_All_Safe+0x2d4>)
 8002b44:	4b92      	ldr	r3, [pc, #584]	@ (8002d90 <MPU6050_Read_All_Safe+0x2cc>)
 8002b46:	0011      	movs	r1, r2
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f005 fec3 	bl	80088d4 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8002b4e:	4b90      	ldr	r3, [pc, #576]	@ (8002d90 <MPU6050_Read_All_Safe+0x2cc>)
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7fd fad7 	bl	8000104 <strlen>
 8002b56:	0003      	movs	r3, r0
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	498c      	ldr	r1, [pc, #560]	@ (8002d90 <MPU6050_Read_All_Safe+0x2cc>)
 8002b60:	488c      	ldr	r0, [pc, #560]	@ (8002d94 <MPU6050_Read_All_Safe+0x2d0>)
 8002b62:	f004 fcdb 	bl	800751c <HAL_UART_Transmit>

            HAL_I2C_DeInit(&hi2c1);
 8002b66:	4b87      	ldr	r3, [pc, #540]	@ (8002d84 <MPU6050_Read_All_Safe+0x2c0>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f003 f86b 	bl	8005c44 <HAL_I2C_DeInit>
            HAL_Delay(50);
 8002b6e:	2032      	movs	r0, #50	@ 0x32
 8002b70:	f002 fc7c 	bl	800546c <HAL_Delay>
            HAL_I2C_Init(&hi2c1);
 8002b74:	4b83      	ldr	r3, [pc, #524]	@ (8002d84 <MPU6050_Read_All_Safe+0x2c0>)
 8002b76:	0018      	movs	r0, r3
 8002b78:	f002 ffbe 	bl	8005af8 <HAL_I2C_Init>
            HAL_Delay(50);
 8002b7c:	2032      	movs	r0, #50	@ 0x32
 8002b7e:	f002 fc75 	bl	800546c <HAL_Delay>
            MPU6050_Init(); // Re-initialize the sensor
 8002b82:	f7ff ff15 	bl	80029b0 <MPU6050_Init>
        }
        return false; // Return false to indicate failure
 8002b86:	2300      	movs	r3, #0
 8002b88:	e0f7      	b.n	8002d7a <MPU6050_Read_All_Safe+0x2b6>
    }

    // Check if we got valid data (not all zeros)
    bool valid_data = false;
 8002b8a:	231f      	movs	r3, #31
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 14; i++) {
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e00d      	b.n	8002bb4 <MPU6050_Read_All_Safe+0xf0>
        if (Rec_Data[i] != 0) {
 8002b98:	1d3a      	adds	r2, r7, #4
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	18d3      	adds	r3, r2, r3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <MPU6050_Read_All_Safe+0xea>
            valid_data = true;
 8002ba4:	231f      	movs	r3, #31
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
            break;
 8002bac:	e005      	b.n	8002bba <MPU6050_Read_All_Safe+0xf6>
    for (int i = 0; i < 14; i++) {
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b0d      	cmp	r3, #13
 8002bb8:	ddee      	ble.n	8002b98 <MPU6050_Read_All_Safe+0xd4>
        }
    }

    if (!valid_data) {
 8002bba:	231f      	movs	r3, #31
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4053      	eors	r3, r2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <MPU6050_Read_All_Safe+0x114>
        error_count++;
 8002bca:	4b6f      	ldr	r3, [pc, #444]	@ (8002d88 <MPU6050_Read_All_Safe+0x2c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d88 <MPU6050_Read_All_Safe+0x2c4>)
 8002bd2:	601a      	str	r2, [r3, #0]
        return false; // Return false for invalid data
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e0d0      	b.n	8002d7a <MPU6050_Read_All_Safe+0x2b6>
    }

    // Parse the data only if read was successful and valid
    MPU6050.Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	4b6b      	ldr	r3, [pc, #428]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002bee:	801a      	strh	r2, [r3, #0]
    MPU6050.Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	789b      	ldrb	r3, [r3, #2]
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	b21a      	sxth	r2, r3
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	78db      	ldrb	r3, [r3, #3]
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b21a      	sxth	r2, r3
 8002c04:	4b65      	ldr	r3, [pc, #404]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002c06:	805a      	strh	r2, [r3, #2]
    MPU6050.Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	791b      	ldrb	r3, [r3, #4]
 8002c0c:	b21b      	sxth	r3, r3
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	b21a      	sxth	r2, r3
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	795b      	ldrb	r3, [r3, #5]
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	4b5f      	ldr	r3, [pc, #380]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002c1e:	809a      	strh	r2, [r3, #4]
    int16_t temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	799b      	ldrb	r3, [r3, #6]
 8002c24:	b21b      	sxth	r3, r3
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	b219      	sxth	r1, r3
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	79db      	ldrb	r3, [r3, #7]
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	2414      	movs	r4, #20
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	430a      	orrs	r2, r1
 8002c36:	801a      	strh	r2, [r3, #0]
    MPU6050.Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	7a1b      	ldrb	r3, [r3, #8]
 8002c3c:	b21b      	sxth	r3, r3
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	b21a      	sxth	r2, r3
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	7a5b      	ldrb	r3, [r3, #9]
 8002c46:	b21b      	sxth	r3, r3
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	b21a      	sxth	r2, r3
 8002c4c:	4b53      	ldr	r3, [pc, #332]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002c4e:	841a      	strh	r2, [r3, #32]
    MPU6050.Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	7a9b      	ldrb	r3, [r3, #10]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	7adb      	ldrb	r3, [r3, #11]
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	4b4d      	ldr	r3, [pc, #308]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002c66:	845a      	strh	r2, [r3, #34]	@ 0x22
    MPU6050.Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	7b1b      	ldrb	r3, [r3, #12]
 8002c6c:	b21b      	sxth	r3, r3
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	b21a      	sxth	r2, r3
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	7b5b      	ldrb	r3, [r3, #13]
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002c7e:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Convert to engineering units
    MPU6050.Ax = MPU6050.Accel_X_RAW / 16384.0;
 8002c80:	4b46      	ldr	r3, [pc, #280]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	5e9b      	ldrsh	r3, [r3, r2]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff fc60 	bl	800254c <__aeabi_i2d>
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4b44      	ldr	r3, [pc, #272]	@ (8002da0 <MPU6050_Read_All_Safe+0x2dc>)
 8002c90:	f7fe f8d4 	bl	8000e3c <__aeabi_ddiv>
 8002c94:	0002      	movs	r2, r0
 8002c96:	000b      	movs	r3, r1
 8002c98:	4940      	ldr	r1, [pc, #256]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002c9a:	608a      	str	r2, [r1, #8]
 8002c9c:	60cb      	str	r3, [r1, #12]
    MPU6050.Ay = MPU6050.Accel_Y_RAW / 16384.0;
 8002c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff fc51 	bl	800254c <__aeabi_i2d>
 8002caa:	2200      	movs	r2, #0
 8002cac:	4b3c      	ldr	r3, [pc, #240]	@ (8002da0 <MPU6050_Read_All_Safe+0x2dc>)
 8002cae:	f7fe f8c5 	bl	8000e3c <__aeabi_ddiv>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	000b      	movs	r3, r1
 8002cb6:	4939      	ldr	r1, [pc, #228]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002cb8:	610a      	str	r2, [r1, #16]
 8002cba:	614b      	str	r3, [r1, #20]
    MPU6050.Az = MPU6050.Accel_Z_RAW / 16384.0;
 8002cbc:	4b37      	ldr	r3, [pc, #220]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff fc42 	bl	800254c <__aeabi_i2d>
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4b35      	ldr	r3, [pc, #212]	@ (8002da0 <MPU6050_Read_All_Safe+0x2dc>)
 8002ccc:	f7fe f8b6 	bl	8000e3c <__aeabi_ddiv>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	000b      	movs	r3, r1
 8002cd4:	4931      	ldr	r1, [pc, #196]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002cd6:	618a      	str	r2, [r1, #24]
 8002cd8:	61cb      	str	r3, [r1, #28]

    MPU6050.Temperature = ((float)temp / 340.0) + 36.53;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	5e9b      	ldrsh	r3, [r3, r2]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fd fc4f 	bl	8000584 <__aeabi_i2f>
 8002ce6:	1c03      	adds	r3, r0, #0
 8002ce8:	1c18      	adds	r0, r3, #0
 8002cea:	f7ff fc81 	bl	80025f0 <__aeabi_f2d>
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <MPU6050_Read_All_Safe+0x2e0>)
 8002cf2:	f7fe f8a3 	bl	8000e3c <__aeabi_ddiv>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	000b      	movs	r3, r1
 8002cfa:	0010      	movs	r0, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002da8 <MPU6050_Read_All_Safe+0x2e4>)
 8002d00:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <MPU6050_Read_All_Safe+0x2e8>)
 8002d02:	f7fd fcd5 	bl	80006b0 <__aeabi_dadd>
 8002d06:	0002      	movs	r2, r0
 8002d08:	000b      	movs	r3, r1
 8002d0a:	0010      	movs	r0, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	f7ff fcb7 	bl	8002680 <__aeabi_d2f>
 8002d12:	1c02      	adds	r2, r0, #0
 8002d14:	4b21      	ldr	r3, [pc, #132]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002d16:	641a      	str	r2, [r3, #64]	@ 0x40

    MPU6050.Gx = MPU6050.Gyro_X_RAW / 131.0;
 8002d18:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	5e9b      	ldrsh	r3, [r3, r2]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7ff fc14 	bl	800254c <__aeabi_i2d>
 8002d24:	2200      	movs	r2, #0
 8002d26:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <MPU6050_Read_All_Safe+0x2ec>)
 8002d28:	f7fe f888 	bl	8000e3c <__aeabi_ddiv>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	000b      	movs	r3, r1
 8002d30:	491a      	ldr	r1, [pc, #104]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002d32:	628a      	str	r2, [r1, #40]	@ 0x28
 8002d34:	62cb      	str	r3, [r1, #44]	@ 0x2c
    MPU6050.Gy = MPU6050.Gyro_Y_RAW / 131.0;
 8002d36:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002d38:	2222      	movs	r2, #34	@ 0x22
 8002d3a:	5e9b      	ldrsh	r3, [r3, r2]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff fc05 	bl	800254c <__aeabi_i2d>
 8002d42:	2200      	movs	r2, #0
 8002d44:	4b1a      	ldr	r3, [pc, #104]	@ (8002db0 <MPU6050_Read_All_Safe+0x2ec>)
 8002d46:	f7fe f879 	bl	8000e3c <__aeabi_ddiv>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	000b      	movs	r3, r1
 8002d4e:	4913      	ldr	r1, [pc, #76]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002d50:	630a      	str	r2, [r1, #48]	@ 0x30
 8002d52:	634b      	str	r3, [r1, #52]	@ 0x34
    MPU6050.Gz = MPU6050.Gyro_Z_RAW / 131.0;
 8002d54:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002d56:	2224      	movs	r2, #36	@ 0x24
 8002d58:	5e9b      	ldrsh	r3, [r3, r2]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7ff fbf6 	bl	800254c <__aeabi_i2d>
 8002d60:	2200      	movs	r2, #0
 8002d62:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <MPU6050_Read_All_Safe+0x2ec>)
 8002d64:	f7fe f86a 	bl	8000e3c <__aeabi_ddiv>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	000b      	movs	r3, r1
 8002d6c:	490b      	ldr	r1, [pc, #44]	@ (8002d9c <MPU6050_Read_All_Safe+0x2d8>)
 8002d6e:	638a      	str	r2, [r1, #56]	@ 0x38
 8002d70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    // Reset error count on successful read
    error_count = 0;
 8002d72:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <MPU6050_Read_All_Safe+0x2c4>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    return true; // Return true for successful read
 8002d78:	2301      	movs	r3, #1
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b008      	add	sp, #32
 8002d80:	bdb0      	pop	{r4, r5, r7, pc}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	200001f4 	.word	0x200001f4
 8002d88:	20000ae8 	.word	0x20000ae8
 8002d8c:	0800acd8 	.word	0x0800acd8
 8002d90:	20000318 	.word	0x20000318
 8002d94:	20000248 	.word	0x20000248
 8002d98:	0800ad04 	.word	0x0800ad04
 8002d9c:	200002d0 	.word	0x200002d0
 8002da0:	40d00000 	.word	0x40d00000
 8002da4:	40754000 	.word	0x40754000
 8002da8:	0a3d70a4 	.word	0x0a3d70a4
 8002dac:	404243d7 	.word	0x404243d7
 8002db0:	40606000 	.word	0x40606000

08002db4 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002dbc:	250f      	movs	r5, #15
 8002dbe:	197c      	adds	r4, r7, r5
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f001 fbc8 	bl	8004558 <null_ptr_check>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 8002dcc:	197b      	adds	r3, r7, r5
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d12a      	bne.n	8002e2c <bme680_init+0x78>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8002dd6:	197c      	adds	r4, r7, r5
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 f92f 	bl	800303e <bme680_soft_reset>
 8002de0:	0003      	movs	r3, r0
 8002de2:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
 8002de4:	197b      	adds	r3, r7, r5
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b25b      	sxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11e      	bne.n	8002e2c <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	197c      	adds	r4, r7, r5
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	20d0      	movs	r0, #208	@ 0xd0
 8002df8:	f000 f820 	bl	8002e3c <bme680_get_regs>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
 8002e00:	002a      	movs	r2, r5
 8002e02:	18bb      	adds	r3, r7, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10f      	bne.n	8002e2c <bme680_init+0x78>
				if (dev->chip_id == BME680_CHIP_ID) {
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b61      	cmp	r3, #97	@ 0x61
 8002e12:	d107      	bne.n	8002e24 <bme680_init+0x70>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8002e14:	18bc      	adds	r4, r7, r2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 fcd1 	bl	80037c0 <get_calib_data>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	7023      	strb	r3, [r4, #0]
 8002e22:	e003      	b.n	8002e2c <bme680_init+0x78>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8002e24:	230f      	movs	r3, #15
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	22fd      	movs	r2, #253	@ 0xfd
 8002e2a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return rslt;
 8002e2c:	230f      	movs	r3, #15
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b25b      	sxtb	r3, r3
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b004      	add	sp, #16
 8002e3a:	bdb0      	pop	{r4, r5, r7, pc}

08002e3c <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	0011      	movs	r1, r2
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	250f      	movs	r5, #15
 8002e4a:	197b      	adds	r3, r7, r5
 8002e4c:	1c02      	adds	r2, r0, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	230c      	movs	r3, #12
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	1c0a      	adds	r2, r1, #0
 8002e56:	801a      	strh	r2, [r3, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002e58:	2617      	movs	r6, #23
 8002e5a:	19bc      	adds	r4, r7, r6
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f001 fb7a 	bl	8004558 <null_ptr_check>
 8002e64:	0003      	movs	r3, r0
 8002e66:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 8002e68:	19bb      	adds	r3, r7, r6
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d134      	bne.n	8002edc <bme680_get_regs+0xa0>
		if (dev->intf == BME680_SPI_INTF) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	789b      	ldrb	r3, [r3, #2]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <bme680_get_regs+0x6a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8002e7a:	19bc      	adds	r4, r7, r6
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	197b      	adds	r3, r7, r5
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	0011      	movs	r1, r2
 8002e84:	0018      	movs	r0, r3
 8002e86:	f001 fa68 	bl	800435a <set_mem_page>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK)
 8002e8e:	19bb      	adds	r3, r7, r6
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <bme680_get_regs+0x6a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8002e98:	197b      	adds	r3, r7, r5
 8002e9a:	197a      	adds	r2, r7, r5
 8002e9c:	7812      	ldrb	r2, [r2, #0]
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	4249      	negs	r1, r1
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	701a      	strb	r2, [r3, #0]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7858      	ldrb	r0, [r3, #1]
 8002eae:	230c      	movs	r3, #12
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	881d      	ldrh	r5, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	230f      	movs	r3, #15
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	7819      	ldrb	r1, [r3, #0]
 8002ebc:	002b      	movs	r3, r5
 8002ebe:	47a0      	blx	r4
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2254      	movs	r2, #84	@ 0x54
 8002ec8:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2254      	movs	r2, #84	@ 0x54
 8002ece:	569b      	ldrsb	r3, [r3, r2]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <bme680_get_regs+0xa0>
			rslt = BME680_E_COM_FAIL;
 8002ed4:	2317      	movs	r3, #23
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	22fe      	movs	r2, #254	@ 0xfe
 8002eda:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8002edc:	2317      	movs	r3, #23
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b25b      	sxtb	r3, r3
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b007      	add	sp, #28
 8002eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eec <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 8002eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eee:	b091      	sub	sp, #68	@ 0x44
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8002efc:	2314      	movs	r3, #20
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	0018      	movs	r0, r3
 8002f02:	2328      	movs	r3, #40	@ 0x28
 8002f04:	001a      	movs	r2, r3
 8002f06:	2100      	movs	r1, #0
 8002f08:	f005 fd52 	bl	80089b0 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002f0c:	253f      	movs	r5, #63	@ 0x3f
 8002f0e:	197c      	adds	r4, r7, r5
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f001 fb20 	bl	8004558 <null_ptr_check>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 8002f1c:	197b      	adds	r3, r7, r5
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d000      	beq.n	8002f28 <bme680_set_regs+0x3c>
 8002f26:	e082      	b.n	800302e <bme680_set_regs+0x142>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8002f28:	1dfb      	adds	r3, r7, #7
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d100      	bne.n	8002f32 <bme680_set_regs+0x46>
 8002f30:	e077      	b.n	8003022 <bme680_set_regs+0x136>
 8002f32:	1dfb      	adds	r3, r7, #7
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b13      	cmp	r3, #19
 8002f38:	d900      	bls.n	8002f3c <bme680_set_regs+0x50>
 8002f3a:	e072      	b.n	8003022 <bme680_set_regs+0x136>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8002f3c:	233c      	movs	r3, #60	@ 0x3c
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2200      	movs	r2, #0
 8002f42:	801a      	strh	r2, [r3, #0]
 8002f44:	e03f      	b.n	8002fc6 <bme680_set_regs+0xda>
				if (dev->intf == BME680_SPI_INTF) {
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	789b      	ldrb	r3, [r3, #2]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11d      	bne.n	8002f8a <bme680_set_regs+0x9e>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8002f4e:	253c      	movs	r5, #60	@ 0x3c
 8002f50:	197b      	adds	r3, r7, r5
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	18d3      	adds	r3, r2, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	223f      	movs	r2, #63	@ 0x3f
 8002f5c:	18bc      	adds	r4, r7, r2
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	0011      	movs	r1, r2
 8002f62:	0018      	movs	r0, r3
 8002f64:	f001 f9f9 	bl	800435a <set_mem_page>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	7023      	strb	r3, [r4, #0]
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8002f6c:	197b      	adds	r3, r7, r5
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	18d3      	adds	r3, r2, r3
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	197b      	adds	r3, r7, r5
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	217f      	movs	r1, #127	@ 0x7f
 8002f7e:	400a      	ands	r2, r1
 8002f80:	b2d1      	uxtb	r1, r2
 8002f82:	2214      	movs	r2, #20
 8002f84:	18ba      	adds	r2, r7, r2
 8002f86:	54d1      	strb	r1, [r2, r3]
 8002f88:	e00b      	b.n	8002fa2 <bme680_set_regs+0xb6>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8002f8a:	213c      	movs	r1, #60	@ 0x3c
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	18d2      	adds	r2, r2, r3
 8002f94:	187b      	adds	r3, r7, r1
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	7811      	ldrb	r1, [r2, #0]
 8002f9c:	2214      	movs	r2, #20
 8002f9e:	18ba      	adds	r2, r7, r2
 8002fa0:	54d1      	strb	r1, [r2, r3]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8002fa2:	203c      	movs	r0, #60	@ 0x3c
 8002fa4:	183b      	adds	r3, r7, r0
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	18d2      	adds	r2, r2, r3
 8002fac:	183b      	adds	r3, r7, r0
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	7811      	ldrb	r1, [r2, #0]
 8002fb6:	2214      	movs	r2, #20
 8002fb8:	18ba      	adds	r2, r7, r2
 8002fba:	54d1      	strb	r1, [r2, r3]
			for (index = 0; index < len; index++) {
 8002fbc:	183b      	adds	r3, r7, r0
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	183b      	adds	r3, r7, r0
 8002fc2:	3201      	adds	r2, #1
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	223c      	movs	r2, #60	@ 0x3c
 8002fce:	18ba      	adds	r2, r7, r2
 8002fd0:	8812      	ldrh	r2, [r2, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3b7      	bcc.n	8002f46 <bme680_set_regs+0x5a>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8002fd6:	263f      	movs	r6, #63	@ 0x3f
 8002fd8:	19bb      	adds	r3, r7, r6
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d124      	bne.n	800302c <bme680_set_regs+0x140>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	7858      	ldrb	r0, [r3, #1]
 8002fea:	2214      	movs	r2, #20
 8002fec:	18bb      	adds	r3, r7, r2
 8002fee:	7819      	ldrb	r1, [r3, #0]
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	18db      	adds	r3, r3, r3
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29d      	uxth	r5, r3
 8002ffe:	18bb      	adds	r3, r7, r2
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	002b      	movs	r3, r5
 8003004:	47a0      	blx	r4
 8003006:	0003      	movs	r3, r0
 8003008:	0019      	movs	r1, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2254      	movs	r2, #84	@ 0x54
 800300e:	5499      	strb	r1, [r3, r2]
				if (dev->com_rslt != 0)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2254      	movs	r2, #84	@ 0x54
 8003014:	569b      	ldrsb	r3, [r3, r2]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <bme680_set_regs+0x140>
					rslt = BME680_E_COM_FAIL;
 800301a:	19bb      	adds	r3, r7, r6
 800301c:	22fe      	movs	r2, #254	@ 0xfe
 800301e:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK) {
 8003020:	e004      	b.n	800302c <bme680_set_regs+0x140>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8003022:	233f      	movs	r3, #63	@ 0x3f
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	22fc      	movs	r2, #252	@ 0xfc
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e000      	b.n	800302e <bme680_set_regs+0x142>
			if (rslt == BME680_OK) {
 800302c:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return rslt;
 800302e:	233f      	movs	r3, #63	@ 0x3f
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b25b      	sxtb	r3, r3
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b011      	add	sp, #68	@ 0x44
 800303c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800303e <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 800303e:	b5b0      	push	{r4, r5, r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8003046:	230e      	movs	r3, #14
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	22e0      	movs	r2, #224	@ 0xe0
 800304c:	701a      	strb	r2, [r3, #0]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 800304e:	230d      	movs	r3, #13
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	22b6      	movs	r2, #182	@ 0xb6
 8003054:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003056:	250f      	movs	r5, #15
 8003058:	197c      	adds	r4, r7, r5
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f001 fa7b 	bl	8004558 <null_ptr_check>
 8003062:	0003      	movs	r3, r0
 8003064:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 8003066:	002a      	movs	r2, r5
 8003068:	18bb      	adds	r3, r7, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b25b      	sxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d12f      	bne.n	80030d2 <bme680_soft_reset+0x94>
		if (dev->intf == BME680_SPI_INTF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	789b      	ldrb	r3, [r3, #2]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <bme680_soft_reset+0x4a>
			rslt = get_mem_page(dev);
 800307a:	18bc      	adds	r4, r7, r2
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0018      	movs	r0, r3
 8003080:	f001 f9e8 	bl	8004454 <get_mem_page>
 8003084:	0003      	movs	r3, r0
 8003086:	7023      	strb	r3, [r4, #0]

		/* Reset the device */
		if (rslt == BME680_OK) {
 8003088:	250f      	movs	r5, #15
 800308a:	197b      	adds	r3, r7, r5
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b25b      	sxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11e      	bne.n	80030d2 <bme680_soft_reset+0x94>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003094:	197c      	adds	r4, r7, r5
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	220d      	movs	r2, #13
 800309a:	18b9      	adds	r1, r7, r2
 800309c:	220e      	movs	r2, #14
 800309e:	18b8      	adds	r0, r7, r2
 80030a0:	2201      	movs	r2, #1
 80030a2:	f7ff ff23 	bl	8002eec <bme680_set_regs>
 80030a6:	0003      	movs	r3, r0
 80030a8:	7023      	strb	r3, [r4, #0]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ae:	200a      	movs	r0, #10
 80030b0:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80030b2:	197b      	adds	r3, r7, r5
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <bme680_soft_reset+0x94>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	789b      	ldrb	r3, [r3, #2]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <bme680_soft_reset+0x94>
					rslt = get_mem_page(dev);
 80030c4:	197c      	adds	r4, r7, r5
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f001 f9c3 	bl	8004454 <get_mem_page>
 80030ce:	0003      	movs	r3, r0
 80030d0:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return rslt;
 80030d2:	230f      	movs	r3, #15
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b25b      	sxtb	r3, r3
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b004      	add	sp, #16
 80030e0:	bdb0      	pop	{r4, r5, r7, pc}

080030e2 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80030e2:	b5b0      	push	{r4, r5, r7, lr}
 80030e4:	b088      	sub	sp, #32
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	0002      	movs	r2, r0
 80030ea:	6039      	str	r1, [r7, #0]
 80030ec:	1dbb      	adds	r3, r7, #6
 80030ee:	801a      	strh	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80030f0:	231b      	movs	r3, #27
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
 80030f8:	231e      	movs	r3, #30
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003100:	2314      	movs	r3, #20
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	0018      	movs	r0, r3
 8003106:	2306      	movs	r3, #6
 8003108:	001a      	movs	r2, r3
 800310a:	2100      	movs	r1, #0
 800310c:	f005 fc50 	bl	80089b0 <memset>
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003110:	230c      	movs	r3, #12
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	0018      	movs	r0, r3
 8003116:	2306      	movs	r3, #6
 8003118:	001a      	movs	r2, r3
 800311a:	2100      	movs	r1, #0
 800311c:	f005 fc48 	bl	80089b0 <memset>
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8003120:	231d      	movs	r3, #29
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	2144      	movs	r1, #68	@ 0x44
 8003128:	5c52      	ldrb	r2, [r2, r1]
 800312a:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800312c:	251f      	movs	r5, #31
 800312e:	197c      	adds	r4, r7, r5
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	0018      	movs	r0, r3
 8003134:	f001 fa10 	bl	8004558 <null_ptr_check>
 8003138:	0003      	movs	r3, r0
 800313a:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 800313c:	0029      	movs	r1, r5
 800313e:	187b      	adds	r3, r7, r1
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	b25b      	sxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d000      	beq.n	800314a <bme680_set_sensor_settings+0x68>
 8003148:	e218      	b.n	800357c <bme680_set_sensor_settings+0x49a>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 800314a:	1dbb      	adds	r3, r7, #6
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	2208      	movs	r2, #8
 8003150:	4013      	ands	r3, r2
 8003152:	d006      	beq.n	8003162 <bme680_set_sensor_settings+0x80>
			rslt = set_gas_config(dev);
 8003154:	187c      	adds	r4, r7, r1
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 fc92 	bl	8003a82 <set_gas_config>
 800315e:	0003      	movs	r3, r0
 8003160:	7023      	strb	r3, [r4, #0]

		dev->power_mode = BME680_SLEEP_MODE;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2244      	movs	r2, #68	@ 0x44
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]
		if (rslt == BME680_OK)
 800316a:	221f      	movs	r2, #31
 800316c:	18bb      	adds	r3, r7, r2
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b25b      	sxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <bme680_set_sensor_settings+0xa2>
			rslt = bme680_set_sensor_mode(dev);
 8003176:	18bc      	adds	r4, r7, r2
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	0018      	movs	r0, r3
 800317c:	f000 fa06 	bl	800358c <bme680_set_sensor_mode>
 8003180:	0003      	movs	r3, r0
 8003182:	7023      	strb	r3, [r4, #0]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8003184:	1dbb      	adds	r3, r7, #6
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	2210      	movs	r2, #16
 800318a:	4013      	ands	r3, r2
 800318c:	d050      	beq.n	8003230 <bme680_set_sensor_settings+0x14e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	333b      	adds	r3, #59	@ 0x3b
 8003192:	0018      	movs	r0, r3
 8003194:	251f      	movs	r5, #31
 8003196:	197c      	adds	r4, r7, r5
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2207      	movs	r2, #7
 800319c:	2100      	movs	r1, #0
 800319e:	f001 f991 	bl	80044c4 <boundary_check>
 80031a2:	0003      	movs	r3, r0
 80031a4:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 80031a6:	201c      	movs	r0, #28
 80031a8:	183b      	adds	r3, r7, r0
 80031aa:	2275      	movs	r2, #117	@ 0x75
 80031ac:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
 80031ae:	197b      	adds	r3, r7, r5
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <bme680_set_sensor_settings+0xee>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80031b8:	197c      	adds	r4, r7, r5
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	231b      	movs	r3, #27
 80031be:	18f9      	adds	r1, r7, r3
 80031c0:	183b      	adds	r3, r7, r0
 80031c2:	7818      	ldrb	r0, [r3, #0]
 80031c4:	0013      	movs	r3, r2
 80031c6:	2201      	movs	r2, #1
 80031c8:	f7ff fe38 	bl	8002e3c <bme680_get_regs>
 80031cc:	0003      	movs	r3, r0
 80031ce:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_FILTER_SEL)
 80031d0:	1dbb      	adds	r3, r7, #6
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	2210      	movs	r2, #16
 80031d6:	4013      	ands	r3, r2
 80031d8:	d014      	beq.n	8003204 <bme680_set_sensor_settings+0x122>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80031da:	201b      	movs	r0, #27
 80031dc:	183b      	adds	r3, r7, r0
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	221c      	movs	r2, #28
 80031e4:	4393      	bics	r3, r2
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	213b      	movs	r1, #59	@ 0x3b
 80031ec:	5c5b      	ldrb	r3, [r3, r1]
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	211c      	movs	r1, #28
 80031f6:	400b      	ands	r3, r1
 80031f8:	b25b      	sxtb	r3, r3
 80031fa:	4313      	orrs	r3, r2
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	183b      	adds	r3, r7, r0
 8003202:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
 8003204:	201e      	movs	r0, #30
 8003206:	183b      	adds	r3, r7, r0
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2214      	movs	r2, #20
 800320c:	18ba      	adds	r2, r7, r2
 800320e:	211c      	movs	r1, #28
 8003210:	1879      	adds	r1, r7, r1
 8003212:	7809      	ldrb	r1, [r1, #0]
 8003214:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
 8003216:	183b      	adds	r3, r7, r0
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	221b      	movs	r2, #27
 800321c:	18ba      	adds	r2, r7, r2
 800321e:	7811      	ldrb	r1, [r2, #0]
 8003220:	220c      	movs	r2, #12
 8003222:	18ba      	adds	r2, r7, r2
 8003224:	54d1      	strb	r1, [r2, r3]
			count++;
 8003226:	183b      	adds	r3, r7, r0
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	183b      	adds	r3, r7, r0
 800322c:	3201      	adds	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8003230:	1dbb      	adds	r3, r7, #6
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	2220      	movs	r2, #32
 8003236:	4013      	ands	r3, r2
 8003238:	d049      	beq.n	80032ce <bme680_set_sensor_settings+0x1ec>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	333d      	adds	r3, #61	@ 0x3d
 800323e:	0018      	movs	r0, r3
 8003240:	251f      	movs	r5, #31
 8003242:	197c      	adds	r4, r7, r5
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2208      	movs	r2, #8
 8003248:	2100      	movs	r1, #0
 800324a:	f001 f93b 	bl	80044c4 <boundary_check>
 800324e:	0003      	movs	r3, r0
 8003250:	7023      	strb	r3, [r4, #0]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8003252:	201c      	movs	r0, #28
 8003254:	183b      	adds	r3, r7, r0
 8003256:	2270      	movs	r2, #112	@ 0x70
 8003258:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
 800325a:	197b      	adds	r3, r7, r5
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b25b      	sxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <bme680_set_sensor_settings+0x19a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003264:	197c      	adds	r4, r7, r5
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	231b      	movs	r3, #27
 800326a:	18f9      	adds	r1, r7, r3
 800326c:	183b      	adds	r3, r7, r0
 800326e:	7818      	ldrb	r0, [r3, #0]
 8003270:	0013      	movs	r3, r2
 8003272:	2201      	movs	r2, #1
 8003274:	f7ff fde2 	bl	8002e3c <bme680_get_regs>
 8003278:	0003      	movs	r3, r0
 800327a:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 800327c:	201b      	movs	r0, #27
 800327e:	183b      	adds	r3, r7, r0
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b25b      	sxtb	r3, r3
 8003284:	2208      	movs	r2, #8
 8003286:	4393      	bics	r3, r2
 8003288:	b25a      	sxtb	r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	213d      	movs	r1, #61	@ 0x3d
 800328e:	5c5b      	ldrb	r3, [r3, r1]
 8003290:	b25b      	sxtb	r3, r3
 8003292:	2108      	movs	r1, #8
 8003294:	400b      	ands	r3, r1
 8003296:	b25b      	sxtb	r3, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	b25b      	sxtb	r3, r3
 800329c:	b2da      	uxtb	r2, r3
 800329e:	0004      	movs	r4, r0
 80032a0:	183b      	adds	r3, r7, r0
 80032a2:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
 80032a4:	201e      	movs	r0, #30
 80032a6:	183b      	adds	r3, r7, r0
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2214      	movs	r2, #20
 80032ac:	18ba      	adds	r2, r7, r2
 80032ae:	211c      	movs	r1, #28
 80032b0:	1879      	adds	r1, r7, r1
 80032b2:	7809      	ldrb	r1, [r1, #0]
 80032b4:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
 80032b6:	183b      	adds	r3, r7, r0
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	193a      	adds	r2, r7, r4
 80032bc:	7811      	ldrb	r1, [r2, #0]
 80032be:	220c      	movs	r2, #12
 80032c0:	18ba      	adds	r2, r7, r2
 80032c2:	54d1      	strb	r1, [r2, r3]
			count++;
 80032c4:	183b      	adds	r3, r7, r0
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	183b      	adds	r3, r7, r0
 80032ca:	3201      	adds	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80032ce:	1dbb      	adds	r3, r7, #6
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	2203      	movs	r2, #3
 80032d4:	4013      	ands	r3, r2
 80032d6:	d067      	beq.n	80033a8 <bme680_set_sensor_settings+0x2c6>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	3339      	adds	r3, #57	@ 0x39
 80032dc:	0018      	movs	r0, r3
 80032de:	251f      	movs	r5, #31
 80032e0:	197c      	adds	r4, r7, r5
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2205      	movs	r2, #5
 80032e6:	2100      	movs	r1, #0
 80032e8:	f001 f8ec 	bl	80044c4 <boundary_check>
 80032ec:	0003      	movs	r3, r0
 80032ee:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80032f0:	201c      	movs	r0, #28
 80032f2:	183b      	adds	r3, r7, r0
 80032f4:	2274      	movs	r2, #116	@ 0x74
 80032f6:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
 80032f8:	197b      	adds	r3, r7, r5
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <bme680_set_sensor_settings+0x238>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003302:	197c      	adds	r4, r7, r5
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	231b      	movs	r3, #27
 8003308:	18f9      	adds	r1, r7, r3
 800330a:	183b      	adds	r3, r7, r0
 800330c:	7818      	ldrb	r0, [r3, #0]
 800330e:	0013      	movs	r3, r2
 8003310:	2201      	movs	r2, #1
 8003312:	f7ff fd93 	bl	8002e3c <bme680_get_regs>
 8003316:	0003      	movs	r3, r0
 8003318:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_OST_SEL)
 800331a:	1dbb      	adds	r3, r7, #6
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	2201      	movs	r2, #1
 8003320:	4013      	ands	r3, r2
 8003322:	d011      	beq.n	8003348 <bme680_set_sensor_settings+0x266>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8003324:	201b      	movs	r0, #27
 8003326:	183b      	adds	r3, r7, r0
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b25b      	sxtb	r3, r3
 800332c:	221f      	movs	r2, #31
 800332e:	4013      	ands	r3, r2
 8003330:	b25a      	sxtb	r2, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2139      	movs	r1, #57	@ 0x39
 8003336:	5c5b      	ldrb	r3, [r3, r1]
 8003338:	b25b      	sxtb	r3, r3
 800333a:	015b      	lsls	r3, r3, #5
 800333c:	b25b      	sxtb	r3, r3
 800333e:	4313      	orrs	r3, r2
 8003340:	b25b      	sxtb	r3, r3
 8003342:	b2da      	uxtb	r2, r3
 8003344:	183b      	adds	r3, r7, r0
 8003346:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_OSP_SEL)
 8003348:	1dbb      	adds	r3, r7, #6
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d014      	beq.n	800337c <bme680_set_sensor_settings+0x29a>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8003352:	201b      	movs	r0, #27
 8003354:	183b      	adds	r3, r7, r0
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b25b      	sxtb	r3, r3
 800335a:	221c      	movs	r2, #28
 800335c:	4393      	bics	r3, r2
 800335e:	b25a      	sxtb	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	213a      	movs	r1, #58	@ 0x3a
 8003364:	5c5b      	ldrb	r3, [r3, r1]
 8003366:	b25b      	sxtb	r3, r3
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	b25b      	sxtb	r3, r3
 800336c:	211c      	movs	r1, #28
 800336e:	400b      	ands	r3, r1
 8003370:	b25b      	sxtb	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b25b      	sxtb	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	183b      	adds	r3, r7, r0
 800337a:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr;
 800337c:	201e      	movs	r0, #30
 800337e:	183b      	adds	r3, r7, r0
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2214      	movs	r2, #20
 8003384:	18ba      	adds	r2, r7, r2
 8003386:	211c      	movs	r1, #28
 8003388:	1879      	adds	r1, r7, r1
 800338a:	7809      	ldrb	r1, [r1, #0]
 800338c:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
 800338e:	183b      	adds	r3, r7, r0
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	221b      	movs	r2, #27
 8003394:	18ba      	adds	r2, r7, r2
 8003396:	7811      	ldrb	r1, [r2, #0]
 8003398:	220c      	movs	r2, #12
 800339a:	18ba      	adds	r2, r7, r2
 800339c:	54d1      	strb	r1, [r2, r3]
			count++;
 800339e:	183b      	adds	r3, r7, r0
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	183b      	adds	r3, r7, r0
 80033a4:	3201      	adds	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80033a8:	1dbb      	adds	r3, r7, #6
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	2204      	movs	r2, #4
 80033ae:	4013      	ands	r3, r2
 80033b0:	d049      	beq.n	8003446 <bme680_set_sensor_settings+0x364>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3338      	adds	r3, #56	@ 0x38
 80033b6:	0018      	movs	r0, r3
 80033b8:	251f      	movs	r5, #31
 80033ba:	197c      	adds	r4, r7, r5
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2205      	movs	r2, #5
 80033c0:	2100      	movs	r1, #0
 80033c2:	f001 f87f 	bl	80044c4 <boundary_check>
 80033c6:	0003      	movs	r3, r0
 80033c8:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_OS_H_ADDR;
 80033ca:	201c      	movs	r0, #28
 80033cc:	183b      	adds	r3, r7, r0
 80033ce:	2272      	movs	r2, #114	@ 0x72
 80033d0:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
 80033d2:	197b      	adds	r3, r7, r5
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <bme680_set_sensor_settings+0x312>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80033dc:	197c      	adds	r4, r7, r5
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	231b      	movs	r3, #27
 80033e2:	18f9      	adds	r1, r7, r3
 80033e4:	183b      	adds	r3, r7, r0
 80033e6:	7818      	ldrb	r0, [r3, #0]
 80033e8:	0013      	movs	r3, r2
 80033ea:	2201      	movs	r2, #1
 80033ec:	f7ff fd26 	bl	8002e3c <bme680_get_regs>
 80033f0:	0003      	movs	r3, r0
 80033f2:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80033f4:	201b      	movs	r0, #27
 80033f6:	183b      	adds	r3, r7, r0
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	2207      	movs	r2, #7
 80033fe:	4393      	bics	r3, r2
 8003400:	b25a      	sxtb	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2138      	movs	r1, #56	@ 0x38
 8003406:	5c5b      	ldrb	r3, [r3, r1]
 8003408:	b25b      	sxtb	r3, r3
 800340a:	2107      	movs	r1, #7
 800340c:	400b      	ands	r3, r1
 800340e:	b25b      	sxtb	r3, r3
 8003410:	4313      	orrs	r3, r2
 8003412:	b25b      	sxtb	r3, r3
 8003414:	b2da      	uxtb	r2, r3
 8003416:	0004      	movs	r4, r0
 8003418:	183b      	adds	r3, r7, r0
 800341a:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
 800341c:	201e      	movs	r0, #30
 800341e:	183b      	adds	r3, r7, r0
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2214      	movs	r2, #20
 8003424:	18ba      	adds	r2, r7, r2
 8003426:	211c      	movs	r1, #28
 8003428:	1879      	adds	r1, r7, r1
 800342a:	7809      	ldrb	r1, [r1, #0]
 800342c:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
 800342e:	183b      	adds	r3, r7, r0
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	193a      	adds	r2, r7, r4
 8003434:	7811      	ldrb	r1, [r2, #0]
 8003436:	220c      	movs	r2, #12
 8003438:	18ba      	adds	r2, r7, r2
 800343a:	54d1      	strb	r1, [r2, r3]
			count++;
 800343c:	183b      	adds	r3, r7, r0
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	183b      	adds	r3, r7, r0
 8003442:	3201      	adds	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8003446:	1dbb      	adds	r3, r7, #6
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	22c0      	movs	r2, #192	@ 0xc0
 800344c:	4013      	ands	r3, r2
 800344e:	d100      	bne.n	8003452 <bme680_set_sensor_settings+0x370>
 8003450:	e07a      	b.n	8003548 <bme680_set_sensor_settings+0x466>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	333e      	adds	r3, #62	@ 0x3e
 8003456:	0018      	movs	r0, r3
 8003458:	251f      	movs	r5, #31
 800345a:	197c      	adds	r4, r7, r5
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2201      	movs	r2, #1
 8003460:	2100      	movs	r1, #0
 8003462:	f001 f82f 	bl	80044c4 <boundary_check>
 8003466:	0003      	movs	r3, r0
 8003468:	7023      	strb	r3, [r4, #0]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 800346a:	002a      	movs	r2, r5
 800346c:	18bb      	adds	r3, r7, r2
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b25b      	sxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <bme680_set_sensor_settings+0x3aa>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	333c      	adds	r3, #60	@ 0x3c
 800347a:	0018      	movs	r0, r3
 800347c:	18bc      	adds	r4, r7, r2
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	220a      	movs	r2, #10
 8003482:	2100      	movs	r1, #0
 8003484:	f001 f81e 	bl	80044c4 <boundary_check>
 8003488:	0003      	movs	r3, r0
 800348a:	7023      	strb	r3, [r4, #0]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 800348c:	201c      	movs	r0, #28
 800348e:	183b      	adds	r3, r7, r0
 8003490:	2271      	movs	r2, #113	@ 0x71
 8003492:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
 8003494:	221f      	movs	r2, #31
 8003496:	18bb      	adds	r3, r7, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b25b      	sxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <bme680_set_sensor_settings+0x3d6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80034a0:	18bc      	adds	r4, r7, r2
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	231b      	movs	r3, #27
 80034a6:	18f9      	adds	r1, r7, r3
 80034a8:	183b      	adds	r3, r7, r0
 80034aa:	7818      	ldrb	r0, [r3, #0]
 80034ac:	0013      	movs	r3, r2
 80034ae:	2201      	movs	r2, #1
 80034b0:	f7ff fcc4 	bl	8002e3c <bme680_get_regs>
 80034b4:	0003      	movs	r3, r0
 80034b6:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_RUN_GAS_SEL)
 80034b8:	1dbb      	adds	r3, r7, #6
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	2240      	movs	r2, #64	@ 0x40
 80034be:	4013      	ands	r3, r2
 80034c0:	d014      	beq.n	80034ec <bme680_set_sensor_settings+0x40a>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80034c2:	201b      	movs	r0, #27
 80034c4:	183b      	adds	r3, r7, r0
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	2210      	movs	r2, #16
 80034cc:	4393      	bics	r3, r2
 80034ce:	b25a      	sxtb	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	213e      	movs	r1, #62	@ 0x3e
 80034d4:	5c5b      	ldrb	r3, [r3, r1]
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	2110      	movs	r1, #16
 80034de:	400b      	ands	r3, r1
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	4313      	orrs	r3, r2
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	183b      	adds	r3, r7, r0
 80034ea:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_NBCONV_SEL)
 80034ec:	1dbb      	adds	r3, r7, #6
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	2280      	movs	r2, #128	@ 0x80
 80034f2:	4013      	ands	r3, r2
 80034f4:	d012      	beq.n	800351c <bme680_set_sensor_settings+0x43a>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80034f6:	201b      	movs	r0, #27
 80034f8:	183b      	adds	r3, r7, r0
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	220f      	movs	r2, #15
 8003500:	4393      	bics	r3, r2
 8003502:	b25a      	sxtb	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	213c      	movs	r1, #60	@ 0x3c
 8003508:	5c5b      	ldrb	r3, [r3, r1]
 800350a:	b25b      	sxtb	r3, r3
 800350c:	210f      	movs	r1, #15
 800350e:	400b      	ands	r3, r1
 8003510:	b25b      	sxtb	r3, r3
 8003512:	4313      	orrs	r3, r2
 8003514:	b25b      	sxtb	r3, r3
 8003516:	b2da      	uxtb	r2, r3
 8003518:	183b      	adds	r3, r7, r0
 800351a:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
 800351c:	201e      	movs	r0, #30
 800351e:	183b      	adds	r3, r7, r0
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2214      	movs	r2, #20
 8003524:	18ba      	adds	r2, r7, r2
 8003526:	211c      	movs	r1, #28
 8003528:	1879      	adds	r1, r7, r1
 800352a:	7809      	ldrb	r1, [r1, #0]
 800352c:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
 800352e:	183b      	adds	r3, r7, r0
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	221b      	movs	r2, #27
 8003534:	18ba      	adds	r2, r7, r2
 8003536:	7811      	ldrb	r1, [r2, #0]
 8003538:	220c      	movs	r2, #12
 800353a:	18ba      	adds	r2, r7, r2
 800353c:	54d1      	strb	r1, [r2, r3]
			count++;
 800353e:	183b      	adds	r3, r7, r0
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	183b      	adds	r3, r7, r0
 8003544:	3201      	adds	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
		}

		if (rslt == BME680_OK)
 8003548:	221f      	movs	r2, #31
 800354a:	18bb      	adds	r3, r7, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b25b      	sxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10d      	bne.n	8003570 <bme680_set_sensor_settings+0x48e>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8003554:	18bc      	adds	r4, r7, r2
 8003556:	683d      	ldr	r5, [r7, #0]
 8003558:	231e      	movs	r3, #30
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	230c      	movs	r3, #12
 8003560:	18f9      	adds	r1, r7, r3
 8003562:	2314      	movs	r3, #20
 8003564:	18f8      	adds	r0, r7, r3
 8003566:	002b      	movs	r3, r5
 8003568:	f7ff fcc0 	bl	8002eec <bme680_set_regs>
 800356c:	0003      	movs	r3, r0
 800356e:	7023      	strb	r3, [r4, #0]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	221d      	movs	r2, #29
 8003574:	18ba      	adds	r2, r7, r2
 8003576:	2144      	movs	r1, #68	@ 0x44
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	545a      	strb	r2, [r3, r1]
	}

	return rslt;
 800357c:	231f      	movs	r3, #31
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	b25b      	sxtb	r3, r3
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b008      	add	sp, #32
 800358a:	bdb0      	pop	{r4, r5, r7, pc}

0800358c <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8003594:	230e      	movs	r3, #14
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 800359c:	230c      	movs	r3, #12
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	2274      	movs	r2, #116	@ 0x74
 80035a2:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80035a4:	250f      	movs	r5, #15
 80035a6:	197c      	adds	r4, r7, r5
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 ffd4 	bl	8004558 <null_ptr_check>
 80035b0:	0003      	movs	r3, r0
 80035b2:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 80035b4:	197b      	adds	r3, r7, r5
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b25b      	sxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d15e      	bne.n	800367c <bme680_set_sensor_mode+0xf0>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80035be:	260f      	movs	r6, #15
 80035c0:	19bc      	adds	r4, r7, r6
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	250d      	movs	r5, #13
 80035c6:	1979      	adds	r1, r7, r5
 80035c8:	2201      	movs	r2, #1
 80035ca:	2074      	movs	r0, #116	@ 0x74
 80035cc:	f7ff fc36 	bl	8002e3c <bme680_get_regs>
 80035d0:	0003      	movs	r3, r0
 80035d2:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
 80035d4:	0034      	movs	r4, r6
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d120      	bne.n	8003622 <bme680_set_sensor_mode+0x96>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80035e0:	0028      	movs	r0, r5
 80035e2:	183b      	adds	r3, r7, r0
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	250e      	movs	r5, #14
 80035e8:	197b      	adds	r3, r7, r5
 80035ea:	2103      	movs	r1, #3
 80035ec:	400a      	ands	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]

				if (pow_mode != BME680_SLEEP_MODE) {
 80035f0:	197b      	adds	r3, r7, r5
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d014      	beq.n	8003622 <bme680_set_sensor_mode+0x96>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80035f8:	183b      	adds	r3, r7, r0
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2203      	movs	r2, #3
 80035fe:	4393      	bics	r3, r2
 8003600:	b2da      	uxtb	r2, r3
 8003602:	183b      	adds	r3, r7, r0
 8003604:	701a      	strb	r2, [r3, #0]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003606:	193c      	adds	r4, r7, r4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1839      	adds	r1, r7, r0
 800360c:	220c      	movs	r2, #12
 800360e:	18b8      	adds	r0, r7, r2
 8003610:	2201      	movs	r2, #1
 8003612:	f7ff fc6b 	bl	8002eec <bme680_set_regs>
 8003616:	0003      	movs	r3, r0
 8003618:	7023      	strb	r3, [r4, #0]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361e:	200a      	movs	r0, #10
 8003620:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8003622:	230e      	movs	r3, #14
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1c8      	bne.n	80035be <bme680_set_sensor_mode+0x32>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2244      	movs	r2, #68	@ 0x44
 8003630:	5c9b      	ldrb	r3, [r3, r2]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d022      	beq.n	800367c <bme680_set_sensor_mode+0xf0>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8003636:	200d      	movs	r0, #13
 8003638:	183b      	adds	r3, r7, r0
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b25b      	sxtb	r3, r3
 800363e:	2203      	movs	r2, #3
 8003640:	4393      	bics	r3, r2
 8003642:	b25a      	sxtb	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2144      	movs	r1, #68	@ 0x44
 8003648:	5c5b      	ldrb	r3, [r3, r1]
 800364a:	b25b      	sxtb	r3, r3
 800364c:	2103      	movs	r1, #3
 800364e:	400b      	ands	r3, r1
 8003650:	b25b      	sxtb	r3, r3
 8003652:	4313      	orrs	r3, r2
 8003654:	b25b      	sxtb	r3, r3
 8003656:	b2da      	uxtb	r2, r3
 8003658:	183b      	adds	r3, r7, r0
 800365a:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK)
 800365c:	220f      	movs	r2, #15
 800365e:	18bb      	adds	r3, r7, r2
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b25b      	sxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <bme680_set_sensor_mode+0xf0>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003668:	18bc      	adds	r4, r7, r2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1839      	adds	r1, r7, r0
 800366e:	220c      	movs	r2, #12
 8003670:	18b8      	adds	r0, r7, r2
 8003672:	2201      	movs	r2, #1
 8003674:	f7ff fc3a 	bl	8002eec <bme680_set_regs>
 8003678:	0003      	movs	r3, r0
 800367a:	7023      	strb	r3, [r4, #0]
		}
	}

	return rslt;
 800367c:	230f      	movs	r3, #15
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b25b      	sxtb	r3, r3
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b005      	add	sp, #20
 800368a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800368c <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003696:	2008      	movs	r0, #8
 8003698:	183b      	adds	r3, r7, r0
 800369a:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <bme680_get_profile_dur+0xb8>)
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	6019      	str	r1, [r3, #0]
 80036a0:	8892      	ldrh	r2, [r2, #4]
 80036a2:	809a      	strh	r2, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2239      	movs	r2, #57	@ 0x39
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	001a      	movs	r2, r3
 80036ac:	0001      	movs	r1, r0
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	5c9b      	ldrb	r3, [r3, r2]
 80036b2:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	223a      	movs	r2, #58	@ 0x3a
 80036b8:	5c9b      	ldrb	r3, [r3, r2]
 80036ba:	001a      	movs	r2, r3
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	5c9b      	ldrb	r3, [r3, r2]
 80036c0:	001a      	movs	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	189b      	adds	r3, r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2238      	movs	r2, #56	@ 0x38
 80036cc:	5c9b      	ldrb	r3, [r3, r2]
 80036ce:	001a      	movs	r2, r3
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	5c9b      	ldrb	r3, [r3, r2]
 80036d4:	001a      	movs	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	189b      	adds	r3, r3, r2
 80036da:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	4a1a      	ldr	r2, [pc, #104]	@ (8003748 <bme680_get_profile_dur+0xbc>)
 80036e0:	4353      	muls	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4a19      	ldr	r2, [pc, #100]	@ (800374c <bme680_get_profile_dur+0xc0>)
 80036e8:	4694      	mov	ip, r2
 80036ea:	4463      	add	r3, ip
 80036ec:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4a17      	ldr	r2, [pc, #92]	@ (8003750 <bme680_get_profile_dur+0xc4>)
 80036f2:	4694      	mov	ip, r2
 80036f4:	4463      	add	r3, ip
 80036f6:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	33f5      	adds	r3, #245	@ 0xf5
 80036fc:	33ff      	adds	r3, #255	@ 0xff
 80036fe:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	22fa      	movs	r2, #250	@ 0xfa
 8003704:	0091      	lsls	r1, r2, #2
 8003706:	0018      	movs	r0, r3
 8003708:	f7fc fd18 	bl	800013c <__udivsi3>
 800370c:	0003      	movs	r3, r0
 800370e:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3301      	adds	r3, #1
 8003714:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	b29a      	uxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	223e      	movs	r2, #62	@ 0x3e
 8003722:	5c9b      	ldrb	r3, [r3, r2]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <bme680_get_profile_dur+0xae>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2142      	movs	r1, #66	@ 0x42
 8003730:	5a5b      	ldrh	r3, [r3, r1]
 8003732:	18d3      	adds	r3, r2, r3
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	801a      	strh	r2, [r3, #0]
	}
}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b006      	add	sp, #24
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	0800ad48 	.word	0x0800ad48
 8003748:	000007ab 	.word	0x000007ab
 800374c:	00000774 	.word	0x00000774
 8003750:	00000951 	.word	0x00000951

08003754 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800375e:	250f      	movs	r5, #15
 8003760:	197c      	adds	r4, r7, r5
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 fef7 	bl	8004558 <null_ptr_check>
 800376a:	0003      	movs	r3, r0
 800376c:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 800376e:	197b      	adds	r3, r7, r5
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b25b      	sxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d11b      	bne.n	80037b0 <bme680_get_sensor_data+0x5c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8003778:	197c      	adds	r4, r7, r5
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	0011      	movs	r1, r2
 8003780:	0018      	movs	r0, r3
 8003782:	f000 fd0a 	bl	800419a <read_field_data>
 8003786:	0003      	movs	r3, r0
 8003788:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
 800378a:	197b      	adds	r3, r7, r5
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b25b      	sxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10d      	bne.n	80037b0 <bme680_get_sensor_data+0x5c>
			if (data->status & BME680_NEW_DATA_MSK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b25b      	sxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	da04      	bge.n	80037a8 <bme680_get_sensor_data+0x54>
				dev->new_fields = 1;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2245      	movs	r2, #69	@ 0x45
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]
 80037a6:	e003      	b.n	80037b0 <bme680_get_sensor_data+0x5c>
			else
				dev->new_fields = 0;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2245      	movs	r2, #69	@ 0x45
 80037ac:	2100      	movs	r1, #0
 80037ae:	5499      	strb	r1, [r3, r2]
		}
	}

	return rslt;
 80037b0:	230f      	movs	r3, #15
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b25b      	sxtb	r3, r3
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b004      	add	sp, #16
 80037be:	bdb0      	pop	{r4, r5, r7, pc}

080037c0 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b08f      	sub	sp, #60	@ 0x3c
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80037c8:	260c      	movs	r6, #12
 80037ca:	19bb      	adds	r3, r7, r6
 80037cc:	0018      	movs	r0, r3
 80037ce:	2329      	movs	r3, #41	@ 0x29
 80037d0:	001a      	movs	r2, r3
 80037d2:	2100      	movs	r1, #0
 80037d4:	f005 f8ec 	bl	80089b0 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 80037d8:	230b      	movs	r3, #11
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80037e0:	2537      	movs	r5, #55	@ 0x37
 80037e2:	197c      	adds	r4, r7, r5
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 feb6 	bl	8004558 <null_ptr_check>
 80037ec:	0003      	movs	r3, r0
 80037ee:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 80037f0:	197b      	adds	r3, r7, r5
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b25b      	sxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d000      	beq.n	80037fc <get_calib_data+0x3c>
 80037fa:	e13a      	b.n	8003a72 <get_calib_data+0x2b2>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80037fc:	197c      	adds	r4, r7, r5
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	19b9      	adds	r1, r7, r6
 8003802:	2219      	movs	r2, #25
 8003804:	2089      	movs	r0, #137	@ 0x89
 8003806:	f7ff fb19 	bl	8002e3c <bme680_get_regs>
 800380a:	0003      	movs	r3, r0
 800380c:	7023      	strb	r3, [r4, #0]
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 800380e:	197b      	adds	r3, r7, r5
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b25b      	sxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <get_calib_data+0x70>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8003818:	197c      	adds	r4, r7, r5
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	19bb      	adds	r3, r7, r6
 800381e:	3319      	adds	r3, #25
 8003820:	0019      	movs	r1, r3
 8003822:	0013      	movs	r3, r2
 8003824:	2210      	movs	r2, #16
 8003826:	20e1      	movs	r0, #225	@ 0xe1
 8003828:	f7ff fb08 	bl	8002e3c <bme680_get_regs>
 800382c:	0003      	movs	r3, r0
 800382e:	7023      	strb	r3, [r4, #0]
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8003830:	200c      	movs	r0, #12
 8003832:	183b      	adds	r3, r7, r0
 8003834:	2222      	movs	r2, #34	@ 0x22
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	b21b      	sxth	r3, r3
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	b21a      	sxth	r2, r3
 800383e:	183b      	adds	r3, r7, r0
 8003840:	2121      	movs	r1, #33	@ 0x21
 8003842:	5c5b      	ldrb	r3, [r3, r1]
 8003844:	b21b      	sxth	r3, r3
 8003846:	4313      	orrs	r3, r2
 8003848:	b21b      	sxth	r3, r3
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8003850:	183b      	adds	r3, r7, r0
 8003852:	789b      	ldrb	r3, [r3, #2]
 8003854:	b21b      	sxth	r3, r3
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	b21a      	sxth	r2, r3
 800385a:	183b      	adds	r3, r7, r0
 800385c:	785b      	ldrb	r3, [r3, #1]
 800385e:	b21b      	sxth	r3, r3
 8003860:	4313      	orrs	r3, r2
 8003862:	b21a      	sxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8003868:	0001      	movs	r1, r0
 800386a:	187b      	adds	r3, r7, r1
 800386c:	78db      	ldrb	r3, [r3, #3]
 800386e:	b25a      	sxtb	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8003874:	187b      	adds	r3, r7, r1
 8003876:	799b      	ldrb	r3, [r3, #6]
 8003878:	b21b      	sxth	r3, r3
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	b21a      	sxth	r2, r3
 800387e:	187b      	adds	r3, r7, r1
 8003880:	795b      	ldrb	r3, [r3, #5]
 8003882:	b21b      	sxth	r3, r3
 8003884:	4313      	orrs	r3, r2
 8003886:	b21b      	sxth	r3, r3
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 800388e:	187b      	adds	r3, r7, r1
 8003890:	7a1b      	ldrb	r3, [r3, #8]
 8003892:	b21b      	sxth	r3, r3
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	b21a      	sxth	r2, r3
 8003898:	187b      	adds	r3, r7, r1
 800389a:	79db      	ldrb	r3, [r3, #7]
 800389c:	b21b      	sxth	r3, r3
 800389e:	4313      	orrs	r3, r2
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80038a6:	0008      	movs	r0, r1
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	7a5b      	ldrb	r3, [r3, #9]
 80038ac:	b259      	sxtb	r1, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80038b4:	0001      	movs	r1, r0
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	7b1b      	ldrb	r3, [r3, #12]
 80038ba:	b21b      	sxth	r3, r3
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	b21a      	sxth	r2, r3
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	7adb      	ldrb	r3, [r3, #11]
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b21a      	sxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	845a      	strh	r2, [r3, #34]	@ 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	7b9b      	ldrb	r3, [r3, #14]
 80038d2:	b21b      	sxth	r3, r3
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	b21a      	sxth	r2, r3
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	7b5b      	ldrb	r3, [r3, #13]
 80038dc:	b21b      	sxth	r3, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	b21a      	sxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	849a      	strh	r2, [r3, #36]	@ 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80038e6:	0008      	movs	r0, r1
 80038e8:	183b      	adds	r3, r7, r0
 80038ea:	7c1b      	ldrb	r3, [r3, #16]
 80038ec:	b259      	sxtb	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2226      	movs	r2, #38	@ 0x26
 80038f2:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	7bdb      	ldrb	r3, [r3, #15]
 80038f8:	b259      	sxtb	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2227      	movs	r2, #39	@ 0x27
 80038fe:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 8003900:	183b      	adds	r3, r7, r0
 8003902:	7d1b      	ldrb	r3, [r3, #20]
 8003904:	b21b      	sxth	r3, r3
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	b21a      	sxth	r2, r3
 800390a:	183b      	adds	r3, r7, r0
 800390c:	7cdb      	ldrb	r3, [r3, #19]
 800390e:	b21b      	sxth	r3, r3
 8003910:	4313      	orrs	r3, r2
 8003912:	b21a      	sxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	851a      	strh	r2, [r3, #40]	@ 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8003918:	183b      	adds	r3, r7, r0
 800391a:	7d9b      	ldrb	r3, [r3, #22]
 800391c:	b21b      	sxth	r3, r3
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	b21a      	sxth	r2, r3
 8003922:	183b      	adds	r3, r7, r0
 8003924:	7d5b      	ldrb	r3, [r3, #21]
 8003926:	b21b      	sxth	r3, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	b21a      	sxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8003930:	183b      	adds	r3, r7, r0
 8003932:	7dd9      	ldrb	r1, [r3, #23]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	222c      	movs	r2, #44	@ 0x2c
 8003938:	5499      	strb	r1, [r3, r2]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800393a:	183b      	adds	r3, r7, r0
 800393c:	7edb      	ldrb	r3, [r3, #27]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 800393e:	b21b      	sxth	r3, r3
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	b21a      	sxth	r2, r3
 8003944:	183b      	adds	r3, r7, r0
 8003946:	7e9b      	ldrb	r3, [r3, #26]
 8003948:	b21b      	sxth	r3, r3
 800394a:	210f      	movs	r1, #15
 800394c:	400b      	ands	r3, r1
 800394e:	b21b      	sxth	r3, r3
 8003950:	4313      	orrs	r3, r2
 8003952:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800395a:	183b      	adds	r3, r7, r0
 800395c:	7e5b      	ldrb	r3, [r3, #25]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 800395e:	b21b      	sxth	r3, r3
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	b21a      	sxth	r2, r3
 8003964:	183b      	adds	r3, r7, r0
 8003966:	7e9b      	ldrb	r3, [r3, #26]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	b2db      	uxtb	r3, r3
 800396c:	b21b      	sxth	r3, r3
 800396e:	4313      	orrs	r3, r2
 8003970:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8003978:	183b      	adds	r3, r7, r0
 800397a:	7f1b      	ldrb	r3, [r3, #28]
 800397c:	b25a      	sxtb	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8003982:	183b      	adds	r3, r7, r0
 8003984:	7f5b      	ldrb	r3, [r3, #29]
 8003986:	b25a      	sxtb	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 800398c:	183b      	adds	r3, r7, r0
 800398e:	7f9b      	ldrb	r3, [r3, #30]
 8003990:	b25a      	sxtb	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8003996:	183b      	adds	r3, r7, r0
 8003998:	7fda      	ldrb	r2, [r3, #31]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 800399e:	183b      	adds	r3, r7, r0
 80039a0:	2220      	movs	r2, #32
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	b25a      	sxtb	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80039aa:	183b      	adds	r3, r7, r0
 80039ac:	2225      	movs	r2, #37	@ 0x25
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	b25a      	sxtb	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80039b6:	183b      	adds	r3, r7, r0
 80039b8:	2224      	movs	r2, #36	@ 0x24
 80039ba:	5c9b      	ldrb	r3, [r3, r2]
 80039bc:	b21b      	sxth	r3, r3
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	b21a      	sxth	r2, r3
 80039c2:	183b      	adds	r3, r7, r0
 80039c4:	2123      	movs	r1, #35	@ 0x23
 80039c6:	5c5b      	ldrb	r3, [r3, r1]
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	4313      	orrs	r3, r2
 80039cc:	b21a      	sxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80039d2:	183b      	adds	r3, r7, r0
 80039d4:	2226      	movs	r2, #38	@ 0x26
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	b25a      	sxtb	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 80039de:	2237      	movs	r2, #55	@ 0x37
 80039e0:	18bb      	adds	r3, r7, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d13a      	bne.n	8003a60 <get_calib_data+0x2a0>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 80039ea:	18bc      	adds	r4, r7, r2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	250b      	movs	r5, #11
 80039f0:	1979      	adds	r1, r7, r5
 80039f2:	2201      	movs	r2, #1
 80039f4:	2002      	movs	r0, #2
 80039f6:	f7ff fa21 	bl	8002e3c <bme680_get_regs>
 80039fa:	0003      	movs	r3, r0
 80039fc:	7023      	strb	r3, [r4, #0]

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80039fe:	197b      	adds	r3, r7, r5
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	001a      	movs	r2, r3
 8003a04:	2330      	movs	r3, #48	@ 0x30
 8003a06:	4013      	ands	r3, r2
 8003a08:	d500      	bpl.n	8003a0c <get_calib_data+0x24c>
 8003a0a:	330f      	adds	r3, #15
 8003a0c:	111b      	asrs	r3, r3, #4
 8003a0e:	b2d9      	uxtb	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2234      	movs	r2, #52	@ 0x34
 8003a14:	5499      	strb	r1, [r3, r2]
			if (rslt == BME680_OK) {
 8003a16:	2537      	movs	r5, #55	@ 0x37
 8003a18:	197b      	adds	r3, r7, r5
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	b25b      	sxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11e      	bne.n	8003a60 <get_calib_data+0x2a0>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8003a22:	197c      	adds	r4, r7, r5
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	260b      	movs	r6, #11
 8003a28:	19b9      	adds	r1, r7, r6
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7ff fa05 	bl	8002e3c <bme680_get_regs>
 8003a32:	0003      	movs	r3, r0
 8003a34:	7023      	strb	r3, [r4, #0]

				dev->calib.res_heat_val = (int8_t) temp_var;
 8003a36:	0030      	movs	r0, r6
 8003a38:	183b      	adds	r3, r7, r0
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	b259      	sxtb	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2235      	movs	r2, #53	@ 0x35
 8003a42:	5499      	strb	r1, [r3, r2]
				if (rslt == BME680_OK)
 8003a44:	197b      	adds	r3, r7, r5
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <get_calib_data+0x2a0>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8003a4e:	197c      	adds	r4, r7, r5
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	1839      	adds	r1, r7, r0
 8003a54:	2201      	movs	r2, #1
 8003a56:	2004      	movs	r0, #4
 8003a58:	f7ff f9f0 	bl	8002e3c <bme680_get_regs>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	7023      	strb	r3, [r4, #0]
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8003a60:	230b      	movs	r3, #11
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b25b      	sxtb	r3, r3
 8003a68:	111b      	asrs	r3, r3, #4
 8003a6a:	b259      	sxtb	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2236      	movs	r2, #54	@ 0x36
 8003a70:	5499      	strb	r1, [r3, r2]
	}

	return rslt;
 8003a72:	2337      	movs	r3, #55	@ 0x37
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b25b      	sxtb	r3, r3
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b00f      	add	sp, #60	@ 0x3c
 8003a80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a82 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8003a82:	b5b0      	push	{r4, r5, r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003a8a:	250f      	movs	r5, #15
 8003a8c:	197c      	adds	r4, r7, r5
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 fd61 	bl	8004558 <null_ptr_check>
 8003a96:	0003      	movs	r3, r0
 8003a98:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 8003a9a:	197b      	adds	r3, r7, r5
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d142      	bne.n	8003b2a <set_gas_config+0xa8>

		uint8_t reg_addr[2] = {0};
 8003aa4:	240c      	movs	r4, #12
 8003aa6:	193b      	adds	r3, r7, r4
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	801a      	strh	r2, [r3, #0]
		uint8_t reg_data[2] = {0};
 8003aac:	2508      	movs	r5, #8
 8003aae:	197b      	adds	r3, r7, r5
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	801a      	strh	r2, [r3, #0]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2244      	movs	r2, #68	@ 0x44
 8003ab8:	5c9b      	ldrb	r3, [r3, r2]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d120      	bne.n	8003b00 <set_gas_config+0x7e>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	225a      	movs	r2, #90	@ 0x5a
 8003ac2:	701a      	strb	r2, [r3, #0]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2240      	movs	r2, #64	@ 0x40
 8003ac8:	5a9b      	ldrh	r3, [r3, r2]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	0011      	movs	r1, r2
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 faac 	bl	800402c <calc_heater_res>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	197b      	adds	r3, r7, r5
 8003ada:	701a      	strb	r2, [r3, #0]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	2264      	movs	r2, #100	@ 0x64
 8003ae0:	705a      	strb	r2, [r3, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2242      	movs	r2, #66	@ 0x42
 8003ae6:	5a9b      	ldrh	r3, [r3, r2]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 fb1f 	bl	800412c <calc_heater_dur>
 8003aee:	0003      	movs	r3, r0
 8003af0:	001a      	movs	r2, r3
 8003af2:	197b      	adds	r3, r7, r5
 8003af4:	705a      	strb	r2, [r3, #1]
			dev->gas_sett.nb_conv = 0;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	223c      	movs	r2, #60	@ 0x3c
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]
 8003afe:	e003      	b.n	8003b08 <set_gas_config+0x86>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8003b00:	230f      	movs	r3, #15
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
		}
		if (rslt == BME680_OK)
 8003b08:	220f      	movs	r2, #15
 8003b0a:	18bb      	adds	r3, r7, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <set_gas_config+0xa8>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8003b14:	18bc      	adds	r4, r7, r2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	18b9      	adds	r1, r7, r2
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	18b8      	adds	r0, r7, r2
 8003b20:	2202      	movs	r2, #2
 8003b22:	f7ff f9e3 	bl	8002eec <bme680_set_regs>
 8003b26:	0003      	movs	r3, r0
 8003b28:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8003b2a:	230f      	movs	r3, #15
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b25b      	sxtb	r3, r3
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b004      	add	sp, #16
 8003b38:	bdb0      	pop	{r4, r5, r7, pc}

08003b3a <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8003b3a:	b5b0      	push	{r4, r5, r7, lr}
 8003b3c:	b090      	sub	sp, #64	@ 0x40
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	61f8      	str	r0, [r7, #28]
 8003b42:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	10da      	asrs	r2, r3, #3
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	8adb      	ldrh	r3, [r3, #22]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b52:	17db      	asrs	r3, r3, #31
 8003b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2218      	movs	r2, #24
 8003b5a:	5e9b      	ldrsh	r3, [r3, r2]
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	17db      	asrs	r3, r3, #31
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b66:	68b8      	ldr	r0, [r7, #8]
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	f7fc fcbf 	bl	80004ec <__aeabi_lmul>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	000b      	movs	r3, r1
 8003b72:	0559      	lsls	r1, r3, #21
 8003b74:	0ad0      	lsrs	r0, r2, #11
 8003b76:	4301      	orrs	r1, r0
 8003b78:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b7a:	12db      	asrs	r3, r3, #11
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b80:	07db      	lsls	r3, r3, #31
 8003b82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b84:	0854      	lsrs	r4, r2, #1
 8003b86:	431c      	orrs	r4, r3
 8003b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8a:	105d      	asrs	r5, r3, #1
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8e:	07db      	lsls	r3, r3, #31
 8003b90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b92:	0852      	lsrs	r2, r2, #1
 8003b94:	613a      	str	r2, [r7, #16]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	613a      	str	r2, [r7, #16]
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9e:	105b      	asrs	r3, r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	0020      	movs	r0, r4
 8003ba8:	0029      	movs	r1, r5
 8003baa:	f7fc fc9f 	bl	80004ec <__aeabi_lmul>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	000b      	movs	r3, r1
 8003bb2:	0519      	lsls	r1, r3, #20
 8003bb4:	0b10      	lsrs	r0, r2, #12
 8003bb6:	4301      	orrs	r1, r0
 8003bb8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bba:	131b      	asrs	r3, r3, #12
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	7e9b      	ldrb	r3, [r3, #26]
 8003bc2:	b25b      	sxtb	r3, r3
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	17db      	asrs	r3, r3, #31
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd0:	6838      	ldr	r0, [r7, #0]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	f7fc fc8a 	bl	80004ec <__aeabi_lmul>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	000b      	movs	r3, r1
 8003bdc:	0499      	lsls	r1, r3, #18
 8003bde:	0b90      	lsrs	r0, r2, #14
 8003be0:	4301      	orrs	r1, r0
 8003be2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003be4:	139b      	asrs	r3, r3, #14
 8003be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8003be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bec:	18d3      	adds	r3, r2, r3
 8003bee:	001a      	movs	r2, r3
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bf8:	0013      	movs	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	189b      	adds	r3, r3, r2
 8003bfe:	3380      	adds	r3, #128	@ 0x80
 8003c00:	121a      	asrs	r2, r3, #8
 8003c02:	210e      	movs	r1, #14
 8003c04:	2018      	movs	r0, #24
 8003c06:	180b      	adds	r3, r1, r0
 8003c08:	19db      	adds	r3, r3, r7
 8003c0a:	801a      	strh	r2, [r3, #0]

	return calc_temp;
 8003c0c:	180b      	adds	r3, r1, r0
 8003c0e:	19db      	adds	r3, r3, r7
 8003c10:	2200      	movs	r2, #0
 8003c12:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b010      	add	sp, #64	@ 0x40
 8003c1a:	bdb0      	pop	{r4, r5, r7, pc}

08003c1c <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	105b      	asrs	r3, r3, #1
 8003c2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003d64 <calc_pressure+0x148>)
 8003c2e:	4694      	mov	ip, r2
 8003c30:	4463      	add	r3, ip
 8003c32:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	109b      	asrs	r3, r3, #2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	1092      	asrs	r2, r2, #2
 8003c3c:	4353      	muls	r3, r2
 8003c3e:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	2126      	movs	r1, #38	@ 0x26
 8003c44:	5652      	ldrsb	r2, [r2, r1]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003c46:	4353      	muls	r3, r2
 8003c48:	109b      	asrs	r3, r3, #2
 8003c4a:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2224      	movs	r2, #36	@ 0x24
 8003c50:	5e9b      	ldrsh	r3, [r3, r2]
 8003c52:	001a      	movs	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4353      	muls	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	109a      	asrs	r2, r3, #2
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2122      	movs	r1, #34	@ 0x22
 8003c68:	5e5b      	ldrsh	r3, [r3, r1]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	109b      	asrs	r3, r3, #2
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	1092      	asrs	r2, r2, #2
 8003c78:	4353      	muls	r3, r2
 8003c7a:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	2120      	movs	r1, #32
 8003c80:	5652      	ldrsb	r2, [r2, r1]
 8003c82:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003c84:	4353      	muls	r3, r2
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003c86:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	211e      	movs	r1, #30
 8003c8c:	5e5b      	ldrsh	r3, [r3, r1]
 8003c8e:	0019      	movs	r1, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	434b      	muls	r3, r1
 8003c94:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003c96:	18d3      	adds	r3, r2, r3
 8003c98:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	149b      	asrs	r3, r3, #18
 8003c9e:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2280      	movs	r2, #128	@ 0x80
 8003ca4:	0212      	lsls	r2, r2, #8
 8003ca6:	4694      	mov	ip, r2
 8003ca8:	4463      	add	r3, ip
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	8b92      	ldrh	r2, [r2, #28]
 8003cae:	4353      	muls	r3, r2
 8003cb0:	13db      	asrs	r3, r3, #15
 8003cb2:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	0352      	lsls	r2, r2, #13
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	131b      	asrs	r3, r3, #12
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	001a      	movs	r2, r3
 8003cc8:	4b27      	ldr	r3, [pc, #156]	@ (8003d68 <calc_pressure+0x14c>)
 8003cca:	4353      	muls	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	05db      	lsls	r3, r3, #23
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	db07      	blt.n	8003ce8 <calc_pressure+0xcc>
		pressure_comp = ((pressure_comp / var1) << 1);
 8003cd8:	6939      	ldr	r1, [r7, #16]
 8003cda:	6978      	ldr	r0, [r7, #20]
 8003cdc:	f7fc fab8 	bl	8000250 <__divsi3>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e007      	b.n	8003cf8 <calc_pressure+0xdc>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	6939      	ldr	r1, [r7, #16]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7fc faae 	bl	8000250 <__divsi3>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	222a      	movs	r2, #42	@ 0x2a
 8003cfc:	5e9b      	ldrsh	r3, [r3, r2]
 8003cfe:	0019      	movs	r1, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003d08:	4353      	muls	r3, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 8003d0a:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003d0c:	434b      	muls	r3, r1
 8003d0e:	131b      	asrs	r3, r3, #12
 8003d10:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	2128      	movs	r1, #40	@ 0x28
 8003d1a:	5e52      	ldrsh	r2, [r2, r1]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003d1c:	4353      	muls	r3, r2
 8003d1e:	135b      	asrs	r3, r3, #13
 8003d20:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	121b      	asrs	r3, r3, #8
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	1212      	asrs	r2, r2, #8
 8003d2a:	4353      	muls	r3, r2
		(int32_t)(pressure_comp >> 8) *
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003d30:	4353      	muls	r3, r2
		(int32_t)dev->calib.par_p10) >> 17;
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	212c      	movs	r1, #44	@ 0x2c
 8003d36:	5c52      	ldrb	r2, [r2, r1]
		(int32_t)(pressure_comp >> 8) *
 8003d38:	4353      	muls	r3, r2
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003d3a:	145b      	asrs	r3, r3, #17
 8003d3c:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	18d2      	adds	r2, r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	18d2      	adds	r2, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2127      	movs	r1, #39	@ 0x27
 8003d4c:	565b      	ldrsb	r3, [r3, r1]
 8003d4e:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003d50:	18d3      	adds	r3, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8003d52:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	18d3      	adds	r3, r2, r3
 8003d58:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8003d5a:	697b      	ldr	r3, [r7, #20]

}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b006      	add	sp, #24
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	ffff0600 	.word	0xffff0600
 8003d68:	00000c35 	.word	0x00000c35

08003d6c <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b08a      	sub	sp, #40	@ 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	0002      	movs	r2, r0
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	1dbb      	adds	r3, r7, #6
 8003d78:	801a      	strh	r2, [r3, #0]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7e:	0013      	movs	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	3380      	adds	r3, #128	@ 0x80
 8003d86:	121b      	asrs	r3, r3, #8
 8003d88:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003d8a:	1dbb      	adds	r3, r7, #6
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	891b      	ldrh	r3, [r3, #8]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1ad4      	subs	r4, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	7b1b      	ldrb	r3, [r3, #12]
 8003d9a:	b25b      	sxtb	r3, r3
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	4353      	muls	r3, r2
 8003da2:	2164      	movs	r1, #100	@ 0x64
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7fc fa53 	bl	8000250 <__divsi3>
 8003daa:	0003      	movs	r3, r0
 8003dac:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003dae:	1ae3      	subs	r3, r4, r3
 8003db0:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	895b      	ldrh	r3, [r3, #10]
 8003db6:	001c      	movs	r4, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	7b5b      	ldrb	r3, [r3, #13]
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	4353      	muls	r3, r2
 8003dc4:	2164      	movs	r1, #100	@ 0x64
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7fc fa42 	bl	8000250 <__divsi3>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	001d      	movs	r5, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	7b9b      	ldrb	r3, [r3, #14]
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	001a      	movs	r2, r3
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	4353      	muls	r3, r2
 8003ddc:	2164      	movs	r1, #100	@ 0x64
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7fc fa36 	bl	8000250 <__divsi3>
 8003de4:	0003      	movs	r3, r0
 8003de6:	001a      	movs	r2, r3
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	4353      	muls	r3, r2
 8003dec:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003dee:	2164      	movs	r1, #100	@ 0x64
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7fc fa2d 	bl	8000250 <__divsi3>
 8003df6:	0003      	movs	r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003df8:	18eb      	adds	r3, r5, r3
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	01d2      	lsls	r2, r2, #7
 8003dfe:	4694      	mov	ip, r2
 8003e00:	4463      	add	r3, ip
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003e02:	4363      	muls	r3, r4
	var2 = ((int32_t) dev->calib.par_h2
 8003e04:	129b      	asrs	r3, r3, #10
 8003e06:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4353      	muls	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	7bdb      	ldrb	r3, [r3, #15]
 8003e14:	01db      	lsls	r3, r3, #7
 8003e16:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	7c1b      	ldrb	r3, [r3, #16]
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	001a      	movs	r2, r3
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	4353      	muls	r3, r2
 8003e24:	2164      	movs	r1, #100	@ 0x64
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7fc fa12 	bl	8000250 <__divsi3>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	001a      	movs	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	111b      	asrs	r3, r3, #4
 8003e36:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	139b      	asrs	r3, r3, #14
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	1392      	asrs	r2, r2, #14
 8003e40:	4353      	muls	r3, r2
 8003e42:	129b      	asrs	r3, r3, #10
 8003e44:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4353      	muls	r3, r2
 8003e4c:	105b      	asrs	r3, r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	18d3      	adds	r3, r2, r3
 8003e56:	129a      	asrs	r2, r3, #10
 8003e58:	0013      	movs	r3, r2
 8003e5a:	015b      	lsls	r3, r3, #5
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	131b      	asrs	r3, r3, #12
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	4a08      	ldr	r2, [pc, #32]	@ (8003e8c <calc_humidity+0x120>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	dd02      	ble.n	8003e76 <calc_humidity+0x10a>
		calc_hum = 100000;
 8003e70:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <calc_humidity+0x120>)
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e74:	e004      	b.n	8003e80 <calc_humidity+0x114>
	else if (calc_hum < 0)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da01      	bge.n	8003e80 <calc_humidity+0x114>
		calc_hum = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24

	return (uint32_t) calc_hum;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b00a      	add	sp, #40	@ 0x28
 8003e88:	bdb0      	pop	{r4, r5, r7, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	000186a0 	.word	0x000186a0

08003e90 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	b0b7      	sub	sp, #220	@ 0xdc
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	0003      	movs	r3, r0
 8003e98:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e9a:	2236      	movs	r2, #54	@ 0x36
 8003e9c:	18ba      	adds	r2, r7, r2
 8003e9e:	8013      	strh	r3, [r2, #0]
 8003ea0:	2335      	movs	r3, #53	@ 0x35
 8003ea2:	18fa      	adds	r2, r7, r3
 8003ea4:	1c0b      	adds	r3, r1, #0
 8003ea6:	7013      	strb	r3, [r2, #0]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003ea8:	264c      	movs	r6, #76	@ 0x4c
 8003eaa:	2230      	movs	r2, #48	@ 0x30
 8003eac:	18b1      	adds	r1, r6, r2
 8003eae:	19ca      	adds	r2, r1, r7
 8003eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8004020 <calc_gas_resistance+0x190>)
 8003eb2:	0010      	movs	r0, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	2340      	movs	r3, #64	@ 0x40
 8003eb8:	001a      	movs	r2, r3
 8003eba:	f004 fe0b 	bl	8008ad4 <memcpy>
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	2230      	movs	r2, #48	@ 0x30
 8003ec2:	1899      	adds	r1, r3, r2
 8003ec4:	19ca      	adds	r2, r1, r7
 8003ec6:	4b57      	ldr	r3, [pc, #348]	@ (8004024 <calc_gas_resistance+0x194>)
 8003ec8:	0010      	movs	r0, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	2340      	movs	r3, #64	@ 0x40
 8003ece:	001a      	movs	r2, r3
 8003ed0:	f004 fe00 	bl	8008ad4 <memcpy>
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed6:	2336      	movs	r3, #54	@ 0x36
 8003ed8:	56d3      	ldrsb	r3, [r2, r3]
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	17db      	asrs	r3, r3, #31
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	0f91      	lsrs	r1, r2, #30
 8003ee6:	009d      	lsls	r5, r3, #2
 8003ee8:	430d      	orrs	r5, r1
 8003eea:	0094      	lsls	r4, r2, #2
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	1912      	adds	r2, r2, r4
 8003ef2:	416b      	adcs	r3, r5
 8003ef4:	484c      	ldr	r0, [pc, #304]	@ (8004028 <calc_gas_resistance+0x198>)
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	1880      	adds	r0, r0, r2
 8003efa:	4159      	adcs	r1, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003efc:	2335      	movs	r3, #53	@ 0x35
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2530      	movs	r5, #48	@ 0x30
 8003f04:	1974      	adds	r4, r6, r5
 8003f06:	19e2      	adds	r2, r4, r7
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	589b      	ldr	r3, [r3, r2]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f7fc fae9 	bl	80004ec <__aeabi_lmul>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	000b      	movs	r3, r1
 8003f1e:	0419      	lsls	r1, r3, #16
 8003f20:	0c10      	lsrs	r0, r2, #16
 8003f22:	4301      	orrs	r1, r0
 8003f24:	24a0      	movs	r4, #160	@ 0xa0
 8003f26:	1960      	adds	r0, r4, r5
 8003f28:	19c0      	adds	r0, r0, r7
 8003f2a:	6001      	str	r1, [r0, #0]
 8003f2c:	141b      	asrs	r3, r3, #16
 8003f2e:	22a4      	movs	r2, #164	@ 0xa4
 8003f30:	1951      	adds	r1, r2, r5
 8003f32:	19ca      	adds	r2, r1, r7
 8003f34:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003f36:	2236      	movs	r2, #54	@ 0x36
 8003f38:	18bb      	adds	r3, r7, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	0008      	movs	r0, r1
 8003f4a:	0c43      	lsrs	r3, r0, #17
 8003f4c:	0010      	movs	r0, r2
 8003f4e:	03c0      	lsls	r0, r0, #15
 8003f50:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003f52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f54:	4318      	orrs	r0, r3
 8003f56:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003f58:	000a      	movs	r2, r1
 8003f5a:	03d2      	lsls	r2, r2, #15
 8003f5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f5e:	22ff      	movs	r2, #255	@ 0xff
 8003f60:	0612      	lsls	r2, r2, #24
 8003f62:	2301      	movs	r3, #1
 8003f64:	425b      	negs	r3, r3
 8003f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f6a:	1880      	adds	r0, r0, r2
 8003f6c:	4159      	adcs	r1, r3
 8003f6e:	002e      	movs	r6, r5
 8003f70:	1962      	adds	r2, r4, r5
 8003f72:	19d2      	adds	r2, r2, r7
 8003f74:	6853      	ldr	r3, [r2, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	1812      	adds	r2, r2, r0
 8003f7a:	414b      	adcs	r3, r1
 8003f7c:	2598      	movs	r5, #152	@ 0x98
 8003f7e:	0030      	movs	r0, r6
 8003f80:	1829      	adds	r1, r5, r0
 8003f82:	19c9      	adds	r1, r1, r7
 8003f84:	600a      	str	r2, [r1, #0]
 8003f86:	604b      	str	r3, [r1, #4]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003f88:	2335      	movs	r3, #53	@ 0x35
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	230c      	movs	r3, #12
 8003f90:	0001      	movs	r1, r0
 8003f92:	185b      	adds	r3, r3, r1
 8003f94:	19db      	adds	r3, r3, r7
 8003f96:	0092      	lsls	r2, r2, #2
 8003f98:	58d3      	ldr	r3, [r2, r3]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	000e      	movs	r6, r1
 8003fa2:	1863      	adds	r3, r4, r1
 8003fa4:	19db      	adds	r3, r3, r7
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	6838      	ldr	r0, [r7, #0]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	f7fc fa9d 	bl	80004ec <__aeabi_lmul>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	000b      	movs	r3, r1
 8003fb6:	05d9      	lsls	r1, r3, #23
 8003fb8:	0a50      	lsrs	r0, r2, #9
 8003fba:	4301      	orrs	r1, r0
 8003fbc:	2090      	movs	r0, #144	@ 0x90
 8003fbe:	1984      	adds	r4, r0, r6
 8003fc0:	19e4      	adds	r4, r4, r7
 8003fc2:	6021      	str	r1, [r4, #0]
 8003fc4:	125b      	asrs	r3, r3, #9
 8003fc6:	2294      	movs	r2, #148	@ 0x94
 8003fc8:	1992      	adds	r2, r2, r6
 8003fca:	19d2      	adds	r2, r2, r7
 8003fcc:	6013      	str	r3, [r2, #0]
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003fce:	19ab      	adds	r3, r5, r6
 8003fd0:	19db      	adds	r3, r3, r7
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	07d9      	lsls	r1, r3, #31
 8003fd8:	0854      	lsrs	r4, r2, #1
 8003fda:	623c      	str	r4, [r7, #32]
 8003fdc:	6a3c      	ldr	r4, [r7, #32]
 8003fde:	430c      	orrs	r4, r1
 8003fe0:	623c      	str	r4, [r7, #32]
 8003fe2:	105b      	asrs	r3, r3, #1
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe6:	0034      	movs	r4, r6
 8003fe8:	1903      	adds	r3, r0, r4
 8003fea:	19db      	adds	r3, r3, r7
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	6a38      	ldr	r0, [r7, #32]
 8003ff2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ff4:	1880      	adds	r0, r0, r2
 8003ff6:	4159      	adcs	r1, r3
 8003ff8:	192b      	adds	r3, r5, r4
 8003ffa:	19db      	adds	r3, r3, r7
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f7fc fa50 	bl	80004a4 <__aeabi_ldivmod>
 8004004:	0002      	movs	r2, r0
 8004006:	000b      	movs	r3, r1
 8004008:	0013      	movs	r3, r2
 800400a:	228c      	movs	r2, #140	@ 0x8c
 800400c:	1911      	adds	r1, r2, r4
 800400e:	19c9      	adds	r1, r1, r7
 8004010:	600b      	str	r3, [r1, #0]

	return calc_gas_res;
 8004012:	1913      	adds	r3, r2, r4
 8004014:	19db      	adds	r3, r3, r7
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	b037      	add	sp, #220	@ 0xdc
 800401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004020:	0800ad50 	.word	0x0800ad50
 8004024:	0800ad90 	.word	0x0800ad90
 8004028:	0000053c 	.word	0x0000053c

0800402c <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b08b      	sub	sp, #44	@ 0x2c
 8004030:	af00      	add	r7, sp, #0
 8004032:	0002      	movs	r2, r0
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	1dbb      	adds	r3, r7, #6
 8004038:	801a      	strh	r2, [r3, #0]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 800403a:	1dbb      	adds	r3, r7, #6
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	23c8      	movs	r3, #200	@ 0xc8
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	429a      	cmp	r2, r3
 8004044:	d903      	bls.n	800404e <calc_heater_res+0x22>
		temp = 400;
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	22c8      	movs	r2, #200	@ 0xc8
 800404a:	0052      	lsls	r2, r2, #1
 800404c:	801a      	strh	r2, [r3, #0]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	791b      	ldrb	r3, [r3, #4]
 8004052:	b25b      	sxtb	r3, r3
 8004054:	001a      	movs	r2, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	7d1b      	ldrb	r3, [r3, #20]
 800405a:	b25b      	sxtb	r3, r3
 800405c:	4353      	muls	r3, r2
 800405e:	22fa      	movs	r2, #250	@ 0xfa
 8004060:	0091      	lsls	r1, r2, #2
 8004062:	0018      	movs	r0, r3
 8004064:	f7fc f8f4 	bl	8000250 <__divsi3>
 8004068:	0003      	movs	r3, r0
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	7c5b      	ldrb	r3, [r3, #17]
 8004072:	b25b      	sxtb	r3, r3
 8004074:	22c4      	movs	r2, #196	@ 0xc4
 8004076:	0092      	lsls	r2, r2, #2
 8004078:	189c      	adds	r4, r3, r2
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2212      	movs	r2, #18
 800407e:	5e9b      	ldrsh	r3, [r3, r2]
 8004080:	4a29      	ldr	r2, [pc, #164]	@ (8004128 <calc_heater_res+0xfc>)
 8004082:	4694      	mov	ip, r2
 8004084:	4463      	add	r3, ip
 8004086:	1dba      	adds	r2, r7, #6
 8004088:	8812      	ldrh	r2, [r2, #0]
 800408a:	4353      	muls	r3, r2
 800408c:	2114      	movs	r1, #20
 800408e:	0018      	movs	r0, r3
 8004090:	f7fc f8de 	bl	8000250 <__divsi3>
 8004094:	0003      	movs	r3, r0
 8004096:	22c8      	movs	r2, #200	@ 0xc8
 8004098:	0392      	lsls	r2, r2, #14
 800409a:	4694      	mov	ip, r2
 800409c:	4463      	add	r3, ip
 800409e:	210a      	movs	r1, #10
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7fc f8d5 	bl	8000250 <__divsi3>
 80040a6:	0003      	movs	r3, r0
 80040a8:	4363      	muls	r3, r4
 80040aa:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da00      	bge.n	80040b4 <calc_heater_res+0x88>
 80040b2:	3301      	adds	r3, #1
 80040b4:	105b      	asrs	r3, r3, #1
 80040b6:	001a      	movs	r2, r3
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2234      	movs	r2, #52	@ 0x34
 80040c2:	5c9b      	ldrb	r3, [r3, r2]
 80040c4:	3304      	adds	r3, #4
 80040c6:	0019      	movs	r1, r3
 80040c8:	69f8      	ldr	r0, [r7, #28]
 80040ca:	f7fc f8c1 	bl	8000250 <__divsi3>
 80040ce:	0003      	movs	r3, r0
 80040d0:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2235      	movs	r2, #53	@ 0x35
 80040d6:	569b      	ldrsb	r3, [r3, r2]
 80040d8:	001a      	movs	r2, r3
 80040da:	0013      	movs	r3, r2
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	2280      	movs	r2, #128	@ 0x80
 80040e6:	0252      	lsls	r2, r2, #9
 80040e8:	4694      	mov	ip, r2
 80040ea:	4463      	add	r3, ip
 80040ec:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80040ee:	6979      	ldr	r1, [r7, #20]
 80040f0:	69b8      	ldr	r0, [r7, #24]
 80040f2:	f7fc f8ad 	bl	8000250 <__divsi3>
 80040f6:	0003      	movs	r3, r0
 80040f8:	3bfa      	subs	r3, #250	@ 0xfa
 80040fa:	001a      	movs	r2, r3
 80040fc:	0013      	movs	r3, r2
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	189b      	adds	r3, r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	3332      	adds	r3, #50	@ 0x32
 800410a:	2164      	movs	r1, #100	@ 0x64
 800410c:	0018      	movs	r0, r3
 800410e:	f7fc f89f 	bl	8000250 <__divsi3>
 8004112:	0003      	movs	r3, r0
 8004114:	001a      	movs	r2, r3
 8004116:	210f      	movs	r1, #15
 8004118:	187b      	adds	r3, r7, r1
 800411a:	701a      	strb	r2, [r3, #0]

	return heatr_res;
 800411c:	187b      	adds	r3, r7, r1
 800411e:	781b      	ldrb	r3, [r3, #0]
}
 8004120:	0018      	movs	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	b00b      	add	sp, #44	@ 0x2c
 8004126:	bd90      	pop	{r4, r7, pc}
 8004128:	00025999 	.word	0x00025999

0800412c <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	0002      	movs	r2, r0
 8004134:	1dbb      	adds	r3, r7, #6
 8004136:	801a      	strh	r2, [r3, #0]
	uint8_t factor = 0;
 8004138:	230f      	movs	r3, #15
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8004140:	1dbb      	adds	r3, r7, #6
 8004142:	881a      	ldrh	r2, [r3, #0]
 8004144:	23fc      	movs	r3, #252	@ 0xfc
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	429a      	cmp	r2, r3
 800414a:	d30f      	bcc.n	800416c <calc_heater_dur+0x40>
		durval = 0xff; /* Max duration*/
 800414c:	230e      	movs	r3, #14
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	22ff      	movs	r2, #255	@ 0xff
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e01a      	b.n	800418c <calc_heater_dur+0x60>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8004156:	1dbb      	adds	r3, r7, #6
 8004158:	1dba      	adds	r2, r7, #6
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	0892      	lsrs	r2, r2, #2
 800415e:	801a      	strh	r2, [r3, #0]
			factor += 1;
 8004160:	220f      	movs	r2, #15
 8004162:	18bb      	adds	r3, r7, r2
 8004164:	18ba      	adds	r2, r7, r2
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	3201      	adds	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
		while (dur > 0x3F) {
 800416c:	1dbb      	adds	r3, r7, #6
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	2b3f      	cmp	r3, #63	@ 0x3f
 8004172:	d8f0      	bhi.n	8004156 <calc_heater_dur+0x2a>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8004174:	1dbb      	adds	r3, r7, #6
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b2d9      	uxtb	r1, r3
 800417a:	230f      	movs	r3, #15
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	019b      	lsls	r3, r3, #6
 8004182:	b2da      	uxtb	r2, r3
 8004184:	230e      	movs	r3, #14
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	188a      	adds	r2, r1, r2
 800418a:	701a      	strb	r2, [r3, #0]
	}

	return durval;
 800418c:	230e      	movs	r3, #14
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	781b      	ldrb	r3, [r3, #0]
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b004      	add	sp, #16
 8004198:	bd80      	pop	{r7, pc}

0800419a <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 800419a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419c:	b08b      	sub	sp, #44	@ 0x2c
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 80041a4:	2308      	movs	r3, #8
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	0018      	movs	r0, r3
 80041aa:	230f      	movs	r3, #15
 80041ac:	001a      	movs	r2, r3
 80041ae:	2100      	movs	r1, #0
 80041b0:	f004 fbfe 	bl	80089b0 <memset>
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 80041b4:	2326      	movs	r3, #38	@ 0x26
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	220a      	movs	r2, #10
 80041ba:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80041bc:	2327      	movs	r3, #39	@ 0x27
 80041be:	18fc      	adds	r4, r7, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 f9c8 	bl	8004558 <null_ptr_check>
 80041c8:	0003      	movs	r3, r0
 80041ca:	7023      	strb	r3, [r4, #0]
	do {
		if (rslt == BME680_OK) {
 80041cc:	2227      	movs	r2, #39	@ 0x27
 80041ce:	18bb      	adds	r3, r7, r2
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d000      	beq.n	80041da <read_field_data+0x40>
 80041d8:	e0a3      	b.n	8004322 <read_field_data+0x188>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80041da:	18bc      	adds	r4, r7, r2
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2508      	movs	r5, #8
 80041e0:	1979      	adds	r1, r7, r5
 80041e2:	220f      	movs	r2, #15
 80041e4:	201d      	movs	r0, #29
 80041e6:	f7fe fe29 	bl	8002e3c <bme680_get_regs>
 80041ea:	0003      	movs	r3, r0
 80041ec:	7023      	strb	r3, [r4, #0]
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80041ee:	0028      	movs	r0, r5
 80041f0:	183b      	adds	r3, r7, r0
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	227f      	movs	r2, #127	@ 0x7f
 80041f6:	4393      	bics	r3, r2
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80041fe:	183b      	adds	r3, r7, r0
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	220f      	movs	r2, #15
 8004204:	4013      	ands	r3, r2
 8004206:	b2da      	uxtb	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 800420c:	183b      	adds	r3, r7, r0
 800420e:	785a      	ldrb	r2, [r3, #1]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8004214:	183b      	adds	r3, r7, r0
 8004216:	789b      	ldrb	r3, [r3, #2]
 8004218:	031a      	lsls	r2, r3, #12
 800421a:	183b      	adds	r3, r7, r0
 800421c:	78db      	ldrb	r3, [r3, #3]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8004222:	183a      	adds	r2, r7, r0
 8004224:	7912      	ldrb	r2, [r2, #4]
 8004226:	0912      	lsrs	r2, r2, #4
 8004228:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800422a:	4313      	orrs	r3, r2
 800422c:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 800422e:	183b      	adds	r3, r7, r0
 8004230:	795b      	ldrb	r3, [r3, #5]
 8004232:	031a      	lsls	r2, r3, #12
 8004234:	183b      	adds	r3, r7, r0
 8004236:	799b      	ldrb	r3, [r3, #6]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 800423c:	183a      	adds	r2, r7, r0
 800423e:	79d2      	ldrb	r2, [r2, #7]
 8004240:	0912      	lsrs	r2, r2, #4
 8004242:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8004244:	4313      	orrs	r3, r2
 8004246:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8004248:	183b      	adds	r3, r7, r0
 800424a:	7a1b      	ldrb	r3, [r3, #8]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	b29a      	uxth	r2, r3
 8004250:	183b      	adds	r3, r7, r0
 8004252:	7a5b      	ldrb	r3, [r3, #9]
 8004254:	0019      	movs	r1, r3
 8004256:	241a      	movs	r4, #26
 8004258:	193b      	adds	r3, r7, r4
 800425a:	430a      	orrs	r2, r1
 800425c:	801a      	strh	r2, [r3, #0]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 800425e:	183b      	adds	r3, r7, r0
 8004260:	7b5b      	ldrb	r3, [r3, #13]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	b29a      	uxth	r2, r3
 8004266:	183b      	adds	r3, r7, r0
 8004268:	7b9b      	ldrb	r3, [r3, #14]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	b2db      	uxtb	r3, r3
 800426e:	0019      	movs	r1, r3
 8004270:	2518      	movs	r5, #24
 8004272:	197b      	adds	r3, r7, r5
 8004274:	430a      	orrs	r2, r1
 8004276:	801a      	strh	r2, [r3, #0]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8004278:	183b      	adds	r3, r7, r0
 800427a:	7b9a      	ldrb	r2, [r3, #14]
 800427c:	2617      	movs	r6, #23
 800427e:	19bb      	adds	r3, r7, r6
 8004280:	210f      	movs	r1, #15
 8004282:	400a      	ands	r2, r1
 8004284:	701a      	strb	r2, [r3, #0]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	b25a      	sxtb	r2, r3
 800428c:	183b      	adds	r3, r7, r0
 800428e:	7b9b      	ldrb	r3, [r3, #14]
 8004290:	b25b      	sxtb	r3, r3
 8004292:	2120      	movs	r1, #32
 8004294:	400b      	ands	r3, r1
 8004296:	b25b      	sxtb	r3, r3
 8004298:	4313      	orrs	r3, r2
 800429a:	b25b      	sxtb	r3, r3
 800429c:	b2da      	uxtb	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b25a      	sxtb	r2, r3
 80042a8:	183b      	adds	r3, r7, r0
 80042aa:	7b9b      	ldrb	r3, [r3, #14]
 80042ac:	b25b      	sxtb	r3, r3
 80042ae:	2110      	movs	r1, #16
 80042b0:	400b      	ands	r3, r1
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	4313      	orrs	r3, r2
 80042b6:	b25b      	sxtb	r3, r3
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b25b      	sxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da28      	bge.n	800431a <read_field_data+0x180>
				data->temperature = calc_temperature(adc_temp, dev);
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7ff fc33 	bl	8003b3a <calc_temperature>
 80042d4:	0003      	movs	r3, r0
 80042d6:	001a      	movs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	0011      	movs	r1, r2
 80042e2:	0018      	movs	r0, r3
 80042e4:	f7ff fc9a 	bl	8003c1c <calc_pressure>
 80042e8:	0002      	movs	r2, r0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	0011      	movs	r1, r2
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7ff fd38 	bl	8003d6c <calc_humidity>
 80042fc:	0002      	movs	r2, r0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	19bb      	adds	r3, r7, r6
 8004306:	7819      	ldrb	r1, [r3, #0]
 8004308:	197b      	adds	r3, r7, r5
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	0018      	movs	r0, r3
 800430e:	f7ff fdbf 	bl	8003e90 <calc_gas_resistance>
 8004312:	0002      	movs	r2, r0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	611a      	str	r2, [r3, #16]
				break;
 8004318:	e00e      	b.n	8004338 <read_field_data+0x19e>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431e:	200a      	movs	r0, #10
 8004320:	4798      	blx	r3
		}
		tries--;
 8004322:	2126      	movs	r1, #38	@ 0x26
 8004324:	187b      	adds	r3, r7, r1
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	187b      	adds	r3, r7, r1
 800432a:	3a01      	subs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
	} while (tries);
 800432e:	187b      	adds	r3, r7, r1
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d000      	beq.n	8004338 <read_field_data+0x19e>
 8004336:	e749      	b.n	80041cc <read_field_data+0x32>

	if (!tries)
 8004338:	2326      	movs	r3, #38	@ 0x26
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <read_field_data+0x1b0>
		rslt = BME680_W_NO_NEW_DATA;
 8004342:	2327      	movs	r3, #39	@ 0x27
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2202      	movs	r2, #2
 8004348:	701a      	strb	r2, [r3, #0]

	return rslt;
 800434a:	2327      	movs	r3, #39	@ 0x27
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b25b      	sxtb	r3, r3
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b00b      	add	sp, #44	@ 0x2c
 8004358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800435a <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 800435a:	b5b0      	push	{r4, r5, r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	0002      	movs	r2, r0
 8004362:	6039      	str	r1, [r7, #0]
 8004364:	1dfb      	adds	r3, r7, #7
 8004366:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8004368:	250f      	movs	r5, #15
 800436a:	197c      	adds	r4, r7, r5
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	0018      	movs	r0, r3
 8004370:	f000 f8f2 	bl	8004558 <null_ptr_check>
 8004374:	0003      	movs	r3, r0
 8004376:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 8004378:	197b      	adds	r3, r7, r5
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b25b      	sxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d160      	bne.n	8004444 <set_mem_page+0xea>
		if (reg_addr > 0x7f)
 8004382:	1dfb      	adds	r3, r7, #7
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	b25b      	sxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	da04      	bge.n	8004396 <set_mem_page+0x3c>
			mem_page = BME680_MEM_PAGE1;
 800438c:	230e      	movs	r3, #14
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e003      	b.n	800439e <set_mem_page+0x44>
		else
			mem_page = BME680_MEM_PAGE0;
 8004396:	230e      	movs	r3, #14
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2210      	movs	r2, #16
 800439c:	701a      	strb	r2, [r3, #0]

		if (mem_page != dev->mem_page) {
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	78db      	ldrb	r3, [r3, #3]
 80043a2:	210e      	movs	r1, #14
 80043a4:	187a      	adds	r2, r7, r1
 80043a6:	7812      	ldrb	r2, [r2, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d04b      	beq.n	8004444 <set_mem_page+0xea>
			dev->mem_page = mem_page;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	187a      	adds	r2, r7, r1
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	7858      	ldrb	r0, [r3, #1]
 80043bc:	230d      	movs	r3, #13
 80043be:	18fa      	adds	r2, r7, r3
 80043c0:	2301      	movs	r3, #1
 80043c2:	21f3      	movs	r1, #243	@ 0xf3
 80043c4:	47a0      	blx	r4
 80043c6:	0003      	movs	r3, r0
 80043c8:	0019      	movs	r1, r3
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2254      	movs	r2, #84	@ 0x54
 80043ce:	5499      	strb	r1, [r3, r2]
			if (dev->com_rslt != 0)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2254      	movs	r2, #84	@ 0x54
 80043d4:	569b      	ldrsb	r3, [r3, r2]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <set_mem_page+0x88>
				rslt = BME680_E_COM_FAIL;
 80043da:	230f      	movs	r3, #15
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	22fe      	movs	r2, #254	@ 0xfe
 80043e0:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK) {
 80043e2:	250f      	movs	r5, #15
 80043e4:	197b      	adds	r3, r7, r5
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d12a      	bne.n	8004444 <set_mem_page+0xea>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 80043ee:	210d      	movs	r1, #13
 80043f0:	187b      	adds	r3, r7, r1
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2210      	movs	r2, #16
 80043f6:	4393      	bics	r3, r2
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	187b      	adds	r3, r7, r1
 80043fc:	701a      	strb	r2, [r3, #0]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	78db      	ldrb	r3, [r3, #3]
 8004402:	b25b      	sxtb	r3, r3
 8004404:	2210      	movs	r2, #16
 8004406:	4013      	ands	r3, r2
 8004408:	b25a      	sxtb	r2, r3
 800440a:	187b      	adds	r3, r7, r1
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	b25b      	sxtb	r3, r3
 8004410:	4313      	orrs	r3, r2
 8004412:	b25b      	sxtb	r3, r3
 8004414:	b2da      	uxtb	r2, r3
 8004416:	187b      	adds	r3, r7, r1
 8004418:	701a      	strb	r2, [r3, #0]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	7858      	ldrb	r0, [r3, #1]
 8004422:	187a      	adds	r2, r7, r1
 8004424:	2301      	movs	r3, #1
 8004426:	2173      	movs	r1, #115	@ 0x73
 8004428:	47a0      	blx	r4
 800442a:	0003      	movs	r3, r0
 800442c:	0019      	movs	r1, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2254      	movs	r2, #84	@ 0x54
 8004432:	5499      	strb	r1, [r3, r2]
					&reg, 1);
				if (dev->com_rslt != 0)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2254      	movs	r2, #84	@ 0x54
 8004438:	569b      	ldrsb	r3, [r3, r2]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <set_mem_page+0xea>
					rslt = BME680_E_COM_FAIL;
 800443e:	197b      	adds	r3, r7, r5
 8004440:	22fe      	movs	r2, #254	@ 0xfe
 8004442:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return rslt;
 8004444:	230f      	movs	r3, #15
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b25b      	sxtb	r3, r3
}
 800444c:	0018      	movs	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	b004      	add	sp, #16
 8004452:	bdb0      	pop	{r4, r5, r7, pc}

08004454 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8004454:	b5b0      	push	{r4, r5, r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800445c:	250f      	movs	r5, #15
 800445e:	197c      	adds	r4, r7, r5
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f878 	bl	8004558 <null_ptr_check>
 8004468:	0003      	movs	r3, r0
 800446a:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
 800446c:	197b      	adds	r3, r7, r5
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b25b      	sxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d11e      	bne.n	80044b4 <get_mem_page+0x60>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7858      	ldrb	r0, [r3, #1]
 800447e:	230e      	movs	r3, #14
 8004480:	18fa      	adds	r2, r7, r3
 8004482:	2301      	movs	r3, #1
 8004484:	21f3      	movs	r1, #243	@ 0xf3
 8004486:	47a0      	blx	r4
 8004488:	0003      	movs	r3, r0
 800448a:	0019      	movs	r1, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2254      	movs	r2, #84	@ 0x54
 8004490:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2254      	movs	r2, #84	@ 0x54
 8004496:	569b      	ldrsb	r3, [r3, r2]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <get_mem_page+0x50>
			rslt = BME680_E_COM_FAIL;
 800449c:	197b      	adds	r3, r7, r5
 800449e:	22fe      	movs	r2, #254	@ 0xfe
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e007      	b.n	80044b4 <get_mem_page+0x60>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 80044a4:	230e      	movs	r3, #14
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2210      	movs	r2, #16
 80044ac:	4013      	ands	r3, r2
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 80044b4:	230f      	movs	r3, #15
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b25b      	sxtb	r3, r3
}
 80044bc:	0018      	movs	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	b004      	add	sp, #16
 80044c2:	bdb0      	pop	{r4, r5, r7, pc}

080044c4 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	0008      	movs	r0, r1
 80044ce:	0011      	movs	r1, r2
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	240b      	movs	r4, #11
 80044d4:	193b      	adds	r3, r7, r4
 80044d6:	1c02      	adds	r2, r0, #0
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	230a      	movs	r3, #10
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	1c0a      	adds	r2, r1, #0
 80044e0:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME680_OK;
 80044e2:	2317      	movs	r3, #23
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]

	if (value != NULL) {
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d027      	beq.n	8004540 <boundary_check+0x7c>
		/* Check if value is below minimum value */
		if (*value < min) {
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	193a      	adds	r2, r7, r4
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d90c      	bls.n	8004516 <boundary_check+0x52>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	193a      	adds	r2, r7, r4
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2246      	movs	r2, #70	@ 0x46
 8004508:	5c9b      	ldrb	r3, [r3, r2]
 800450a:	2201      	movs	r2, #1
 800450c:	4313      	orrs	r3, r2
 800450e:	b2d9      	uxtb	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2246      	movs	r2, #70	@ 0x46
 8004514:	5499      	strb	r1, [r3, r2]
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	210a      	movs	r1, #10
 800451c:	187a      	adds	r2, r7, r1
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d211      	bcs.n	8004548 <boundary_check+0x84>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	187a      	adds	r2, r7, r1
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2246      	movs	r2, #70	@ 0x46
 8004530:	5c9b      	ldrb	r3, [r3, r2]
 8004532:	2202      	movs	r2, #2
 8004534:	4313      	orrs	r3, r2
 8004536:	b2d9      	uxtb	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2246      	movs	r2, #70	@ 0x46
 800453c:	5499      	strb	r1, [r3, r2]
 800453e:	e003      	b.n	8004548 <boundary_check+0x84>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8004540:	2317      	movs	r3, #23
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	22ff      	movs	r2, #255	@ 0xff
 8004546:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8004548:	2317      	movs	r3, #23
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b25b      	sxtb	r3, r3
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b007      	add	sp, #28
 8004556:	bd90      	pop	{r4, r7, pc}

08004558 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <null_ptr_check+0x26>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <null_ptr_check+0x26>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <null_ptr_check+0x26>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457a:	2b00      	cmp	r3, #0
 800457c:	d104      	bne.n	8004588 <null_ptr_check+0x30>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 800457e:	230f      	movs	r3, #15
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	22ff      	movs	r2, #255	@ 0xff
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e003      	b.n	8004590 <null_ptr_check+0x38>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8004588:	230f      	movs	r3, #15
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8004590:	230f      	movs	r3, #15
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	b25b      	sxtb	r3, r3
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	b004      	add	sp, #16
 800459e:	bd80      	pop	{r7, pc}

080045a0 <user_i2c_read>:
int8_t rslt=BME680_OK;
struct bme680_dev gas_sensor;
struct bme680_field_data data;
// Implement user_i2c_read, user_i2c_write, and user_delay_ms functions
int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af04      	add	r7, sp, #16
 80045a6:	0004      	movs	r4, r0
 80045a8:	0008      	movs	r0, r1
 80045aa:	603a      	str	r2, [r7, #0]
 80045ac:	0019      	movs	r1, r3
 80045ae:	1dfb      	adds	r3, r7, #7
 80045b0:	1c22      	adds	r2, r4, #0
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	1dbb      	adds	r3, r7, #6
 80045b6:	1c02      	adds	r2, r0, #0
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	1c0a      	adds	r2, r1, #0
 80045be:	801a      	strh	r2, [r3, #0]
    // Implement I2C read function
    return HAL_I2C_Mem_Read(&hi2c2, dev_id << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 80045c0:	1dfb      	adds	r3, r7, #7
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	18db      	adds	r3, r3, r3
 80045c8:	b299      	uxth	r1, r3
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	4808      	ldr	r0, [pc, #32]	@ (80045f4 <user_i2c_read+0x54>)
 80045d2:	2301      	movs	r3, #1
 80045d4:	425b      	negs	r3, r3
 80045d6:	9302      	str	r3, [sp, #8]
 80045d8:	1d3b      	adds	r3, r7, #4
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2301      	movs	r3, #1
 80045e4:	f001 fc8c 	bl	8005f00 <HAL_I2C_Mem_Read>
 80045e8:	0003      	movs	r3, r0
 80045ea:	b25b      	sxtb	r3, r3
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b003      	add	sp, #12
 80045f2:	bd90      	pop	{r4, r7, pc}
 80045f4:	20000aec 	.word	0x20000aec

080045f8 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af04      	add	r7, sp, #16
 80045fe:	0004      	movs	r4, r0
 8004600:	0008      	movs	r0, r1
 8004602:	603a      	str	r2, [r7, #0]
 8004604:	0019      	movs	r1, r3
 8004606:	1dfb      	adds	r3, r7, #7
 8004608:	1c22      	adds	r2, r4, #0
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	1dbb      	adds	r3, r7, #6
 800460e:	1c02      	adds	r2, r0, #0
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	1c0a      	adds	r2, r1, #0
 8004616:	801a      	strh	r2, [r3, #0]
    // Implement I2C write function
    return HAL_I2C_Mem_Write(&hi2c2, dev_id << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	18db      	adds	r3, r3, r3
 8004620:	b299      	uxth	r1, r3
 8004622:	1dbb      	adds	r3, r7, #6
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b29a      	uxth	r2, r3
 8004628:	4808      	ldr	r0, [pc, #32]	@ (800464c <user_i2c_write+0x54>)
 800462a:	2301      	movs	r3, #1
 800462c:	425b      	negs	r3, r3
 800462e:	9302      	str	r3, [sp, #8]
 8004630:	1d3b      	adds	r3, r7, #4
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2301      	movs	r3, #1
 800463c:	f001 fb32 	bl	8005ca4 <HAL_I2C_Mem_Write>
 8004640:	0003      	movs	r3, r0
 8004642:	b25b      	sxtb	r3, r3
}
 8004644:	0018      	movs	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	b003      	add	sp, #12
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	20000aec 	.word	0x20000aec

08004650 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    HAL_Delay(period);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	0018      	movs	r0, r3
 800465c:	f000 ff06 	bl	800546c <HAL_Delay>
}
 8004660:	46c0      	nop			@ (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b002      	add	sp, #8
 8004666:	bd80      	pop	{r7, pc}

08004668 <BME680_Initialize>:
    buffer_len = sprintf(buffer, "\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, buffer_len, 1000);
}

// Function to initialize BME680 sensor
int8_t BME680_Initialize(struct bme680_dev *gas_sensor) {
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b098      	sub	sp, #96	@ 0x60
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	char init_msg[] = "Initializing BME680...\r\n";
 8004670:	253c      	movs	r5, #60	@ 0x3c
 8004672:	197b      	adds	r3, r7, r5
 8004674:	4a66      	ldr	r2, [pc, #408]	@ (8004810 <BME680_Initialize+0x1a8>)
 8004676:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004678:	c313      	stmia	r3!, {r0, r1, r4}
 800467a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800467c:	c313      	stmia	r3!, {r0, r1, r4}
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) init_msg, sizeof(init_msg) - 1,
 8004682:	2301      	movs	r3, #1
 8004684:	425b      	negs	r3, r3
 8004686:	1979      	adds	r1, r7, r5
 8004688:	4862      	ldr	r0, [pc, #392]	@ (8004814 <BME680_Initialize+0x1ac>)
 800468a:	2218      	movs	r2, #24
 800468c:	f002 ff46 	bl	800751c <HAL_UART_Transmit>
			HAL_MAX_DELAY);

	// Set up sensor structure
	gas_sensor->dev_id = BME680_I2C_ADDR_PRIMARY; // 0x76
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2276      	movs	r2, #118	@ 0x76
 8004694:	705a      	strb	r2, [r3, #1]
	gas_sensor->intf = BME680_I2C_INTF;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	709a      	strb	r2, [r3, #2]
	gas_sensor->read = user_i2c_read;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a5e      	ldr	r2, [pc, #376]	@ (8004818 <BME680_Initialize+0x1b0>)
 80046a0:	649a      	str	r2, [r3, #72]	@ 0x48
	gas_sensor->write = user_i2c_write;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a5d      	ldr	r2, [pc, #372]	@ (800481c <BME680_Initialize+0x1b4>)
 80046a6:	64da      	str	r2, [r3, #76]	@ 0x4c
	gas_sensor->delay_ms = user_delay_ms;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004820 <BME680_Initialize+0x1b8>)
 80046ac:	651a      	str	r2, [r3, #80]	@ 0x50
	gas_sensor->amb_temp = 25;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2219      	movs	r2, #25
 80046b2:	711a      	strb	r2, [r3, #4]

	int8_t rslt = BME680_OK;
 80046b4:	235f      	movs	r3, #95	@ 0x5f
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
	int8_t rslt_secondary = BME680_OK;
 80046bc:	235e      	movs	r3, #94	@ 0x5e
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
	int attempt_count = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Try initializing with primary I2C address
	while (attempt_count < 5) {
 80046c8:	e029      	b.n	800471e <BME680_Initialize+0xb6>
		rslt = bme680_init(gas_sensor);
 80046ca:	255f      	movs	r5, #95	@ 0x5f
 80046cc:	197c      	adds	r4, r7, r5
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fe fb6f 	bl	8002db4 <bme680_init>
 80046d6:	0003      	movs	r3, r0
 80046d8:	7023      	strb	r3, [r4, #0]
		char buf[50];
		sprintf(buf, "Init attempt %d: result %d\r\n", attempt_count + 1, rslt);
 80046da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	002c      	movs	r4, r5
 80046e0:	193b      	adds	r3, r7, r4
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b25b      	sxtb	r3, r3
 80046e6:	494f      	ldr	r1, [pc, #316]	@ (8004824 <BME680_Initialize+0x1bc>)
 80046e8:	2508      	movs	r5, #8
 80046ea:	1978      	adds	r0, r7, r5
 80046ec:	f004 f8f2 	bl	80088d4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 80046f0:	197b      	adds	r3, r7, r5
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7fb fd06 	bl	8000104 <strlen>
 80046f8:	0003      	movs	r3, r0
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	2301      	movs	r3, #1
 80046fe:	425b      	negs	r3, r3
 8004700:	1979      	adds	r1, r7, r5
 8004702:	4844      	ldr	r0, [pc, #272]	@ (8004814 <BME680_Initialize+0x1ac>)
 8004704:	f002 ff0a 	bl	800751c <HAL_UART_Transmit>

		if (rslt == BME680_OK) {
 8004708:	193b      	adds	r3, r7, r4
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b25b      	sxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <BME680_Initialize+0xbe>
			break;
		}
		attempt_count++;
 8004712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004714:	3301      	adds	r3, #1
 8004716:	65bb      	str	r3, [r7, #88]	@ 0x58
		HAL_Delay(200);
 8004718:	20c8      	movs	r0, #200	@ 0xc8
 800471a:	f000 fea7 	bl	800546c <HAL_Delay>
	while (attempt_count < 5) {
 800471e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004720:	2b04      	cmp	r3, #4
 8004722:	ddd2      	ble.n	80046ca <BME680_Initialize+0x62>
 8004724:	e000      	b.n	8004728 <BME680_Initialize+0xc0>
			break;
 8004726:	46c0      	nop			@ (mov r8, r8)
	}

	// If primary address fails, try secondary I2C address
	if (rslt != BME680_OK) {
 8004728:	235f      	movs	r3, #95	@ 0x5f
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	b25b      	sxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d034      	beq.n	800479e <BME680_Initialize+0x136>
		gas_sensor->dev_id = BME680_I2C_ADDR_SECONDARY; // 0x77
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2277      	movs	r2, #119	@ 0x77
 8004738:	705a      	strb	r2, [r3, #1]
		attempt_count = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	65bb      	str	r3, [r7, #88]	@ 0x58
		while (attempt_count < 5) {
 800473e:	e029      	b.n	8004794 <BME680_Initialize+0x12c>
			rslt_secondary = bme680_init(gas_sensor);
 8004740:	255e      	movs	r5, #94	@ 0x5e
 8004742:	197c      	adds	r4, r7, r5
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0018      	movs	r0, r3
 8004748:	f7fe fb34 	bl	8002db4 <bme680_init>
 800474c:	0003      	movs	r3, r0
 800474e:	7023      	strb	r3, [r4, #0]
			char buf[50];
			sprintf(buf, "Secondary Init attempt %d: result %d\r\n",
 8004750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	002c      	movs	r4, r5
 8004756:	193b      	adds	r3, r7, r4
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	b25b      	sxtb	r3, r3
 800475c:	4932      	ldr	r1, [pc, #200]	@ (8004828 <BME680_Initialize+0x1c0>)
 800475e:	2508      	movs	r5, #8
 8004760:	1978      	adds	r0, r7, r5
 8004762:	f004 f8b7 	bl	80088d4 <siprintf>
					attempt_count + 1, rslt_secondary);
			HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf),
 8004766:	197b      	adds	r3, r7, r5
 8004768:	0018      	movs	r0, r3
 800476a:	f7fb fccb 	bl	8000104 <strlen>
 800476e:	0003      	movs	r3, r0
 8004770:	b29a      	uxth	r2, r3
 8004772:	2301      	movs	r3, #1
 8004774:	425b      	negs	r3, r3
 8004776:	1979      	adds	r1, r7, r5
 8004778:	4826      	ldr	r0, [pc, #152]	@ (8004814 <BME680_Initialize+0x1ac>)
 800477a:	f002 fecf 	bl	800751c <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			if (rslt_secondary == BME680_OK) {
 800477e:	193b      	adds	r3, r7, r4
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b25b      	sxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <BME680_Initialize+0x134>
				break;
			}
			attempt_count++;
 8004788:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800478a:	3301      	adds	r3, #1
 800478c:	65bb      	str	r3, [r7, #88]	@ 0x58
			HAL_Delay(200);
 800478e:	20c8      	movs	r0, #200	@ 0xc8
 8004790:	f000 fe6c 	bl	800546c <HAL_Delay>
		while (attempt_count < 5) {
 8004794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004796:	2b04      	cmp	r3, #4
 8004798:	ddd2      	ble.n	8004740 <BME680_Initialize+0xd8>
 800479a:	e000      	b.n	800479e <BME680_Initialize+0x136>
				break;
 800479c:	46c0      	nop			@ (mov r8, r8)
		}
	}

	// Check final result
	if (rslt == BME680_OK || rslt_secondary == BME680_OK) {
 800479e:	235f      	movs	r3, #95	@ 0x5f
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b25b      	sxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <BME680_Initialize+0x14e>
 80047aa:	235e      	movs	r3, #94	@ 0x5e
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d115      	bne.n	80047e2 <BME680_Initialize+0x17a>
		char success_msg[] = "BME680 initialized successfully!\r\n";
 80047b6:	2508      	movs	r5, #8
 80047b8:	197b      	adds	r3, r7, r5
 80047ba:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <BME680_Initialize+0x1c4>)
 80047bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047be:	c313      	stmia	r3!, {r0, r1, r4}
 80047c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047c2:	c313      	stmia	r3!, {r0, r1, r4}
 80047c4:	ca03      	ldmia	r2!, {r0, r1}
 80047c6:	c303      	stmia	r3!, {r0, r1}
 80047c8:	8811      	ldrh	r1, [r2, #0]
 80047ca:	8019      	strh	r1, [r3, #0]
 80047cc:	7892      	ldrb	r2, [r2, #2]
 80047ce:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, (uint8_t*) success_msg,
 80047d0:	2301      	movs	r3, #1
 80047d2:	425b      	negs	r3, r3
 80047d4:	1979      	adds	r1, r7, r5
 80047d6:	480f      	ldr	r0, [pc, #60]	@ (8004814 <BME680_Initialize+0x1ac>)
 80047d8:	2222      	movs	r2, #34	@ 0x22
 80047da:	f002 fe9f 	bl	800751c <HAL_UART_Transmit>
				sizeof(success_msg) - 1, HAL_MAX_DELAY);
		return BME680_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e011      	b.n	8004806 <BME680_Initialize+0x19e>
	} else {
		char error_msg[] = "BME680 initialization failed!\r\n";
 80047e2:	2508      	movs	r5, #8
 80047e4:	197b      	adds	r3, r7, r5
 80047e6:	4a12      	ldr	r2, [pc, #72]	@ (8004830 <BME680_Initialize+0x1c8>)
 80047e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047ea:	c313      	stmia	r3!, {r0, r1, r4}
 80047ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047ee:	c313      	stmia	r3!, {r0, r1, r4}
 80047f0:	ca03      	ldmia	r2!, {r0, r1}
 80047f2:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&huart2, (uint8_t*) error_msg, sizeof(error_msg) - 1,
 80047f4:	2301      	movs	r3, #1
 80047f6:	425b      	negs	r3, r3
 80047f8:	1979      	adds	r1, r7, r5
 80047fa:	4806      	ldr	r0, [pc, #24]	@ (8004814 <BME680_Initialize+0x1ac>)
 80047fc:	221f      	movs	r2, #31
 80047fe:	f002 fe8d 	bl	800751c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		return BME680_E_COM_FAIL; // or appropriate error code
 8004802:	2302      	movs	r3, #2
 8004804:	425b      	negs	r3, r3
	}
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b018      	add	sp, #96	@ 0x60
 800480c:	bdb0      	pop	{r4, r5, r7, pc}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	0800ae38 	.word	0x0800ae38
 8004814:	20000248 	.word	0x20000248
 8004818:	080045a1 	.word	0x080045a1
 800481c:	080045f9 	.word	0x080045f9
 8004820:	08004651 	.word	0x08004651
 8004824:	0800adf0 	.word	0x0800adf0
 8004828:	0800ae10 	.word	0x0800ae10
 800482c:	0800ae54 	.word	0x0800ae54
 8004830:	0800ae78 	.word	0x0800ae78

08004834 <BME680_Configure>:

// Function to configure BME680 sensor settings
int8_t BME680_Configure(struct bme680_dev *gas_sensor) {
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	b097      	sub	sp, #92	@ 0x5c
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	// Configure temperature, pressure, and humidity settings
	gas_sensor->tph_sett.os_hum = BME680_OS_2X;   // Humidity oversampling
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2238      	movs	r2, #56	@ 0x38
 8004840:	2102      	movs	r1, #2
 8004842:	5499      	strb	r1, [r3, r2]
	gas_sensor->tph_sett.os_pres = BME680_OS_4X;  // Pressure oversampling
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223a      	movs	r2, #58	@ 0x3a
 8004848:	2103      	movs	r1, #3
 800484a:	5499      	strb	r1, [r3, r2]
	gas_sensor->tph_sett.os_temp = BME680_OS_8X;  // Temperature oversampling
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2239      	movs	r2, #57	@ 0x39
 8004850:	2104      	movs	r1, #4
 8004852:	5499      	strb	r1, [r3, r2]
	gas_sensor->tph_sett.filter = BME680_FILTER_SIZE_3; // IIR filter setting
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	223b      	movs	r2, #59	@ 0x3b
 8004858:	2102      	movs	r1, #2
 800485a:	5499      	strb	r1, [r3, r2]

	// Configure gas sensor settings
	gas_sensor->gas_sett.run_gas = BME680_ENABLE_GAS_MEAS; // Enable gas measurements
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	223e      	movs	r2, #62	@ 0x3e
 8004860:	2101      	movs	r1, #1
 8004862:	5499      	strb	r1, [r3, r2]
	gas_sensor->gas_sett.heatr_temp = 320; // Target temperature in degrees Celsius
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2240      	movs	r2, #64	@ 0x40
 8004868:	21a0      	movs	r1, #160	@ 0xa0
 800486a:	0049      	lsls	r1, r1, #1
 800486c:	5299      	strh	r1, [r3, r2]
	gas_sensor->gas_sett.heatr_dur = 150;  // Heating duration in milliseconds
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2242      	movs	r2, #66	@ 0x42
 8004872:	2196      	movs	r1, #150	@ 0x96
 8004874:	5299      	strh	r1, [r3, r2]

	// Set power mode
	gas_sensor->power_mode = BME680_FORCED_MODE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2244      	movs	r2, #68	@ 0x44
 800487a:	2101      	movs	r1, #1
 800487c:	5499      	strb	r1, [r3, r2]

	// Define which settings to apply
	uint16_t desired_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL
 800487e:	2156      	movs	r1, #86	@ 0x56
 8004880:	187b      	adds	r3, r7, r1
 8004882:	22df      	movs	r2, #223	@ 0xdf
 8004884:	801a      	strh	r2, [r3, #0]
			| BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;

	// Apply the settings to the sensor
	int8_t rslt = bme680_set_sensor_settings(desired_settings, gas_sensor);
 8004886:	2555      	movs	r5, #85	@ 0x55
 8004888:	197c      	adds	r4, r7, r5
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	187b      	adds	r3, r7, r1
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	0011      	movs	r1, r2
 8004892:	0018      	movs	r0, r3
 8004894:	f7fe fc25 	bl	80030e2 <bme680_set_sensor_settings>
 8004898:	0003      	movs	r3, r0
 800489a:	7023      	strb	r3, [r4, #0]
	if (rslt != BME680_OK) {
 800489c:	197b      	adds	r3, r7, r5
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b25b      	sxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d015      	beq.n	80048d2 <BME680_Configure+0x9e>
		char error_msg[] = "Failed to set sensor settings!\r\n";
 80048a6:	260c      	movs	r6, #12
 80048a8:	19bb      	adds	r3, r7, r6
 80048aa:	4a19      	ldr	r2, [pc, #100]	@ (8004910 <BME680_Configure+0xdc>)
 80048ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80048ae:	c313      	stmia	r3!, {r0, r1, r4}
 80048b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80048b2:	c313      	stmia	r3!, {r0, r1, r4}
 80048b4:	ca03      	ldmia	r2!, {r0, r1}
 80048b6:	c303      	stmia	r3!, {r0, r1}
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) error_msg, sizeof(error_msg) - 1,
 80048bc:	2301      	movs	r3, #1
 80048be:	425b      	negs	r3, r3
 80048c0:	19b9      	adds	r1, r7, r6
 80048c2:	4814      	ldr	r0, [pc, #80]	@ (8004914 <BME680_Configure+0xe0>)
 80048c4:	2220      	movs	r2, #32
 80048c6:	f002 fe29 	bl	800751c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		return rslt;
 80048ca:	197b      	adds	r3, r7, r5
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	e019      	b.n	8004906 <BME680_Configure+0xd2>
	}

	// Get measurement period (optional, for information)
	uint16_t meas_period;
	bme680_get_profile_dur(&meas_period, gas_sensor);
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	2352      	movs	r3, #82	@ 0x52
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	0011      	movs	r1, r2
 80048da:	0018      	movs	r0, r3
 80048dc:	f7fe fed6 	bl	800368c <bme680_get_profile_dur>

	char config_msg[] = "BME680 configured successfully!\r\n";
 80048e0:	2530      	movs	r5, #48	@ 0x30
 80048e2:	197b      	adds	r3, r7, r5
 80048e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004918 <BME680_Configure+0xe4>)
 80048e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80048e8:	c313      	stmia	r3!, {r0, r1, r4}
 80048ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80048ec:	c313      	stmia	r3!, {r0, r1, r4}
 80048ee:	ca03      	ldmia	r2!, {r0, r1}
 80048f0:	c303      	stmia	r3!, {r0, r1}
 80048f2:	8812      	ldrh	r2, [r2, #0]
 80048f4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) config_msg, sizeof(config_msg) - 1,
 80048f6:	2301      	movs	r3, #1
 80048f8:	425b      	negs	r3, r3
 80048fa:	1979      	adds	r1, r7, r5
 80048fc:	4805      	ldr	r0, [pc, #20]	@ (8004914 <BME680_Configure+0xe0>)
 80048fe:	2221      	movs	r2, #33	@ 0x21
 8004900:	f002 fe0c 	bl	800751c <HAL_UART_Transmit>
			HAL_MAX_DELAY);

	return BME680_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	0018      	movs	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	b017      	add	sp, #92	@ 0x5c
 800490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	0800ae98 	.word	0x0800ae98
 8004914:	20000248 	.word	0x20000248
 8004918:	0800aebc 	.word	0x0800aebc

0800491c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800491c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800491e:	46c6      	mov	lr, r8
 8004920:	b500      	push	{lr}
 8004922:	b0b4      	sub	sp, #208	@ 0xd0
 8004924:	af0e      	add	r7, sp, #56	@ 0x38
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004926:	f000 fd3d 	bl	80053a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800492a:	f000 f95b 	bl	8004be4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800492e:	f000 fa6f 	bl	8004e10 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8004932:	f000 fa3d 	bl	8004db0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004936:	f000 f9bb 	bl	8004cb0 <MX_I2C1_Init>
	MX_I2C2_Init();
 800493a:	f000 f9f9 	bl	8004d30 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	MPU6050_Init();
 800493e:	f7fe f837 	bl	80029b0 <MPU6050_Init>
	sprintf(uart_buf_2, "Starting MPU6050 data reading...\r\n");
 8004942:	4a9d      	ldr	r2, [pc, #628]	@ (8004bb8 <main+0x29c>)
 8004944:	4b9d      	ldr	r3, [pc, #628]	@ (8004bbc <main+0x2a0>)
 8004946:	0011      	movs	r1, r2
 8004948:	0018      	movs	r0, r3
 800494a:	f003 ffc3 	bl	80088d4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf_2, strlen(uart_buf_2),
 800494e:	4b9b      	ldr	r3, [pc, #620]	@ (8004bbc <main+0x2a0>)
 8004950:	0018      	movs	r0, r3
 8004952:	f7fb fbd7 	bl	8000104 <strlen>
 8004956:	0003      	movs	r3, r0
 8004958:	b29a      	uxth	r2, r3
 800495a:	2301      	movs	r3, #1
 800495c:	425b      	negs	r3, r3
 800495e:	4997      	ldr	r1, [pc, #604]	@ (8004bbc <main+0x2a0>)
 8004960:	4897      	ldr	r0, [pc, #604]	@ (8004bc0 <main+0x2a4>)
 8004962:	f002 fddb 	bl	800751c <HAL_UART_Transmit>
	// Initialize and configure BME680
	struct bme680_dev gas_sensor;
	struct bme680_field_data data;

	// Initialize BME680
	if (BME680_Initialize(&gas_sensor) != BME680_OK) {
 8004966:	2314      	movs	r3, #20
 8004968:	2228      	movs	r2, #40	@ 0x28
 800496a:	189b      	adds	r3, r3, r2
 800496c:	19db      	adds	r3, r3, r7
 800496e:	0018      	movs	r0, r3
 8004970:	f7ff fe7a 	bl	8004668 <BME680_Initialize>
 8004974:	1e03      	subs	r3, r0, #0
 8004976:	d001      	beq.n	800497c <main+0x60>
		while (1)
 8004978:	46c0      	nop			@ (mov r8, r8)
 800497a:	e7fd      	b.n	8004978 <main+0x5c>
			; // Halt execution if initialization fails
	}

	// Configure BME680
	if (BME680_Configure(&gas_sensor) != BME680_OK) {
 800497c:	2314      	movs	r3, #20
 800497e:	2228      	movs	r2, #40	@ 0x28
 8004980:	189b      	adds	r3, r3, r2
 8004982:	19db      	adds	r3, r3, r7
 8004984:	0018      	movs	r0, r3
 8004986:	f7ff ff55 	bl	8004834 <BME680_Configure>
 800498a:	1e03      	subs	r3, r0, #0
 800498c:	d001      	beq.n	8004992 <main+0x76>
		while (1)
 800498e:	46c0      	nop			@ (mov r8, r8)
 8004990:	e7fd      	b.n	800498e <main+0x72>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		total_readings++;
 8004992:	4b8c      	ldr	r3, [pc, #560]	@ (8004bc4 <main+0x2a8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	4b8a      	ldr	r3, [pc, #552]	@ (8004bc4 <main+0x2a8>)
 800499a:	601a      	str	r2, [r3, #0]

		// MPU6050 data reading
		if (MPU6050_Read_All_Safe()) {
 800499c:	f7fe f892 	bl	8002ac4 <MPU6050_Read_All_Safe>
 80049a0:	1e03      	subs	r3, r0, #0
 80049a2:	d055      	beq.n	8004a50 <main+0x134>
			valid_readings++;
 80049a4:	4b88      	ldr	r3, [pc, #544]	@ (8004bc8 <main+0x2ac>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	4b87      	ldr	r3, [pc, #540]	@ (8004bc8 <main+0x2ac>)
 80049ac:	601a      	str	r2, [r3, #0]
			sprintf(uart_buf_2,
 80049ae:	4b87      	ldr	r3, [pc, #540]	@ (8004bcc <main+0x2b0>)
 80049b0:	68dc      	ldr	r4, [r3, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	623b      	str	r3, [r7, #32]
 80049b6:	627c      	str	r4, [r7, #36]	@ 0x24
 80049b8:	4b84      	ldr	r3, [pc, #528]	@ (8004bcc <main+0x2b0>)
 80049ba:	691c      	ldr	r4, [r3, #16]
 80049bc:	695d      	ldr	r5, [r3, #20]
 80049be:	4b83      	ldr	r3, [pc, #524]	@ (8004bcc <main+0x2b0>)
 80049c0:	6999      	ldr	r1, [r3, #24]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	61b9      	str	r1, [r7, #24]
 80049c6:	61fa      	str	r2, [r7, #28]
 80049c8:	4b80      	ldr	r3, [pc, #512]	@ (8004bcc <main+0x2b0>)
 80049ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80049cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049ce:	6138      	str	r0, [r7, #16]
 80049d0:	6179      	str	r1, [r7, #20]
 80049d2:	4b7e      	ldr	r3, [pc, #504]	@ (8004bcc <main+0x2b0>)
 80049d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d8:	60ba      	str	r2, [r7, #8]
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	4b7b      	ldr	r3, [pc, #492]	@ (8004bcc <main+0x2b0>)
 80049de:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80049e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049e2:	6039      	str	r1, [r7, #0]
 80049e4:	607a      	str	r2, [r7, #4]
					"Acc: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Temp=%.2f°C [%lu/%lu]\r\n",
					MPU6050.Ax, MPU6050.Ay, MPU6050.Az, MPU6050.Gx, MPU6050.Gy,
					MPU6050.Gz, MPU6050.Temperature, valid_readings,
 80049e6:	4b79      	ldr	r3, [pc, #484]	@ (8004bcc <main+0x2b0>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
			sprintf(uart_buf_2,
 80049ea:	1c18      	adds	r0, r3, #0
 80049ec:	f7fd fe00 	bl	80025f0 <__aeabi_f2d>
 80049f0:	4b75      	ldr	r3, [pc, #468]	@ (8004bc8 <main+0x2ac>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b73      	ldr	r3, [pc, #460]	@ (8004bc4 <main+0x2a8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4e75      	ldr	r6, [pc, #468]	@ (8004bd0 <main+0x2b4>)
 80049fa:	46b4      	mov	ip, r6
 80049fc:	4e6f      	ldr	r6, [pc, #444]	@ (8004bbc <main+0x2a0>)
 80049fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8004a00:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a02:	900a      	str	r0, [sp, #40]	@ 0x28
 8004a04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	9108      	str	r1, [sp, #32]
 8004a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	9206      	str	r2, [sp, #24]
 8004a14:	9307      	str	r3, [sp, #28]
 8004a16:	6938      	ldr	r0, [r7, #16]
 8004a18:	6979      	ldr	r1, [r7, #20]
 8004a1a:	9004      	str	r0, [sp, #16]
 8004a1c:	9105      	str	r1, [sp, #20]
 8004a1e:	69b9      	ldr	r1, [r7, #24]
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	9102      	str	r1, [sp, #8]
 8004a24:	9203      	str	r2, [sp, #12]
 8004a26:	9400      	str	r4, [sp, #0]
 8004a28:	9501      	str	r5, [sp, #4]
 8004a2a:	6a3a      	ldr	r2, [r7, #32]
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	4661      	mov	r1, ip
 8004a30:	0030      	movs	r0, r6
 8004a32:	f003 ff4f 	bl	80088d4 <siprintf>
					total_readings);
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf_2,
					strlen(uart_buf_2), HAL_MAX_DELAY);
 8004a36:	4b61      	ldr	r3, [pc, #388]	@ (8004bbc <main+0x2a0>)
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f7fb fb63 	bl	8000104 <strlen>
 8004a3e:	0003      	movs	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf_2,
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	2301      	movs	r3, #1
 8004a44:	425b      	negs	r3, r3
 8004a46:	495d      	ldr	r1, [pc, #372]	@ (8004bbc <main+0x2a0>)
 8004a48:	485d      	ldr	r0, [pc, #372]	@ (8004bc0 <main+0x2a4>)
 8004a4a:	f002 fd67 	bl	800751c <HAL_UART_Transmit>
 8004a4e:	e036      	b.n	8004abe <main+0x1a2>
		} else {
			sprintf(uart_buf_2,
 8004a50:	4b5d      	ldr	r3, [pc, #372]	@ (8004bc8 <main+0x2ac>)
 8004a52:	681e      	ldr	r6, [r3, #0]
 8004a54:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc4 <main+0x2a8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4698      	mov	r8, r3
					"Read failed! [%lu/%lu] Success rate: %.1f%%\r\n",
					valid_readings, total_readings,
					(float) valid_readings * 100.0 / total_readings);
 8004a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc8 <main+0x2ac>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f7fb fde0 	bl	8000624 <__aeabi_ui2f>
 8004a64:	1c03      	adds	r3, r0, #0
 8004a66:	1c18      	adds	r0, r3, #0
 8004a68:	f7fd fdc2 	bl	80025f0 <__aeabi_f2d>
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4b59      	ldr	r3, [pc, #356]	@ (8004bd4 <main+0x2b8>)
 8004a70:	f7fc fe1e 	bl	80016b0 <__aeabi_dmul>
 8004a74:	0002      	movs	r2, r0
 8004a76:	000b      	movs	r3, r1
 8004a78:	0014      	movs	r4, r2
 8004a7a:	001d      	movs	r5, r3
			sprintf(uart_buf_2,
 8004a7c:	4b51      	ldr	r3, [pc, #324]	@ (8004bc4 <main+0x2a8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7fd fd91 	bl	80025a8 <__aeabi_ui2d>
 8004a86:	0002      	movs	r2, r0
 8004a88:	000b      	movs	r3, r1
 8004a8a:	0020      	movs	r0, r4
 8004a8c:	0029      	movs	r1, r5
 8004a8e:	f7fc f9d5 	bl	8000e3c <__aeabi_ddiv>
 8004a92:	0002      	movs	r2, r0
 8004a94:	000b      	movs	r3, r1
 8004a96:	4950      	ldr	r1, [pc, #320]	@ (8004bd8 <main+0x2bc>)
 8004a98:	4848      	ldr	r0, [pc, #288]	@ (8004bbc <main+0x2a0>)
 8004a9a:	9200      	str	r2, [sp, #0]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	4643      	mov	r3, r8
 8004aa0:	0032      	movs	r2, r6
 8004aa2:	f003 ff17 	bl	80088d4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf_2,
					strlen(uart_buf_2), HAL_MAX_DELAY);
 8004aa6:	4b45      	ldr	r3, [pc, #276]	@ (8004bbc <main+0x2a0>)
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7fb fb2b 	bl	8000104 <strlen>
 8004aae:	0003      	movs	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf_2,
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	425b      	negs	r3, r3
 8004ab6:	4941      	ldr	r1, [pc, #260]	@ (8004bbc <main+0x2a0>)
 8004ab8:	4841      	ldr	r0, [pc, #260]	@ (8004bc0 <main+0x2a4>)
 8004aba:	f002 fd2f 	bl	800751c <HAL_UART_Transmit>
		}

		HAL_Delay(125);
 8004abe:	207d      	movs	r0, #125	@ 0x7d
 8004ac0:	f000 fcd4 	bl	800546c <HAL_Delay>

		// BME680 data reading
		int8_t rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8004ac4:	256f      	movs	r5, #111	@ 0x6f
 8004ac6:	2628      	movs	r6, #40	@ 0x28
 8004ac8:	19ab      	adds	r3, r5, r6
 8004aca:	19dc      	adds	r4, r3, r7
 8004acc:	2314      	movs	r3, #20
 8004ace:	199b      	adds	r3, r3, r6
 8004ad0:	19da      	adds	r2, r3, r7
 8004ad2:	19bb      	adds	r3, r7, r6
 8004ad4:	0011      	movs	r1, r2
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fe fe3c 	bl	8003754 <bme680_get_sensor_data>
 8004adc:	0003      	movs	r3, r0
 8004ade:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
 8004ae0:	19ab      	adds	r3, r5, r6
 8004ae2:	19db      	adds	r3, r3, r7
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	b25b      	sxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d14c      	bne.n	8004b86 <main+0x26a>
			sprintf(uart_buf_2,
					"Temperature: %.1f °C, Pressure: %.1f hPa, Humidity: %.1f %%, Gas: %.1f kOhms\r\n",
					data.temperature / 100.0, data.pressure / 100.0,
 8004aec:	19bb      	adds	r3, r7, r6
 8004aee:	2204      	movs	r2, #4
 8004af0:	5e9b      	ldrsh	r3, [r3, r2]
			sprintf(uart_buf_2,
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fd fd2a 	bl	800254c <__aeabi_i2d>
 8004af8:	2200      	movs	r2, #0
 8004afa:	4b36      	ldr	r3, [pc, #216]	@ (8004bd4 <main+0x2b8>)
 8004afc:	f7fc f99e 	bl	8000e3c <__aeabi_ddiv>
 8004b00:	0002      	movs	r2, r0
 8004b02:	000b      	movs	r3, r1
 8004b04:	623a      	str	r2, [r7, #32]
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
					data.temperature / 100.0, data.pressure / 100.0,
 8004b08:	19bb      	adds	r3, r7, r6
 8004b0a:	689b      	ldr	r3, [r3, #8]
			sprintf(uart_buf_2,
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7fd fd4b 	bl	80025a8 <__aeabi_ui2d>
 8004b12:	2200      	movs	r2, #0
 8004b14:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd4 <main+0x2b8>)
 8004b16:	f7fc f991 	bl	8000e3c <__aeabi_ddiv>
 8004b1a:	0002      	movs	r2, r0
 8004b1c:	000b      	movs	r3, r1
 8004b1e:	0014      	movs	r4, r2
 8004b20:	001d      	movs	r5, r3
					data.humidity / 1000.0, data.gas_resistance / 1000.0);
 8004b22:	19bb      	adds	r3, r7, r6
 8004b24:	68db      	ldr	r3, [r3, #12]
			sprintf(uart_buf_2,
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7fd fd3e 	bl	80025a8 <__aeabi_ui2d>
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004bdc <main+0x2c0>)
 8004b30:	f7fc f984 	bl	8000e3c <__aeabi_ddiv>
 8004b34:	0002      	movs	r2, r0
 8004b36:	000b      	movs	r3, r1
 8004b38:	61ba      	str	r2, [r7, #24]
 8004b3a:	61fb      	str	r3, [r7, #28]
					data.humidity / 1000.0, data.gas_resistance / 1000.0);
 8004b3c:	19bb      	adds	r3, r7, r6
 8004b3e:	691b      	ldr	r3, [r3, #16]
			sprintf(uart_buf_2,
 8004b40:	0018      	movs	r0, r3
 8004b42:	f7fd fd31 	bl	80025a8 <__aeabi_ui2d>
 8004b46:	2200      	movs	r2, #0
 8004b48:	4b24      	ldr	r3, [pc, #144]	@ (8004bdc <main+0x2c0>)
 8004b4a:	f7fc f977 	bl	8000e3c <__aeabi_ddiv>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	000b      	movs	r3, r1
 8004b52:	4923      	ldr	r1, [pc, #140]	@ (8004be0 <main+0x2c4>)
 8004b54:	4819      	ldr	r0, [pc, #100]	@ (8004bbc <main+0x2a0>)
 8004b56:	9204      	str	r2, [sp, #16]
 8004b58:	9305      	str	r3, [sp, #20]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	9202      	str	r2, [sp, #8]
 8004b60:	9303      	str	r3, [sp, #12]
 8004b62:	9400      	str	r4, [sp, #0]
 8004b64:	9501      	str	r5, [sp, #4]
 8004b66:	6a3a      	ldr	r2, [r7, #32]
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	f003 feb3 	bl	80088d4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf_2,
					strlen(uart_buf_2), HAL_MAX_DELAY);
 8004b6e:	4b13      	ldr	r3, [pc, #76]	@ (8004bbc <main+0x2a0>)
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7fb fac7 	bl	8000104 <strlen>
 8004b76:	0003      	movs	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf_2,
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	425b      	negs	r3, r3
 8004b7e:	490f      	ldr	r1, [pc, #60]	@ (8004bbc <main+0x2a0>)
 8004b80:	480f      	ldr	r0, [pc, #60]	@ (8004bc0 <main+0x2a4>)
 8004b82:	f002 fccb 	bl	800751c <HAL_UART_Transmit>
		}

		if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8004b86:	2114      	movs	r1, #20
 8004b88:	2028      	movs	r0, #40	@ 0x28
 8004b8a:	180b      	adds	r3, r1, r0
 8004b8c:	19db      	adds	r3, r3, r7
 8004b8e:	2244      	movs	r2, #68	@ 0x44
 8004b90:	5c9b      	ldrb	r3, [r3, r2]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d109      	bne.n	8004baa <main+0x28e>
			rslt = bme680_set_sensor_mode(&gas_sensor);
 8004b96:	236f      	movs	r3, #111	@ 0x6f
 8004b98:	181b      	adds	r3, r3, r0
 8004b9a:	19dc      	adds	r4, r3, r7
 8004b9c:	180b      	adds	r3, r1, r0
 8004b9e:	19db      	adds	r3, r3, r7
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7fe fcf3 	bl	800358c <bme680_set_sensor_mode>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	7023      	strb	r3, [r4, #0]
		}

		HAL_Delay(1000);
 8004baa:	23fa      	movs	r3, #250	@ 0xfa
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 fc5c 	bl	800546c <HAL_Delay>
	while (1) {
 8004bb4:	e6ed      	b.n	8004992 <main+0x76>
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	0800aee0 	.word	0x0800aee0
 8004bbc:	20000b40 	.word	0x20000b40
 8004bc0:	20000248 	.word	0x20000248
 8004bc4:	20001310 	.word	0x20001310
 8004bc8:	20001314 	.word	0x20001314
 8004bcc:	200002d0 	.word	0x200002d0
 8004bd0:	0800af04 	.word	0x0800af04
 8004bd4:	40590000 	.word	0x40590000
 8004bd8:	0800af5c 	.word	0x0800af5c
 8004bdc:	408f4000 	.word	0x408f4000
 8004be0:	0800af8c 	.word	0x0800af8c

08004be4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b099      	sub	sp, #100	@ 0x64
 8004be8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004bea:	242c      	movs	r4, #44	@ 0x2c
 8004bec:	193b      	adds	r3, r7, r4
 8004bee:	0018      	movs	r0, r3
 8004bf0:	2334      	movs	r3, #52	@ 0x34
 8004bf2:	001a      	movs	r2, r3
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f003 fedb 	bl	80089b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004bfa:	231c      	movs	r3, #28
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	0018      	movs	r0, r3
 8004c00:	2310      	movs	r3, #16
 8004c02:	001a      	movs	r2, r3
 8004c04:	2100      	movs	r1, #0
 8004c06:	f003 fed3 	bl	80089b0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8004c0a:	003b      	movs	r3, r7
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	231c      	movs	r3, #28
 8004c10:	001a      	movs	r2, r3
 8004c12:	2100      	movs	r1, #0
 8004c14:	f003 fecc 	bl	80089b0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c18:	0021      	movs	r1, r4
 8004c1a:	187b      	adds	r3, r7, r1
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	2201      	movs	r2, #1
 8004c24:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c26:	187b      	adds	r3, r7, r1
 8004c28:	2210      	movs	r2, #16
 8004c2a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	2202      	movs	r2, #2
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	2280      	movs	r2, #128	@ 0x80
 8004c36:	0212      	lsls	r2, r2, #8
 8004c38:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004c3a:	187b      	adds	r3, r7, r1
 8004c3c:	22a0      	movs	r2, #160	@ 0xa0
 8004c3e:	0392      	lsls	r2, r2, #14
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8004c42:	187b      	adds	r3, r7, r1
 8004c44:	2201      	movs	r2, #1
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f001 fe20 	bl	8006890 <HAL_RCC_OscConfig>
 8004c50:	1e03      	subs	r3, r0, #0
 8004c52:	d001      	beq.n	8004c58 <SystemClock_Config+0x74>
		Error_Handler();
 8004c54:	f000 f954 	bl	8004f00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004c58:	211c      	movs	r1, #28
 8004c5a:	187b      	adds	r3, r7, r1
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	2202      	movs	r2, #2
 8004c64:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c66:	187b      	adds	r3, r7, r1
 8004c68:	2200      	movs	r2, #0
 8004c6a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	2200      	movs	r2, #0
 8004c70:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	2101      	movs	r1, #1
 8004c76:	0018      	movs	r0, r3
 8004c78:	f002 f990 	bl	8006f9c <HAL_RCC_ClockConfig>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d001      	beq.n	8004c84 <SystemClock_Config+0xa0>
		Error_Handler();
 8004c80:	f000 f93e 	bl	8004f00 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8004c84:	003b      	movs	r3, r7
 8004c86:	2222      	movs	r2, #34	@ 0x22
 8004c88:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c8a:	003b      	movs	r3, r7
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	60da      	str	r2, [r3, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004c90:	003b      	movs	r3, r7
 8004c92:	2200      	movs	r2, #0
 8004c94:	615a      	str	r2, [r3, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004c96:	003b      	movs	r3, r7
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f002 faeb 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
 8004c9e:	1e03      	subs	r3, r0, #0
 8004ca0:	d001      	beq.n	8004ca6 <SystemClock_Config+0xc2>
		Error_Handler();
 8004ca2:	f000 f92d 	bl	8004f00 <Error_Handler>
	}
}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b019      	add	sp, #100	@ 0x64
 8004cac:	bd90      	pop	{r4, r7, pc}
	...

08004cb0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d28 <MX_I2C1_Init+0x78>)
 8004cb8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00201D2B;
 8004cba:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <MX_I2C1_Init+0x7c>)
 8004cbe:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004cc0:	4b18      	ldr	r3, [pc, #96]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cc6:	4b17      	ldr	r3, [pc, #92]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ccc:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004cd8:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cde:	4b11      	ldr	r3, [pc, #68]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004cea:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cec:	0018      	movs	r0, r3
 8004cee:	f000 ff03 	bl	8005af8 <HAL_I2C_Init>
 8004cf2:	1e03      	subs	r3, r0, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_I2C1_Init+0x4a>
		Error_Handler();
 8004cf6:	f000 f903 	bl	8004f00 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f001 fd2e 	bl	8006760 <HAL_I2CEx_ConfigAnalogFilter>
 8004d04:	1e03      	subs	r3, r0, #0
 8004d06:	d001      	beq.n	8004d0c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8004d08:	f000 f8fa 	bl	8004f00 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <MX_I2C1_Init+0x74>)
 8004d0e:	2100      	movs	r1, #0
 8004d10:	0018      	movs	r0, r3
 8004d12:	f001 fd71 	bl	80067f8 <HAL_I2CEx_ConfigDigitalFilter>
 8004d16:	1e03      	subs	r3, r0, #0
 8004d18:	d001      	beq.n	8004d1e <MX_I2C1_Init+0x6e>
		Error_Handler();
 8004d1a:	f000 f8f1 	bl	8004f00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	200001f4 	.word	0x200001f4
 8004d28:	40005400 	.word	0x40005400
 8004d2c:	00201d2b 	.word	0x00201d2b

08004d30 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8004d34:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d36:	4a1c      	ldr	r2, [pc, #112]	@ (8004da8 <MX_I2C2_Init+0x78>)
 8004d38:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <MX_I2C2_Init+0x7c>)
 8004d3e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8004d40:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d46:	4b17      	ldr	r3, [pc, #92]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d4c:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8004d52:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d58:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d5e:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d64:	4b0f      	ldr	r3, [pc, #60]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f000 fec3 	bl	8005af8 <HAL_I2C_Init>
 8004d72:	1e03      	subs	r3, r0, #0
 8004d74:	d001      	beq.n	8004d7a <MX_I2C2_Init+0x4a>
		Error_Handler();
 8004d76:	f000 f8c3 	bl	8004f00 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f001 fcee 	bl	8006760 <HAL_I2CEx_ConfigAnalogFilter>
 8004d84:	1e03      	subs	r3, r0, #0
 8004d86:	d001      	beq.n	8004d8c <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8004d88:	f000 f8ba 	bl	8004f00 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8004d8c:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <MX_I2C2_Init+0x74>)
 8004d8e:	2100      	movs	r1, #0
 8004d90:	0018      	movs	r0, r3
 8004d92:	f001 fd31 	bl	80067f8 <HAL_I2CEx_ConfigDigitalFilter>
 8004d96:	1e03      	subs	r3, r0, #0
 8004d98:	d001      	beq.n	8004d9e <MX_I2C2_Init+0x6e>
		Error_Handler();
 8004d9a:	f000 f8b1 	bl	8004f00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000aec 	.word	0x20000aec
 8004da8:	40005800 	.word	0x40005800
 8004dac:	20303e5d 	.word	0x20303e5d

08004db0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004db4:	4b14      	ldr	r3, [pc, #80]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004db6:	4a15      	ldr	r2, [pc, #84]	@ (8004e0c <MX_USART2_UART_Init+0x5c>)
 8004db8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004dba:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004dbc:	22e1      	movs	r2, #225	@ 0xe1
 8004dbe:	0252      	lsls	r2, r2, #9
 8004dc0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dc2:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004dce:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004dd6:	220c      	movs	r2, #12
 8004dd8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dda:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004de0:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004de6:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dec:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004df2:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <MX_USART2_UART_Init+0x58>)
 8004df4:	0018      	movs	r0, r3
 8004df6:	f002 fb3d 	bl	8007474 <HAL_UART_Init>
 8004dfa:	1e03      	subs	r3, r0, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8004dfe:	f000 f87f 	bl	8004f00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000248 	.word	0x20000248
 8004e0c:	40004400 	.word	0x40004400

08004e10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b08b      	sub	sp, #44	@ 0x2c
 8004e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004e16:	2414      	movs	r4, #20
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	2314      	movs	r3, #20
 8004e1e:	001a      	movs	r2, r3
 8004e20:	2100      	movs	r1, #0
 8004e22:	f003 fdc5 	bl	80089b0 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004e26:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	4b33      	ldr	r3, [pc, #204]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e2c:	2180      	movs	r1, #128	@ 0x80
 8004e2e:	0309      	lsls	r1, r1, #12
 8004e30:	430a      	orrs	r2, r1
 8004e32:	615a      	str	r2, [r3, #20]
 8004e34:	4b30      	ldr	r3, [pc, #192]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	031b      	lsls	r3, r3, #12
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004e42:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	4b2c      	ldr	r3, [pc, #176]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e48:	2180      	movs	r1, #128	@ 0x80
 8004e4a:	03c9      	lsls	r1, r1, #15
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	615a      	str	r2, [r3, #20]
 8004e50:	4b29      	ldr	r3, [pc, #164]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	2380      	movs	r3, #128	@ 0x80
 8004e56:	03db      	lsls	r3, r3, #15
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004e5e:	4b26      	ldr	r3, [pc, #152]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	4b25      	ldr	r3, [pc, #148]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e64:	2180      	movs	r1, #128	@ 0x80
 8004e66:	0289      	lsls	r1, r1, #10
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	615a      	str	r2, [r3, #20]
 8004e6c:	4b22      	ldr	r3, [pc, #136]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	2380      	movs	r3, #128	@ 0x80
 8004e72:	029b      	lsls	r3, r3, #10
 8004e74:	4013      	ands	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e80:	2180      	movs	r1, #128	@ 0x80
 8004e82:	02c9      	lsls	r1, r1, #11
 8004e84:	430a      	orrs	r2, r1
 8004e86:	615a      	str	r2, [r3, #20]
 8004e88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef8 <MX_GPIO_Init+0xe8>)
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	02db      	lsls	r3, r3, #11
 8004e90:	4013      	ands	r3, r2
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004e96:	2390      	movs	r3, #144	@ 0x90
 8004e98:	05db      	lsls	r3, r3, #23
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2120      	movs	r1, #32
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 fe0c 	bl	8005abc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8004ea4:	193b      	adds	r3, r7, r4
 8004ea6:	2280      	movs	r2, #128	@ 0x80
 8004ea8:	0192      	lsls	r2, r2, #6
 8004eaa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004eac:	193b      	adds	r3, r7, r4
 8004eae:	2284      	movs	r2, #132	@ 0x84
 8004eb0:	0392      	lsls	r2, r2, #14
 8004eb2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb4:	193b      	adds	r3, r7, r4
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004eba:	193b      	adds	r3, r7, r4
 8004ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8004efc <MX_GPIO_Init+0xec>)
 8004ebe:	0019      	movs	r1, r3
 8004ec0:	0010      	movs	r0, r2
 8004ec2:	f000 fbab 	bl	800561c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8004ec6:	0021      	movs	r1, r4
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	2220      	movs	r2, #32
 8004ecc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ece:	187b      	adds	r3, r7, r1
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed4:	187b      	adds	r3, r7, r1
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eda:	187b      	adds	r3, r7, r1
 8004edc:	2200      	movs	r2, #0
 8004ede:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004ee0:	187a      	adds	r2, r7, r1
 8004ee2:	2390      	movs	r3, #144	@ 0x90
 8004ee4:	05db      	lsls	r3, r3, #23
 8004ee6:	0011      	movs	r1, r2
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 fb97 	bl	800561c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b00b      	add	sp, #44	@ 0x2c
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	48000800 	.word	0x48000800

08004f00 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f04:	b672      	cpsid	i
}
 8004f06:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004f08:	46c0      	nop			@ (mov r8, r8)
 8004f0a:	e7fd      	b.n	8004f08 <Error_Handler+0x8>

08004f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f12:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <HAL_MspInit+0x44>)
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	4b0e      	ldr	r3, [pc, #56]	@ (8004f50 <HAL_MspInit+0x44>)
 8004f18:	2101      	movs	r1, #1
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	619a      	str	r2, [r3, #24]
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <HAL_MspInit+0x44>)
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2201      	movs	r2, #1
 8004f24:	4013      	ands	r3, r2
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f2a:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <HAL_MspInit+0x44>)
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <HAL_MspInit+0x44>)
 8004f30:	2180      	movs	r1, #128	@ 0x80
 8004f32:	0549      	lsls	r1, r1, #21
 8004f34:	430a      	orrs	r2, r1
 8004f36:	61da      	str	r2, [r3, #28]
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <HAL_MspInit+0x44>)
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	055b      	lsls	r3, r3, #21
 8004f40:	4013      	ands	r3, r2
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	40021000 	.word	0x40021000

08004f54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b08d      	sub	sp, #52	@ 0x34
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	241c      	movs	r4, #28
 8004f5e:	193b      	adds	r3, r7, r4
 8004f60:	0018      	movs	r0, r3
 8004f62:	2314      	movs	r3, #20
 8004f64:	001a      	movs	r2, r3
 8004f66:	2100      	movs	r1, #0
 8004f68:	f003 fd22 	bl	80089b0 <memset>
  if(hi2c->Instance==I2C1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a39      	ldr	r2, [pc, #228]	@ (8005058 <HAL_I2C_MspInit+0x104>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d134      	bne.n	8004fe0 <HAL_I2C_MspInit+0x8c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f76:	4b39      	ldr	r3, [pc, #228]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	4b38      	ldr	r3, [pc, #224]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004f7c:	2180      	movs	r1, #128	@ 0x80
 8004f7e:	0289      	lsls	r1, r1, #10
 8004f80:	430a      	orrs	r2, r1
 8004f82:	615a      	str	r2, [r3, #20]
 8004f84:	4b35      	ldr	r3, [pc, #212]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004f86:	695a      	ldr	r2, [r3, #20]
 8004f88:	2380      	movs	r3, #128	@ 0x80
 8004f8a:	029b      	lsls	r3, r3, #10
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004f92:	193b      	adds	r3, r7, r4
 8004f94:	22c0      	movs	r2, #192	@ 0xc0
 8004f96:	00d2      	lsls	r2, r2, #3
 8004f98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f9a:	0021      	movs	r1, r4
 8004f9c:	187b      	adds	r3, r7, r1
 8004f9e:	2212      	movs	r2, #18
 8004fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa2:	187b      	adds	r3, r7, r1
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fa8:	187b      	adds	r3, r7, r1
 8004faa:	2203      	movs	r2, #3
 8004fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb4:	187a      	adds	r2, r7, r1
 8004fb6:	2390      	movs	r3, #144	@ 0x90
 8004fb8:	05db      	lsls	r3, r3, #23
 8004fba:	0011      	movs	r1, r2
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f000 fb2d 	bl	800561c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fc2:	4b26      	ldr	r3, [pc, #152]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	4b25      	ldr	r3, [pc, #148]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004fc8:	2180      	movs	r1, #128	@ 0x80
 8004fca:	0389      	lsls	r1, r1, #14
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	61da      	str	r2, [r3, #28]
 8004fd0:	4b22      	ldr	r3, [pc, #136]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	2380      	movs	r3, #128	@ 0x80
 8004fd6:	039b      	lsls	r3, r3, #14
 8004fd8:	4013      	ands	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004fde:	e037      	b.n	8005050 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8005060 <HAL_I2C_MspInit+0x10c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d132      	bne.n	8005050 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fea:	4b1c      	ldr	r3, [pc, #112]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	4b1b      	ldr	r3, [pc, #108]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004ff0:	2180      	movs	r1, #128	@ 0x80
 8004ff2:	02c9      	lsls	r1, r1, #11
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	615a      	str	r2, [r3, #20]
 8004ff8:	4b18      	ldr	r3, [pc, #96]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	02db      	lsls	r3, r3, #11
 8005000:	4013      	ands	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005006:	211c      	movs	r1, #28
 8005008:	187b      	adds	r3, r7, r1
 800500a:	22c0      	movs	r2, #192	@ 0xc0
 800500c:	0112      	lsls	r2, r2, #4
 800500e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005010:	187b      	adds	r3, r7, r1
 8005012:	2212      	movs	r2, #18
 8005014:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005016:	187b      	adds	r3, r7, r1
 8005018:	2200      	movs	r2, #0
 800501a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800501c:	187b      	adds	r3, r7, r1
 800501e:	2203      	movs	r2, #3
 8005020:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8005022:	187b      	adds	r3, r7, r1
 8005024:	2201      	movs	r2, #1
 8005026:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005028:	187b      	adds	r3, r7, r1
 800502a:	4a0e      	ldr	r2, [pc, #56]	@ (8005064 <HAL_I2C_MspInit+0x110>)
 800502c:	0019      	movs	r1, r3
 800502e:	0010      	movs	r0, r2
 8005030:	f000 faf4 	bl	800561c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005034:	4b09      	ldr	r3, [pc, #36]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	4b08      	ldr	r3, [pc, #32]	@ (800505c <HAL_I2C_MspInit+0x108>)
 800503a:	2180      	movs	r1, #128	@ 0x80
 800503c:	03c9      	lsls	r1, r1, #15
 800503e:	430a      	orrs	r2, r1
 8005040:	61da      	str	r2, [r3, #28]
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <HAL_I2C_MspInit+0x108>)
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	2380      	movs	r3, #128	@ 0x80
 8005048:	03db      	lsls	r3, r3, #15
 800504a:	4013      	ands	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
}
 8005050:	46c0      	nop			@ (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	b00d      	add	sp, #52	@ 0x34
 8005056:	bd90      	pop	{r4, r7, pc}
 8005058:	40005400 	.word	0x40005400
 800505c:	40021000 	.word	0x40021000
 8005060:	40005800 	.word	0x40005800
 8005064:	48000400 	.word	0x48000400

08005068 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1b      	ldr	r2, [pc, #108]	@ (80050e4 <HAL_I2C_MspDeInit+0x7c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d116      	bne.n	80050a8 <HAL_I2C_MspDeInit+0x40>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800507a:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <HAL_I2C_MspDeInit+0x80>)
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <HAL_I2C_MspDeInit+0x80>)
 8005080:	491a      	ldr	r1, [pc, #104]	@ (80050ec <HAL_I2C_MspDeInit+0x84>)
 8005082:	400a      	ands	r2, r1
 8005084:	61da      	str	r2, [r3, #28]

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8005086:	2380      	movs	r3, #128	@ 0x80
 8005088:	009a      	lsls	r2, r3, #2
 800508a:	2390      	movs	r3, #144	@ 0x90
 800508c:	05db      	lsls	r3, r3, #23
 800508e:	0011      	movs	r1, r2
 8005090:	0018      	movs	r0, r3
 8005092:	f000 fc3b 	bl	800590c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8005096:	2380      	movs	r3, #128	@ 0x80
 8005098:	00da      	lsls	r2, r3, #3
 800509a:	2390      	movs	r3, #144	@ 0x90
 800509c:	05db      	lsls	r3, r3, #23
 800509e:	0011      	movs	r1, r2
 80050a0:	0018      	movs	r0, r3
 80050a2:	f000 fc33 	bl	800590c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80050a6:	e018      	b.n	80050da <HAL_I2C_MspDeInit+0x72>
  else if(hi2c->Instance==I2C2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a10      	ldr	r2, [pc, #64]	@ (80050f0 <HAL_I2C_MspDeInit+0x88>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d113      	bne.n	80050da <HAL_I2C_MspDeInit+0x72>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80050b2:	4b0d      	ldr	r3, [pc, #52]	@ (80050e8 <HAL_I2C_MspDeInit+0x80>)
 80050b4:	69da      	ldr	r2, [r3, #28]
 80050b6:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <HAL_I2C_MspDeInit+0x80>)
 80050b8:	490e      	ldr	r1, [pc, #56]	@ (80050f4 <HAL_I2C_MspDeInit+0x8c>)
 80050ba:	400a      	ands	r2, r1
 80050bc:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80050be:	2380      	movs	r3, #128	@ 0x80
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4a0d      	ldr	r2, [pc, #52]	@ (80050f8 <HAL_I2C_MspDeInit+0x90>)
 80050c4:	0019      	movs	r1, r3
 80050c6:	0010      	movs	r0, r2
 80050c8:	f000 fc20 	bl	800590c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <HAL_I2C_MspDeInit+0x90>)
 80050d2:	0019      	movs	r1, r3
 80050d4:	0010      	movs	r0, r2
 80050d6:	f000 fc19 	bl	800590c <HAL_GPIO_DeInit>
}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	b002      	add	sp, #8
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	40005400 	.word	0x40005400
 80050e8:	40021000 	.word	0x40021000
 80050ec:	ffdfffff 	.word	0xffdfffff
 80050f0:	40005800 	.word	0x40005800
 80050f4:	ffbfffff 	.word	0xffbfffff
 80050f8:	48000400 	.word	0x48000400

080050fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b08b      	sub	sp, #44	@ 0x2c
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005104:	2414      	movs	r4, #20
 8005106:	193b      	adds	r3, r7, r4
 8005108:	0018      	movs	r0, r3
 800510a:	2314      	movs	r3, #20
 800510c:	001a      	movs	r2, r3
 800510e:	2100      	movs	r1, #0
 8005110:	f003 fc4e 	bl	80089b0 <memset>
  if(huart->Instance==USART2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_UART_MspInit+0x90>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d132      	bne.n	8005184 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800511e:	4b1c      	ldr	r3, [pc, #112]	@ (8005190 <HAL_UART_MspInit+0x94>)
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	4b1b      	ldr	r3, [pc, #108]	@ (8005190 <HAL_UART_MspInit+0x94>)
 8005124:	2180      	movs	r1, #128	@ 0x80
 8005126:	0289      	lsls	r1, r1, #10
 8005128:	430a      	orrs	r2, r1
 800512a:	61da      	str	r2, [r3, #28]
 800512c:	4b18      	ldr	r3, [pc, #96]	@ (8005190 <HAL_UART_MspInit+0x94>)
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	2380      	movs	r3, #128	@ 0x80
 8005132:	029b      	lsls	r3, r3, #10
 8005134:	4013      	ands	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800513a:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <HAL_UART_MspInit+0x94>)
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	4b14      	ldr	r3, [pc, #80]	@ (8005190 <HAL_UART_MspInit+0x94>)
 8005140:	2180      	movs	r1, #128	@ 0x80
 8005142:	0289      	lsls	r1, r1, #10
 8005144:	430a      	orrs	r2, r1
 8005146:	615a      	str	r2, [r3, #20]
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <HAL_UART_MspInit+0x94>)
 800514a:	695a      	ldr	r2, [r3, #20]
 800514c:	2380      	movs	r3, #128	@ 0x80
 800514e:	029b      	lsls	r3, r3, #10
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005156:	0021      	movs	r1, r4
 8005158:	187b      	adds	r3, r7, r1
 800515a:	220c      	movs	r2, #12
 800515c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515e:	187b      	adds	r3, r7, r1
 8005160:	2202      	movs	r2, #2
 8005162:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005164:	187b      	adds	r3, r7, r1
 8005166:	2200      	movs	r2, #0
 8005168:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516a:	187b      	adds	r3, r7, r1
 800516c:	2200      	movs	r2, #0
 800516e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005170:	187b      	adds	r3, r7, r1
 8005172:	2201      	movs	r2, #1
 8005174:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005176:	187a      	adds	r2, r7, r1
 8005178:	2390      	movs	r3, #144	@ 0x90
 800517a:	05db      	lsls	r3, r3, #23
 800517c:	0011      	movs	r1, r2
 800517e:	0018      	movs	r0, r3
 8005180:	f000 fa4c 	bl	800561c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8005184:	46c0      	nop			@ (mov r8, r8)
 8005186:	46bd      	mov	sp, r7
 8005188:	b00b      	add	sp, #44	@ 0x2c
 800518a:	bd90      	pop	{r4, r7, pc}
 800518c:	40004400 	.word	0x40004400
 8005190:	40021000 	.word	0x40021000

08005194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	e7fd      	b.n	8005198 <NMI_Handler+0x4>

0800519c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051a0:	46c0      	nop			@ (mov r8, r8)
 80051a2:	e7fd      	b.n	80051a0 <HardFault_Handler+0x4>

080051a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80051a8:	46c0      	nop			@ (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051bc:	f000 f93a 	bl	8005434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051c0:	46c0      	nop			@ (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	af00      	add	r7, sp, #0
  return 1;
 80051ca:	2301      	movs	r3, #1
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <_kill>:

int _kill(int pid, int sig)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80051dc:	f003 fc42 	bl	8008a64 <__errno>
 80051e0:	0003      	movs	r3, r0
 80051e2:	2216      	movs	r2, #22
 80051e4:	601a      	str	r2, [r3, #0]
  return -1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	425b      	negs	r3, r3
}
 80051ea:	0018      	movs	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b002      	add	sp, #8
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <_exit>:

void _exit (int status)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80051fa:	2301      	movs	r3, #1
 80051fc:	425a      	negs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0011      	movs	r1, r2
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff ffe5 	bl	80051d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005208:	46c0      	nop			@ (mov r8, r8)
 800520a:	e7fd      	b.n	8005208 <_exit+0x16>

0800520c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e00a      	b.n	8005234 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800521e:	e000      	b.n	8005222 <_read+0x16>
 8005220:	bf00      	nop
 8005222:	0001      	movs	r1, r0
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	60ba      	str	r2, [r7, #8]
 800522a:	b2ca      	uxtb	r2, r1
 800522c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	3301      	adds	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	dbf0      	blt.n	800521e <_read+0x12>
  }

  return len;
 800523c:	687b      	ldr	r3, [r7, #4]
}
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b006      	add	sp, #24
 8005244:	bd80      	pop	{r7, pc}

08005246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e009      	b.n	800526c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	60ba      	str	r2, [r7, #8]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	0018      	movs	r0, r3
 8005262:	e000      	b.n	8005266 <_write+0x20>
 8005264:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	3301      	adds	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	429a      	cmp	r2, r3
 8005272:	dbf1      	blt.n	8005258 <_write+0x12>
  }
  return len;
 8005274:	687b      	ldr	r3, [r7, #4]
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b006      	add	sp, #24
 800527c:	bd80      	pop	{r7, pc}

0800527e <_close>:

int _close(int file)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005286:	2301      	movs	r3, #1
 8005288:	425b      	negs	r3, r3
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b002      	add	sp, #8
 8005290:	bd80      	pop	{r7, pc}

08005292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2280      	movs	r2, #128	@ 0x80
 80052a0:	0192      	lsls	r2, r2, #6
 80052a2:	605a      	str	r2, [r3, #4]
  return 0;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b002      	add	sp, #8
 80052ac:	bd80      	pop	{r7, pc}

080052ae <_isatty>:

int _isatty(int file)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80052b6:	2301      	movs	r3, #1
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b004      	add	sp, #16
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052e0:	4a14      	ldr	r2, [pc, #80]	@ (8005334 <_sbrk+0x5c>)
 80052e2:	4b15      	ldr	r3, [pc, #84]	@ (8005338 <_sbrk+0x60>)
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052ec:	4b13      	ldr	r3, [pc, #76]	@ (800533c <_sbrk+0x64>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <_sbrk+0x64>)
 80052f6:	4a12      	ldr	r2, [pc, #72]	@ (8005340 <_sbrk+0x68>)
 80052f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <_sbrk+0x64>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	18d3      	adds	r3, r2, r3
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	429a      	cmp	r2, r3
 8005306:	d207      	bcs.n	8005318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005308:	f003 fbac 	bl	8008a64 <__errno>
 800530c:	0003      	movs	r3, r0
 800530e:	220c      	movs	r2, #12
 8005310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005312:	2301      	movs	r3, #1
 8005314:	425b      	negs	r3, r3
 8005316:	e009      	b.n	800532c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005318:	4b08      	ldr	r3, [pc, #32]	@ (800533c <_sbrk+0x64>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800531e:	4b07      	ldr	r3, [pc, #28]	@ (800533c <_sbrk+0x64>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	18d2      	adds	r2, r2, r3
 8005326:	4b05      	ldr	r3, [pc, #20]	@ (800533c <_sbrk+0x64>)
 8005328:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b006      	add	sp, #24
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20008000 	.word	0x20008000
 8005338:	00000400 	.word	0x00000400
 800533c:	20001318 	.word	0x20001318
 8005340:	20001470 	.word	0x20001470

08005344 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005348:	46c0      	nop			@ (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005350:	480d      	ldr	r0, [pc, #52]	@ (8005388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005352:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005354:	f7ff fff6 	bl	8005344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005358:	480c      	ldr	r0, [pc, #48]	@ (800538c <LoopForever+0x6>)
  ldr r1, =_edata
 800535a:	490d      	ldr	r1, [pc, #52]	@ (8005390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800535c:	4a0d      	ldr	r2, [pc, #52]	@ (8005394 <LoopForever+0xe>)
  movs r3, #0
 800535e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005360:	e002      	b.n	8005368 <LoopCopyDataInit>

08005362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005366:	3304      	adds	r3, #4

08005368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800536a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800536c:	d3f9      	bcc.n	8005362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800536e:	4a0a      	ldr	r2, [pc, #40]	@ (8005398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005370:	4c0a      	ldr	r4, [pc, #40]	@ (800539c <LoopForever+0x16>)
  movs r3, #0
 8005372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005374:	e001      	b.n	800537a <LoopFillZerobss>

08005376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005378:	3204      	adds	r2, #4

0800537a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800537a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800537c:	d3fb      	bcc.n	8005376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800537e:	f003 fb77 	bl	8008a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005382:	f7ff facb 	bl	800491c <main>

08005386 <LoopForever>:

LoopForever:
    b LoopForever
 8005386:	e7fe      	b.n	8005386 <LoopForever>
  ldr   r0, =_estack
 8005388:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800538c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005390:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8005394:	0800b3dc 	.word	0x0800b3dc
  ldr r2, =_sbss
 8005398:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800539c:	2000146c 	.word	0x2000146c

080053a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80053a0:	e7fe      	b.n	80053a0 <ADC1_COMP_IRQHandler>
	...

080053a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053a8:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <HAL_Init+0x24>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <HAL_Init+0x24>)
 80053ae:	2110      	movs	r1, #16
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80053b4:	2000      	movs	r0, #0
 80053b6:	f000 f809 	bl	80053cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053ba:	f7ff fda7 	bl	8004f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	40022000 	.word	0x40022000

080053cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053d4:	4b14      	ldr	r3, [pc, #80]	@ (8005428 <HAL_InitTick+0x5c>)
 80053d6:	681c      	ldr	r4, [r3, #0]
 80053d8:	4b14      	ldr	r3, [pc, #80]	@ (800542c <HAL_InitTick+0x60>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	0019      	movs	r1, r3
 80053de:	23fa      	movs	r3, #250	@ 0xfa
 80053e0:	0098      	lsls	r0, r3, #2
 80053e2:	f7fa feab 	bl	800013c <__udivsi3>
 80053e6:	0003      	movs	r3, r0
 80053e8:	0019      	movs	r1, r3
 80053ea:	0020      	movs	r0, r4
 80053ec:	f7fa fea6 	bl	800013c <__udivsi3>
 80053f0:	0003      	movs	r3, r0
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 f905 	bl	8005602 <HAL_SYSTICK_Config>
 80053f8:	1e03      	subs	r3, r0, #0
 80053fa:	d001      	beq.n	8005400 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e00f      	b.n	8005420 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d80b      	bhi.n	800541e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	2301      	movs	r3, #1
 800540a:	425b      	negs	r3, r3
 800540c:	2200      	movs	r2, #0
 800540e:	0018      	movs	r0, r3
 8005410:	f000 f8e2 	bl	80055d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <HAL_InitTick+0x64>)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b003      	add	sp, #12
 8005426:	bd90      	pop	{r4, r7, pc}
 8005428:	20000000 	.word	0x20000000
 800542c:	20000008 	.word	0x20000008
 8005430:	20000004 	.word	0x20000004

08005434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005438:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <HAL_IncTick+0x1c>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	001a      	movs	r2, r3
 800543e:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <HAL_IncTick+0x20>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	18d2      	adds	r2, r2, r3
 8005444:	4b03      	ldr	r3, [pc, #12]	@ (8005454 <HAL_IncTick+0x20>)
 8005446:	601a      	str	r2, [r3, #0]
}
 8005448:	46c0      	nop			@ (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	20000008 	.word	0x20000008
 8005454:	2000131c 	.word	0x2000131c

08005458 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  return uwTick;
 800545c:	4b02      	ldr	r3, [pc, #8]	@ (8005468 <HAL_GetTick+0x10>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	2000131c 	.word	0x2000131c

0800546c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005474:	f7ff fff0 	bl	8005458 <HAL_GetTick>
 8005478:	0003      	movs	r3, r0
 800547a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	d005      	beq.n	8005492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005486:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <HAL_Delay+0x44>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	001a      	movs	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	189b      	adds	r3, r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	f7ff ffe0 	bl	8005458 <HAL_GetTick>
 8005498:	0002      	movs	r2, r0
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d8f7      	bhi.n	8005494 <HAL_Delay+0x28>
  {
  }
}
 80054a4:	46c0      	nop			@ (mov r8, r8)
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	46bd      	mov	sp, r7
 80054aa:	b004      	add	sp, #16
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	46c0      	nop			@ (mov r8, r8)
 80054b0:	20000008 	.word	0x20000008

080054b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	0002      	movs	r2, r0
 80054bc:	6039      	str	r1, [r7, #0]
 80054be:	1dfb      	adds	r3, r7, #7
 80054c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80054c2:	1dfb      	adds	r3, r7, #7
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c8:	d828      	bhi.n	800551c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005588 <__NVIC_SetPriority+0xd4>)
 80054cc:	1dfb      	adds	r3, r7, #7
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	33c0      	adds	r3, #192	@ 0xc0
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	589b      	ldr	r3, [r3, r2]
 80054da:	1dfa      	adds	r2, r7, #7
 80054dc:	7812      	ldrb	r2, [r2, #0]
 80054de:	0011      	movs	r1, r2
 80054e0:	2203      	movs	r2, #3
 80054e2:	400a      	ands	r2, r1
 80054e4:	00d2      	lsls	r2, r2, #3
 80054e6:	21ff      	movs	r1, #255	@ 0xff
 80054e8:	4091      	lsls	r1, r2
 80054ea:	000a      	movs	r2, r1
 80054ec:	43d2      	mvns	r2, r2
 80054ee:	401a      	ands	r2, r3
 80054f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	22ff      	movs	r2, #255	@ 0xff
 80054f8:	401a      	ands	r2, r3
 80054fa:	1dfb      	adds	r3, r7, #7
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	0018      	movs	r0, r3
 8005500:	2303      	movs	r3, #3
 8005502:	4003      	ands	r3, r0
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005508:	481f      	ldr	r0, [pc, #124]	@ (8005588 <__NVIC_SetPriority+0xd4>)
 800550a:	1dfb      	adds	r3, r7, #7
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b25b      	sxtb	r3, r3
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	430a      	orrs	r2, r1
 8005514:	33c0      	adds	r3, #192	@ 0xc0
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800551a:	e031      	b.n	8005580 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800551c:	4a1b      	ldr	r2, [pc, #108]	@ (800558c <__NVIC_SetPriority+0xd8>)
 800551e:	1dfb      	adds	r3, r7, #7
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	0019      	movs	r1, r3
 8005524:	230f      	movs	r3, #15
 8005526:	400b      	ands	r3, r1
 8005528:	3b08      	subs	r3, #8
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	3306      	adds	r3, #6
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	18d3      	adds	r3, r2, r3
 8005532:	3304      	adds	r3, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	1dfa      	adds	r2, r7, #7
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	0011      	movs	r1, r2
 800553c:	2203      	movs	r2, #3
 800553e:	400a      	ands	r2, r1
 8005540:	00d2      	lsls	r2, r2, #3
 8005542:	21ff      	movs	r1, #255	@ 0xff
 8005544:	4091      	lsls	r1, r2
 8005546:	000a      	movs	r2, r1
 8005548:	43d2      	mvns	r2, r2
 800554a:	401a      	ands	r2, r3
 800554c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	019b      	lsls	r3, r3, #6
 8005552:	22ff      	movs	r2, #255	@ 0xff
 8005554:	401a      	ands	r2, r3
 8005556:	1dfb      	adds	r3, r7, #7
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	0018      	movs	r0, r3
 800555c:	2303      	movs	r3, #3
 800555e:	4003      	ands	r3, r0
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005564:	4809      	ldr	r0, [pc, #36]	@ (800558c <__NVIC_SetPriority+0xd8>)
 8005566:	1dfb      	adds	r3, r7, #7
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	001c      	movs	r4, r3
 800556c:	230f      	movs	r3, #15
 800556e:	4023      	ands	r3, r4
 8005570:	3b08      	subs	r3, #8
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	430a      	orrs	r2, r1
 8005576:	3306      	adds	r3, #6
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	18c3      	adds	r3, r0, r3
 800557c:	3304      	adds	r3, #4
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	46c0      	nop			@ (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b003      	add	sp, #12
 8005586:	bd90      	pop	{r4, r7, pc}
 8005588:	e000e100 	.word	0xe000e100
 800558c:	e000ed00 	.word	0xe000ed00

08005590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	1e5a      	subs	r2, r3, #1
 800559c:	2380      	movs	r3, #128	@ 0x80
 800559e:	045b      	lsls	r3, r3, #17
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d301      	bcc.n	80055a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055a4:	2301      	movs	r3, #1
 80055a6:	e010      	b.n	80055ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055a8:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <SysTick_Config+0x44>)
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	3a01      	subs	r2, #1
 80055ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055b0:	2301      	movs	r3, #1
 80055b2:	425b      	negs	r3, r3
 80055b4:	2103      	movs	r1, #3
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7ff ff7c 	bl	80054b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <SysTick_Config+0x44>)
 80055be:	2200      	movs	r2, #0
 80055c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055c2:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <SysTick_Config+0x44>)
 80055c4:	2207      	movs	r2, #7
 80055c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	e000e010 	.word	0xe000e010

080055d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	210f      	movs	r1, #15
 80055e4:	187b      	adds	r3, r7, r1
 80055e6:	1c02      	adds	r2, r0, #0
 80055e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b25b      	sxtb	r3, r3
 80055f2:	0011      	movs	r1, r2
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7ff ff5d 	bl	80054b4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b004      	add	sp, #16
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	0018      	movs	r0, r3
 800560e:	f7ff ffbf 	bl	8005590 <SysTick_Config>
 8005612:	0003      	movs	r3, r0
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b002      	add	sp, #8
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800562a:	e155      	b.n	80058d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2101      	movs	r1, #1
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4091      	lsls	r1, r2
 8005636:	000a      	movs	r2, r1
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d100      	bne.n	8005644 <HAL_GPIO_Init+0x28>
 8005642:	e146      	b.n	80058d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2203      	movs	r2, #3
 800564a:	4013      	ands	r3, r2
 800564c:	2b01      	cmp	r3, #1
 800564e:	d005      	beq.n	800565c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2203      	movs	r2, #3
 8005656:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005658:	2b02      	cmp	r3, #2
 800565a:	d130      	bne.n	80056be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	409a      	lsls	r2, r3
 800566a:	0013      	movs	r3, r2
 800566c:	43da      	mvns	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4013      	ands	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	409a      	lsls	r2, r3
 800567e:	0013      	movs	r3, r2
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005692:	2201      	movs	r2, #1
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	409a      	lsls	r2, r3
 8005698:	0013      	movs	r3, r2
 800569a:	43da      	mvns	r2, r3
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4013      	ands	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	2201      	movs	r2, #1
 80056aa:	401a      	ands	r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	409a      	lsls	r2, r3
 80056b0:	0013      	movs	r3, r2
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2203      	movs	r2, #3
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d017      	beq.n	80056fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	2203      	movs	r2, #3
 80056d6:	409a      	lsls	r2, r3
 80056d8:	0013      	movs	r3, r2
 80056da:	43da      	mvns	r2, r3
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4013      	ands	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	409a      	lsls	r2, r3
 80056ec:	0013      	movs	r3, r2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2203      	movs	r2, #3
 8005700:	4013      	ands	r3, r2
 8005702:	2b02      	cmp	r3, #2
 8005704:	d123      	bne.n	800574e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	08da      	lsrs	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3208      	adds	r2, #8
 800570e:	0092      	lsls	r2, r2, #2
 8005710:	58d3      	ldr	r3, [r2, r3]
 8005712:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2207      	movs	r2, #7
 8005718:	4013      	ands	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	220f      	movs	r2, #15
 800571e:	409a      	lsls	r2, r3
 8005720:	0013      	movs	r3, r2
 8005722:	43da      	mvns	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4013      	ands	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2107      	movs	r1, #7
 8005732:	400b      	ands	r3, r1
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	409a      	lsls	r2, r3
 8005738:	0013      	movs	r3, r2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	08da      	lsrs	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3208      	adds	r2, #8
 8005748:	0092      	lsls	r2, r2, #2
 800574a:	6939      	ldr	r1, [r7, #16]
 800574c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	2203      	movs	r2, #3
 800575a:	409a      	lsls	r2, r3
 800575c:	0013      	movs	r3, r2
 800575e:	43da      	mvns	r2, r3
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2203      	movs	r2, #3
 800576c:	401a      	ands	r2, r3
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	409a      	lsls	r2, r3
 8005774:	0013      	movs	r3, r2
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	23c0      	movs	r3, #192	@ 0xc0
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	4013      	ands	r3, r2
 800578c:	d100      	bne.n	8005790 <HAL_GPIO_Init+0x174>
 800578e:	e0a0      	b.n	80058d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005790:	4b57      	ldr	r3, [pc, #348]	@ (80058f0 <HAL_GPIO_Init+0x2d4>)
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	4b56      	ldr	r3, [pc, #344]	@ (80058f0 <HAL_GPIO_Init+0x2d4>)
 8005796:	2101      	movs	r1, #1
 8005798:	430a      	orrs	r2, r1
 800579a:	619a      	str	r2, [r3, #24]
 800579c:	4b54      	ldr	r3, [pc, #336]	@ (80058f0 <HAL_GPIO_Init+0x2d4>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2201      	movs	r2, #1
 80057a2:	4013      	ands	r3, r2
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80057a8:	4a52      	ldr	r2, [pc, #328]	@ (80058f4 <HAL_GPIO_Init+0x2d8>)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	089b      	lsrs	r3, r3, #2
 80057ae:	3302      	adds	r3, #2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	589b      	ldr	r3, [r3, r2]
 80057b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2203      	movs	r2, #3
 80057ba:	4013      	ands	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	220f      	movs	r2, #15
 80057c0:	409a      	lsls	r2, r3
 80057c2:	0013      	movs	r3, r2
 80057c4:	43da      	mvns	r2, r3
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	2390      	movs	r3, #144	@ 0x90
 80057d0:	05db      	lsls	r3, r3, #23
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d019      	beq.n	800580a <HAL_GPIO_Init+0x1ee>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a47      	ldr	r2, [pc, #284]	@ (80058f8 <HAL_GPIO_Init+0x2dc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <HAL_GPIO_Init+0x1ea>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a46      	ldr	r2, [pc, #280]	@ (80058fc <HAL_GPIO_Init+0x2e0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00d      	beq.n	8005802 <HAL_GPIO_Init+0x1e6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a45      	ldr	r2, [pc, #276]	@ (8005900 <HAL_GPIO_Init+0x2e4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <HAL_GPIO_Init+0x1e2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a44      	ldr	r2, [pc, #272]	@ (8005904 <HAL_GPIO_Init+0x2e8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d101      	bne.n	80057fa <HAL_GPIO_Init+0x1de>
 80057f6:	2304      	movs	r3, #4
 80057f8:	e008      	b.n	800580c <HAL_GPIO_Init+0x1f0>
 80057fa:	2305      	movs	r3, #5
 80057fc:	e006      	b.n	800580c <HAL_GPIO_Init+0x1f0>
 80057fe:	2303      	movs	r3, #3
 8005800:	e004      	b.n	800580c <HAL_GPIO_Init+0x1f0>
 8005802:	2302      	movs	r3, #2
 8005804:	e002      	b.n	800580c <HAL_GPIO_Init+0x1f0>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <HAL_GPIO_Init+0x1f0>
 800580a:	2300      	movs	r3, #0
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	2103      	movs	r1, #3
 8005810:	400a      	ands	r2, r1
 8005812:	0092      	lsls	r2, r2, #2
 8005814:	4093      	lsls	r3, r2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800581c:	4935      	ldr	r1, [pc, #212]	@ (80058f4 <HAL_GPIO_Init+0x2d8>)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	089b      	lsrs	r3, r3, #2
 8005822:	3302      	adds	r3, #2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800582a:	4b37      	ldr	r3, [pc, #220]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	43da      	mvns	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	2380      	movs	r3, #128	@ 0x80
 8005840:	035b      	lsls	r3, r3, #13
 8005842:	4013      	ands	r3, r2
 8005844:	d003      	beq.n	800584e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800584e:	4b2e      	ldr	r3, [pc, #184]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005854:	4b2c      	ldr	r3, [pc, #176]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	43da      	mvns	r2, r3
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4013      	ands	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	2380      	movs	r3, #128	@ 0x80
 800586a:	039b      	lsls	r3, r3, #14
 800586c:	4013      	ands	r3, r2
 800586e:	d003      	beq.n	8005878 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005878:	4b23      	ldr	r3, [pc, #140]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800587e:	4b22      	ldr	r3, [pc, #136]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	43da      	mvns	r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4013      	ands	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	2380      	movs	r3, #128	@ 0x80
 8005894:	029b      	lsls	r3, r3, #10
 8005896:	4013      	ands	r3, r2
 8005898:	d003      	beq.n	80058a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80058a2:	4b19      	ldr	r3, [pc, #100]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80058a8:	4b17      	ldr	r3, [pc, #92]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	43da      	mvns	r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4013      	ands	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	2380      	movs	r3, #128	@ 0x80
 80058be:	025b      	lsls	r3, r3, #9
 80058c0:	4013      	ands	r3, r2
 80058c2:	d003      	beq.n	80058cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80058cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	3301      	adds	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	40da      	lsrs	r2, r3
 80058e0:	1e13      	subs	r3, r2, #0
 80058e2:	d000      	beq.n	80058e6 <HAL_GPIO_Init+0x2ca>
 80058e4:	e6a2      	b.n	800562c <HAL_GPIO_Init+0x10>
  } 
}
 80058e6:	46c0      	nop			@ (mov r8, r8)
 80058e8:	46c0      	nop			@ (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b006      	add	sp, #24
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40010000 	.word	0x40010000
 80058f8:	48000400 	.word	0x48000400
 80058fc:	48000800 	.word	0x48000800
 8005900:	48000c00 	.word	0x48000c00
 8005904:	48001000 	.word	0x48001000
 8005908:	40010400 	.word	0x40010400

0800590c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800591a:	e0b7      	b.n	8005a8c <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800591c:	2201      	movs	r2, #1
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	409a      	lsls	r2, r3
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	4013      	ands	r3, r2
 8005926:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d100      	bne.n	8005930 <HAL_GPIO_DeInit+0x24>
 800592e:	e0aa      	b.n	8005a86 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005930:	4a5c      	ldr	r2, [pc, #368]	@ (8005aa4 <HAL_GPIO_DeInit+0x198>)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	089b      	lsrs	r3, r3, #2
 8005936:	3302      	adds	r3, #2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	589b      	ldr	r3, [r3, r2]
 800593c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2203      	movs	r2, #3
 8005942:	4013      	ands	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	220f      	movs	r2, #15
 8005948:	409a      	lsls	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4013      	ands	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	2390      	movs	r3, #144	@ 0x90
 8005954:	05db      	lsls	r3, r3, #23
 8005956:	429a      	cmp	r2, r3
 8005958:	d019      	beq.n	800598e <HAL_GPIO_DeInit+0x82>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a52      	ldr	r2, [pc, #328]	@ (8005aa8 <HAL_GPIO_DeInit+0x19c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_GPIO_DeInit+0x7e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a51      	ldr	r2, [pc, #324]	@ (8005aac <HAL_GPIO_DeInit+0x1a0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00d      	beq.n	8005986 <HAL_GPIO_DeInit+0x7a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a50      	ldr	r2, [pc, #320]	@ (8005ab0 <HAL_GPIO_DeInit+0x1a4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <HAL_GPIO_DeInit+0x76>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a4f      	ldr	r2, [pc, #316]	@ (8005ab4 <HAL_GPIO_DeInit+0x1a8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d101      	bne.n	800597e <HAL_GPIO_DeInit+0x72>
 800597a:	2304      	movs	r3, #4
 800597c:	e008      	b.n	8005990 <HAL_GPIO_DeInit+0x84>
 800597e:	2305      	movs	r3, #5
 8005980:	e006      	b.n	8005990 <HAL_GPIO_DeInit+0x84>
 8005982:	2303      	movs	r3, #3
 8005984:	e004      	b.n	8005990 <HAL_GPIO_DeInit+0x84>
 8005986:	2302      	movs	r3, #2
 8005988:	e002      	b.n	8005990 <HAL_GPIO_DeInit+0x84>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_GPIO_DeInit+0x84>
 800598e:	2300      	movs	r3, #0
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	2103      	movs	r1, #3
 8005994:	400a      	ands	r2, r1
 8005996:	0092      	lsls	r2, r2, #2
 8005998:	4093      	lsls	r3, r2
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	429a      	cmp	r2, r3
 800599e:	d132      	bne.n	8005a06 <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80059a0:	4b45      	ldr	r3, [pc, #276]	@ (8005ab8 <HAL_GPIO_DeInit+0x1ac>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	43d9      	mvns	r1, r3
 80059a8:	4b43      	ldr	r3, [pc, #268]	@ (8005ab8 <HAL_GPIO_DeInit+0x1ac>)
 80059aa:	400a      	ands	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80059ae:	4b42      	ldr	r3, [pc, #264]	@ (8005ab8 <HAL_GPIO_DeInit+0x1ac>)
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43d9      	mvns	r1, r3
 80059b6:	4b40      	ldr	r3, [pc, #256]	@ (8005ab8 <HAL_GPIO_DeInit+0x1ac>)
 80059b8:	400a      	ands	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80059bc:	4b3e      	ldr	r3, [pc, #248]	@ (8005ab8 <HAL_GPIO_DeInit+0x1ac>)
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	43d9      	mvns	r1, r3
 80059c4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ab8 <HAL_GPIO_DeInit+0x1ac>)
 80059c6:	400a      	ands	r2, r1
 80059c8:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80059ca:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab8 <HAL_GPIO_DeInit+0x1ac>)
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	43d9      	mvns	r1, r3
 80059d2:	4b39      	ldr	r3, [pc, #228]	@ (8005ab8 <HAL_GPIO_DeInit+0x1ac>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2203      	movs	r2, #3
 80059dc:	4013      	ands	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	220f      	movs	r2, #15
 80059e2:	409a      	lsls	r2, r3
 80059e4:	0013      	movs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80059e8:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa4 <HAL_GPIO_DeInit+0x198>)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	3302      	adds	r3, #2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	589a      	ldr	r2, [r3, r2]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	43d9      	mvns	r1, r3
 80059f8:	482a      	ldr	r0, [pc, #168]	@ (8005aa4 <HAL_GPIO_DeInit+0x198>)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	089b      	lsrs	r3, r3, #2
 80059fe:	400a      	ands	r2, r1
 8005a00:	3302      	adds	r3, #2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	0052      	lsls	r2, r2, #1
 8005a0e:	2103      	movs	r1, #3
 8005a10:	4091      	lsls	r1, r2
 8005a12:	000a      	movs	r2, r1
 8005a14:	43d2      	mvns	r2, r2
 8005a16:	401a      	ands	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	08da      	lsrs	r2, r3, #3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3208      	adds	r2, #8
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	58d3      	ldr	r3, [r2, r3]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	2107      	movs	r1, #7
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	0092      	lsls	r2, r2, #2
 8005a30:	210f      	movs	r1, #15
 8005a32:	4091      	lsls	r1, r2
 8005a34:	000a      	movs	r2, r1
 8005a36:	43d1      	mvns	r1, r2
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	08d2      	lsrs	r2, r2, #3
 8005a3c:	4019      	ands	r1, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3208      	adds	r2, #8
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	0052      	lsls	r2, r2, #1
 8005a4e:	2103      	movs	r1, #3
 8005a50:	4091      	lsls	r1, r2
 8005a52:	000a      	movs	r2, r1
 8005a54:	43d2      	mvns	r2, r2
 8005a56:	401a      	ands	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2101      	movs	r1, #1
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4091      	lsls	r1, r2
 8005a66:	000a      	movs	r2, r1
 8005a68:	43d2      	mvns	r2, r2
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	0052      	lsls	r2, r2, #1
 8005a78:	2103      	movs	r1, #3
 8005a7a:	4091      	lsls	r1, r2
 8005a7c:	000a      	movs	r2, r1
 8005a7e:	43d2      	mvns	r2, r2
 8005a80:	401a      	ands	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]

    }

    position++;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	40da      	lsrs	r2, r3
 8005a92:	1e13      	subs	r3, r2, #0
 8005a94:	d000      	beq.n	8005a98 <HAL_GPIO_DeInit+0x18c>
 8005a96:	e741      	b.n	800591c <HAL_GPIO_DeInit+0x10>
  }
}
 8005a98:	46c0      	nop			@ (mov r8, r8)
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b006      	add	sp, #24
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	48000400 	.word	0x48000400
 8005aac:	48000800 	.word	0x48000800
 8005ab0:	48000c00 	.word	0x48000c00
 8005ab4:	48001000 	.word	0x48001000
 8005ab8:	40010400 	.word	0x40010400

08005abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	0008      	movs	r0, r1
 8005ac6:	0011      	movs	r1, r2
 8005ac8:	1cbb      	adds	r3, r7, #2
 8005aca:	1c02      	adds	r2, r0, #0
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	1c7b      	adds	r3, r7, #1
 8005ad0:	1c0a      	adds	r2, r1, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ad4:	1c7b      	adds	r3, r7, #1
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005adc:	1cbb      	adds	r3, r7, #2
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ae4:	e003      	b.n	8005aee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ae6:	1cbb      	adds	r3, r7, #2
 8005ae8:	881a      	ldrh	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005aee:	46c0      	nop			@ (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b002      	add	sp, #8
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e08f      	b.n	8005c2a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2241      	movs	r2, #65	@ 0x41
 8005b0e:	5c9b      	ldrb	r3, [r3, r2]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d107      	bne.n	8005b26 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2240      	movs	r2, #64	@ 0x40
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f7ff fa17 	bl	8004f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2241      	movs	r2, #65	@ 0x41
 8005b2a:	2124      	movs	r1, #36	@ 0x24
 8005b2c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2101      	movs	r1, #1
 8005b3a:	438a      	bics	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	493b      	ldr	r1, [pc, #236]	@ (8005c34 <HAL_I2C_Init+0x13c>)
 8005b48:	400a      	ands	r2, r1
 8005b4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4938      	ldr	r1, [pc, #224]	@ (8005c38 <HAL_I2C_Init+0x140>)
 8005b58:	400a      	ands	r2, r1
 8005b5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d108      	bne.n	8005b76 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2180      	movs	r1, #128	@ 0x80
 8005b6e:	0209      	lsls	r1, r1, #8
 8005b70:	430a      	orrs	r2, r1
 8005b72:	609a      	str	r2, [r3, #8]
 8005b74:	e007      	b.n	8005b86 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2184      	movs	r1, #132	@ 0x84
 8005b80:	0209      	lsls	r1, r1, #8
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d109      	bne.n	8005ba2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2180      	movs	r1, #128	@ 0x80
 8005b9a:	0109      	lsls	r1, r1, #4
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	e007      	b.n	8005bb2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4923      	ldr	r1, [pc, #140]	@ (8005c3c <HAL_I2C_Init+0x144>)
 8005bae:	400a      	ands	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4920      	ldr	r1, [pc, #128]	@ (8005c40 <HAL_I2C_Init+0x148>)
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	491a      	ldr	r1, [pc, #104]	@ (8005c38 <HAL_I2C_Init+0x140>)
 8005bce:	400a      	ands	r2, r1
 8005bd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691a      	ldr	r2, [r3, #16]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	69d9      	ldr	r1, [r3, #28]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2101      	movs	r1, #1
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2241      	movs	r2, #65	@ 0x41
 8005c16:	2120      	movs	r1, #32
 8005c18:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2242      	movs	r2, #66	@ 0x42
 8005c24:	2100      	movs	r1, #0
 8005c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b002      	add	sp, #8
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	f0ffffff 	.word	0xf0ffffff
 8005c38:	ffff7fff 	.word	0xffff7fff
 8005c3c:	fffff7ff 	.word	0xfffff7ff
 8005c40:	02008000 	.word	0x02008000

08005c44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e022      	b.n	8005c9c <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2241      	movs	r2, #65	@ 0x41
 8005c5a:	2124      	movs	r1, #36	@ 0x24
 8005c5c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2101      	movs	r1, #1
 8005c6a:	438a      	bics	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	0018      	movs	r0, r3
 8005c72:	f7ff f9f9 	bl	8005068 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2241      	movs	r2, #65	@ 0x41
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2242      	movs	r2, #66	@ 0x42
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2240      	movs	r2, #64	@ 0x40
 8005c96:	2100      	movs	r1, #0
 8005c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b002      	add	sp, #8
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b089      	sub	sp, #36	@ 0x24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	000c      	movs	r4, r1
 8005cae:	0010      	movs	r0, r2
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	230a      	movs	r3, #10
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	1c22      	adds	r2, r4, #0
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	2308      	movs	r3, #8
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	1c02      	adds	r2, r0, #0
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	1dbb      	adds	r3, r7, #6
 8005cc4:	1c0a      	adds	r2, r1, #0
 8005cc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2241      	movs	r2, #65	@ 0x41
 8005ccc:	5c9b      	ldrb	r3, [r3, r2]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d000      	beq.n	8005cd6 <HAL_I2C_Mem_Write+0x32>
 8005cd4:	e10c      	b.n	8005ef0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <HAL_I2C_Mem_Write+0x42>
 8005cdc:	232c      	movs	r3, #44	@ 0x2c
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2280      	movs	r2, #128	@ 0x80
 8005cea:	0092      	lsls	r2, r2, #2
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e0ff      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2240      	movs	r2, #64	@ 0x40
 8005cf6:	5c9b      	ldrb	r3, [r3, r2]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_I2C_Mem_Write+0x5c>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e0f8      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x24e>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2240      	movs	r2, #64	@ 0x40
 8005d04:	2101      	movs	r1, #1
 8005d06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d08:	f7ff fba6 	bl	8005458 <HAL_GetTick>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d10:	2380      	movs	r3, #128	@ 0x80
 8005d12:	0219      	lsls	r1, r3, #8
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2319      	movs	r3, #25
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f000 fb0b 	bl	8006338 <I2C_WaitOnFlagUntilTimeout>
 8005d22:	1e03      	subs	r3, r0, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e0e3      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2241      	movs	r2, #65	@ 0x41
 8005d2e:	2121      	movs	r1, #33	@ 0x21
 8005d30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2242      	movs	r2, #66	@ 0x42
 8005d36:	2140      	movs	r1, #64	@ 0x40
 8005d38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	222c      	movs	r2, #44	@ 0x2c
 8005d4a:	18ba      	adds	r2, r7, r2
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d56:	1dbb      	adds	r3, r7, #6
 8005d58:	881c      	ldrh	r4, [r3, #0]
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	18fb      	adds	r3, r7, r3
 8005d5e:	881a      	ldrh	r2, [r3, #0]
 8005d60:	230a      	movs	r3, #10
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	8819      	ldrh	r1, [r3, #0]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	0023      	movs	r3, r4
 8005d72:	f000 f9f9 	bl	8006168 <I2C_RequestMemoryWrite>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2240      	movs	r2, #64	@ 0x40
 8005d7e:	2100      	movs	r1, #0
 8005d80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0b5      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2bff      	cmp	r3, #255	@ 0xff
 8005d8e:	d911      	bls.n	8005db4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	22ff      	movs	r2, #255	@ 0xff
 8005d94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	2380      	movs	r3, #128	@ 0x80
 8005d9e:	045c      	lsls	r4, r3, #17
 8005da0:	230a      	movs	r3, #10
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	8819      	ldrh	r1, [r3, #0]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	2300      	movs	r3, #0
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	0023      	movs	r3, r4
 8005dae:	f000 fc9d 	bl	80066ec <I2C_TransferConfig>
 8005db2:	e012      	b.n	8005dda <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	2380      	movs	r3, #128	@ 0x80
 8005dc6:	049c      	lsls	r4, r3, #18
 8005dc8:	230a      	movs	r3, #10
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	8819      	ldrh	r1, [r3, #0]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	0023      	movs	r3, r4
 8005dd6:	f000 fc89 	bl	80066ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f000 fb01 	bl	80063e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005de6:	1e03      	subs	r3, r0, #0
 8005de8:	d001      	beq.n	8005dee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e081      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	781a      	ldrb	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d03a      	beq.n	8005e9e <HAL_I2C_Mem_Write+0x1fa>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d136      	bne.n	8005e9e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	0013      	movs	r3, r2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2180      	movs	r1, #128	@ 0x80
 8005e3e:	f000 fa7b 	bl	8006338 <I2C_WaitOnFlagUntilTimeout>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e053      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2bff      	cmp	r3, #255	@ 0xff
 8005e52:	d911      	bls.n	8005e78 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	22ff      	movs	r2, #255	@ 0xff
 8005e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	2380      	movs	r3, #128	@ 0x80
 8005e62:	045c      	lsls	r4, r3, #17
 8005e64:	230a      	movs	r3, #10
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	8819      	ldrh	r1, [r3, #0]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	0023      	movs	r3, r4
 8005e72:	f000 fc3b 	bl	80066ec <I2C_TransferConfig>
 8005e76:	e012      	b.n	8005e9e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	049c      	lsls	r4, r3, #18
 8005e8c:	230a      	movs	r3, #10
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	8819      	ldrh	r1, [r3, #0]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	2300      	movs	r3, #0
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	0023      	movs	r3, r4
 8005e9a:	f000 fc27 	bl	80066ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d198      	bne.n	8005dda <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 fae0 	bl	8006474 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eb4:	1e03      	subs	r3, r0, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e01a      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	490b      	ldr	r1, [pc, #44]	@ (8005efc <HAL_I2C_Mem_Write+0x258>)
 8005ed0:	400a      	ands	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2241      	movs	r2, #65	@ 0x41
 8005ed8:	2120      	movs	r1, #32
 8005eda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2242      	movs	r2, #66	@ 0x42
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2240      	movs	r2, #64	@ 0x40
 8005ee8:	2100      	movs	r1, #0
 8005eea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b007      	add	sp, #28
 8005ef8:	bd90      	pop	{r4, r7, pc}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	fe00e800 	.word	0xfe00e800

08005f00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f00:	b590      	push	{r4, r7, lr}
 8005f02:	b089      	sub	sp, #36	@ 0x24
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	000c      	movs	r4, r1
 8005f0a:	0010      	movs	r0, r2
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	230a      	movs	r3, #10
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	1c22      	adds	r2, r4, #0
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	2308      	movs	r3, #8
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	1c02      	adds	r2, r0, #0
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	1dbb      	adds	r3, r7, #6
 8005f20:	1c0a      	adds	r2, r1, #0
 8005f22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2241      	movs	r2, #65	@ 0x41
 8005f28:	5c9b      	ldrb	r3, [r3, r2]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d000      	beq.n	8005f32 <HAL_I2C_Mem_Read+0x32>
 8005f30:	e110      	b.n	8006154 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <HAL_I2C_Mem_Read+0x42>
 8005f38:	232c      	movs	r3, #44	@ 0x2c
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d105      	bne.n	8005f4e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2280      	movs	r2, #128	@ 0x80
 8005f46:	0092      	lsls	r2, r2, #2
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e103      	b.n	8006156 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2240      	movs	r2, #64	@ 0x40
 8005f52:	5c9b      	ldrb	r3, [r3, r2]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_I2C_Mem_Read+0x5c>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e0fc      	b.n	8006156 <HAL_I2C_Mem_Read+0x256>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2240      	movs	r2, #64	@ 0x40
 8005f60:	2101      	movs	r1, #1
 8005f62:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f64:	f7ff fa78 	bl	8005458 <HAL_GetTick>
 8005f68:	0003      	movs	r3, r0
 8005f6a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f6c:	2380      	movs	r3, #128	@ 0x80
 8005f6e:	0219      	lsls	r1, r3, #8
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	2319      	movs	r3, #25
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f000 f9dd 	bl	8006338 <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	1e03      	subs	r3, r0, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e0e7      	b.n	8006156 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2241      	movs	r2, #65	@ 0x41
 8005f8a:	2122      	movs	r1, #34	@ 0x22
 8005f8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2242      	movs	r2, #66	@ 0x42
 8005f92:	2140      	movs	r1, #64	@ 0x40
 8005f94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	222c      	movs	r2, #44	@ 0x2c
 8005fa6:	18ba      	adds	r2, r7, r2
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fb2:	1dbb      	adds	r3, r7, #6
 8005fb4:	881c      	ldrh	r4, [r3, #0]
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	230a      	movs	r3, #10
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	8819      	ldrh	r1, [r3, #0]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	0023      	movs	r3, r4
 8005fce:	f000 f92f 	bl	8006230 <I2C_RequestMemoryRead>
 8005fd2:	1e03      	subs	r3, r0, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2240      	movs	r2, #64	@ 0x40
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e0b9      	b.n	8006156 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2bff      	cmp	r3, #255	@ 0xff
 8005fea:	d911      	bls.n	8006010 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	045c      	lsls	r4, r3, #17
 8005ffc:	230a      	movs	r3, #10
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	8819      	ldrh	r1, [r3, #0]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	4b56      	ldr	r3, [pc, #344]	@ (8006160 <HAL_I2C_Mem_Read+0x260>)
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	0023      	movs	r3, r4
 800600a:	f000 fb6f 	bl	80066ec <I2C_TransferConfig>
 800600e:	e012      	b.n	8006036 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601e:	b2da      	uxtb	r2, r3
 8006020:	2380      	movs	r3, #128	@ 0x80
 8006022:	049c      	lsls	r4, r3, #18
 8006024:	230a      	movs	r3, #10
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	8819      	ldrh	r1, [r3, #0]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	4b4c      	ldr	r3, [pc, #304]	@ (8006160 <HAL_I2C_Mem_Read+0x260>)
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	0023      	movs	r3, r4
 8006032:	f000 fb5b 	bl	80066ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	0013      	movs	r3, r2
 8006040:	2200      	movs	r2, #0
 8006042:	2104      	movs	r1, #4
 8006044:	f000 f978 	bl	8006338 <I2C_WaitOnFlagUntilTimeout>
 8006048:	1e03      	subs	r3, r0, #0
 800604a:	d001      	beq.n	8006050 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e082      	b.n	8006156 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d03a      	beq.n	8006102 <HAL_I2C_Mem_Read+0x202>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006090:	2b00      	cmp	r3, #0
 8006092:	d136      	bne.n	8006102 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	0013      	movs	r3, r2
 800609e:	2200      	movs	r2, #0
 80060a0:	2180      	movs	r1, #128	@ 0x80
 80060a2:	f000 f949 	bl	8006338 <I2C_WaitOnFlagUntilTimeout>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e053      	b.n	8006156 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2bff      	cmp	r3, #255	@ 0xff
 80060b6:	d911      	bls.n	80060dc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	2380      	movs	r3, #128	@ 0x80
 80060c6:	045c      	lsls	r4, r3, #17
 80060c8:	230a      	movs	r3, #10
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	8819      	ldrh	r1, [r3, #0]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	2300      	movs	r3, #0
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	0023      	movs	r3, r4
 80060d6:	f000 fb09 	bl	80066ec <I2C_TransferConfig>
 80060da:	e012      	b.n	8006102 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	2380      	movs	r3, #128	@ 0x80
 80060ee:	049c      	lsls	r4, r3, #18
 80060f0:	230a      	movs	r3, #10
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	8819      	ldrh	r1, [r3, #0]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	0023      	movs	r3, r4
 80060fe:	f000 faf5 	bl	80066ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d194      	bne.n	8006036 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	0018      	movs	r0, r3
 8006114:	f000 f9ae 	bl	8006474 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006118:	1e03      	subs	r3, r0, #0
 800611a:	d001      	beq.n	8006120 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e01a      	b.n	8006156 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2220      	movs	r2, #32
 8006126:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	490c      	ldr	r1, [pc, #48]	@ (8006164 <HAL_I2C_Mem_Read+0x264>)
 8006134:	400a      	ands	r2, r1
 8006136:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2241      	movs	r2, #65	@ 0x41
 800613c:	2120      	movs	r1, #32
 800613e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2242      	movs	r2, #66	@ 0x42
 8006144:	2100      	movs	r1, #0
 8006146:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2240      	movs	r2, #64	@ 0x40
 800614c:	2100      	movs	r1, #0
 800614e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	e000      	b.n	8006156 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8006154:	2302      	movs	r3, #2
  }
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b007      	add	sp, #28
 800615c:	bd90      	pop	{r4, r7, pc}
 800615e:	46c0      	nop			@ (mov r8, r8)
 8006160:	80002400 	.word	0x80002400
 8006164:	fe00e800 	.word	0xfe00e800

08006168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006168:	b5b0      	push	{r4, r5, r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	000c      	movs	r4, r1
 8006172:	0010      	movs	r0, r2
 8006174:	0019      	movs	r1, r3
 8006176:	250a      	movs	r5, #10
 8006178:	197b      	adds	r3, r7, r5
 800617a:	1c22      	adds	r2, r4, #0
 800617c:	801a      	strh	r2, [r3, #0]
 800617e:	2308      	movs	r3, #8
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	1c02      	adds	r2, r0, #0
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	1dbb      	adds	r3, r7, #6
 8006188:	1c0a      	adds	r2, r1, #0
 800618a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800618c:	1dbb      	adds	r3, r7, #6
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	2380      	movs	r3, #128	@ 0x80
 8006194:	045c      	lsls	r4, r3, #17
 8006196:	197b      	adds	r3, r7, r5
 8006198:	8819      	ldrh	r1, [r3, #0]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	4b23      	ldr	r3, [pc, #140]	@ (800622c <I2C_RequestMemoryWrite+0xc4>)
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	0023      	movs	r3, r4
 80061a2:	f000 faa3 	bl	80066ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a8:	6a39      	ldr	r1, [r7, #32]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	0018      	movs	r0, r3
 80061ae:	f000 f91b 	bl	80063e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80061b2:	1e03      	subs	r3, r0, #0
 80061b4:	d001      	beq.n	80061ba <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e033      	b.n	8006222 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ba:	1dbb      	adds	r3, r7, #6
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d107      	bne.n	80061d2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061c2:	2308      	movs	r3, #8
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80061d0:	e019      	b.n	8006206 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061d2:	2308      	movs	r3, #8
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	0a1b      	lsrs	r3, r3, #8
 80061da:	b29b      	uxth	r3, r3
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e6:	6a39      	ldr	r1, [r7, #32]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 f8fc 	bl	80063e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d001      	beq.n	80061f8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e014      	b.n	8006222 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061f8:	2308      	movs	r3, #8
 80061fa:	18fb      	adds	r3, r7, r3
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	0013      	movs	r3, r2
 8006210:	2200      	movs	r2, #0
 8006212:	2180      	movs	r1, #128	@ 0x80
 8006214:	f000 f890 	bl	8006338 <I2C_WaitOnFlagUntilTimeout>
 8006218:	1e03      	subs	r3, r0, #0
 800621a:	d001      	beq.n	8006220 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b004      	add	sp, #16
 8006228:	bdb0      	pop	{r4, r5, r7, pc}
 800622a:	46c0      	nop			@ (mov r8, r8)
 800622c:	80002000 	.word	0x80002000

08006230 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006230:	b5b0      	push	{r4, r5, r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	000c      	movs	r4, r1
 800623a:	0010      	movs	r0, r2
 800623c:	0019      	movs	r1, r3
 800623e:	250a      	movs	r5, #10
 8006240:	197b      	adds	r3, r7, r5
 8006242:	1c22      	adds	r2, r4, #0
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	2308      	movs	r3, #8
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	1c02      	adds	r2, r0, #0
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	1dbb      	adds	r3, r7, #6
 8006250:	1c0a      	adds	r2, r1, #0
 8006252:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006254:	1dbb      	adds	r3, r7, #6
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	197b      	adds	r3, r7, r5
 800625c:	8819      	ldrh	r1, [r3, #0]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	4b23      	ldr	r3, [pc, #140]	@ (80062f0 <I2C_RequestMemoryRead+0xc0>)
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	2300      	movs	r3, #0
 8006266:	f000 fa41 	bl	80066ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800626a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626c:	6a39      	ldr	r1, [r7, #32]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	0018      	movs	r0, r3
 8006272:	f000 f8b9 	bl	80063e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006276:	1e03      	subs	r3, r0, #0
 8006278:	d001      	beq.n	800627e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e033      	b.n	80062e6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800627e:	1dbb      	adds	r3, r7, #6
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d107      	bne.n	8006296 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006286:	2308      	movs	r3, #8
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	629a      	str	r2, [r3, #40]	@ 0x28
 8006294:	e019      	b.n	80062ca <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006296:	2308      	movs	r3, #8
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	0a1b      	lsrs	r3, r3, #8
 800629e:	b29b      	uxth	r3, r3
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062aa:	6a39      	ldr	r1, [r7, #32]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 f89a 	bl	80063e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d001      	beq.n	80062bc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e014      	b.n	80062e6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062bc:	2308      	movs	r3, #8
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062ca:	6a3a      	ldr	r2, [r7, #32]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	0013      	movs	r3, r2
 80062d4:	2200      	movs	r2, #0
 80062d6:	2140      	movs	r1, #64	@ 0x40
 80062d8:	f000 f82e 	bl	8006338 <I2C_WaitOnFlagUntilTimeout>
 80062dc:	1e03      	subs	r3, r0, #0
 80062de:	d001      	beq.n	80062e4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	0018      	movs	r0, r3
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b004      	add	sp, #16
 80062ec:	bdb0      	pop	{r4, r5, r7, pc}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	80002000 	.word	0x80002000

080062f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2202      	movs	r2, #2
 8006304:	4013      	ands	r3, r2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d103      	bne.n	8006312 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2200      	movs	r2, #0
 8006310:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2201      	movs	r2, #1
 800631a:	4013      	ands	r3, r2
 800631c:	2b01      	cmp	r3, #1
 800631e:	d007      	beq.n	8006330 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2101      	movs	r1, #1
 800632c:	430a      	orrs	r2, r1
 800632e:	619a      	str	r2, [r3, #24]
  }
}
 8006330:	46c0      	nop			@ (mov r8, r8)
 8006332:	46bd      	mov	sp, r7
 8006334:	b002      	add	sp, #8
 8006336:	bd80      	pop	{r7, pc}

08006338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	1dfb      	adds	r3, r7, #7
 8006346:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006348:	e03a      	b.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f8d3 	bl	80064fc <I2C_IsErrorOccurred>
 8006356:	1e03      	subs	r3, r0, #0
 8006358:	d001      	beq.n	800635e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e040      	b.n	80063e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	d02d      	beq.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006364:	f7ff f878 	bl	8005458 <HAL_GetTick>
 8006368:	0002      	movs	r2, r0
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d302      	bcc.n	800637a <I2C_WaitOnFlagUntilTimeout+0x42>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d122      	bne.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	4013      	ands	r3, r2
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	425a      	negs	r2, r3
 800638a:	4153      	adcs	r3, r2
 800638c:	b2db      	uxtb	r3, r3
 800638e:	001a      	movs	r2, r3
 8006390:	1dfb      	adds	r3, r7, #7
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d113      	bne.n	80063c0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639c:	2220      	movs	r2, #32
 800639e:	431a      	orrs	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2241      	movs	r2, #65	@ 0x41
 80063a8:	2120      	movs	r1, #32
 80063aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2242      	movs	r2, #66	@ 0x42
 80063b0:	2100      	movs	r1, #0
 80063b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2240      	movs	r2, #64	@ 0x40
 80063b8:	2100      	movs	r1, #0
 80063ba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e00f      	b.n	80063e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	425a      	negs	r2, r3
 80063d0:	4153      	adcs	r3, r2
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	001a      	movs	r2, r3
 80063d6:	1dfb      	adds	r3, r7, #7
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d0b5      	beq.n	800634a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	0018      	movs	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b004      	add	sp, #16
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063f4:	e032      	b.n	800645c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 f87d 	bl	80064fc <I2C_IsErrorOccurred>
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d001      	beq.n	800640a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e030      	b.n	800646c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	3301      	adds	r3, #1
 800640e:	d025      	beq.n	800645c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006410:	f7ff f822 	bl	8005458 <HAL_GetTick>
 8006414:	0002      	movs	r2, r0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	d302      	bcc.n	8006426 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d11a      	bne.n	800645c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	2202      	movs	r2, #2
 800642e:	4013      	ands	r3, r2
 8006430:	2b02      	cmp	r3, #2
 8006432:	d013      	beq.n	800645c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006438:	2220      	movs	r2, #32
 800643a:	431a      	orrs	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2241      	movs	r2, #65	@ 0x41
 8006444:	2120      	movs	r1, #32
 8006446:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2242      	movs	r2, #66	@ 0x42
 800644c:	2100      	movs	r1, #0
 800644e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2240      	movs	r2, #64	@ 0x40
 8006454:	2100      	movs	r1, #0
 8006456:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e007      	b.n	800646c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	2202      	movs	r2, #2
 8006464:	4013      	ands	r3, r2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d1c5      	bne.n	80063f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	0018      	movs	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	b004      	add	sp, #16
 8006472:	bd80      	pop	{r7, pc}

08006474 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006480:	e02f      	b.n	80064e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	0018      	movs	r0, r3
 800648a:	f000 f837 	bl	80064fc <I2C_IsErrorOccurred>
 800648e:	1e03      	subs	r3, r0, #0
 8006490:	d001      	beq.n	8006496 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e02d      	b.n	80064f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006496:	f7fe ffdf 	bl	8005458 <HAL_GetTick>
 800649a:	0002      	movs	r2, r0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d302      	bcc.n	80064ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d11a      	bne.n	80064e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2220      	movs	r2, #32
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d013      	beq.n	80064e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	2220      	movs	r2, #32
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2241      	movs	r2, #65	@ 0x41
 80064ca:	2120      	movs	r1, #32
 80064cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2242      	movs	r2, #66	@ 0x42
 80064d2:	2100      	movs	r1, #0
 80064d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2240      	movs	r2, #64	@ 0x40
 80064da:	2100      	movs	r1, #0
 80064dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e007      	b.n	80064f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2220      	movs	r2, #32
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d1c8      	bne.n	8006482 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	0018      	movs	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b004      	add	sp, #16
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	@ 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006508:	2327      	movs	r3, #39	@ 0x27
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2210      	movs	r2, #16
 8006524:	4013      	ands	r3, r2
 8006526:	d100      	bne.n	800652a <I2C_IsErrorOccurred+0x2e>
 8006528:	e079      	b.n	800661e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2210      	movs	r2, #16
 8006530:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006532:	e057      	b.n	80065e4 <I2C_IsErrorOccurred+0xe8>
 8006534:	2227      	movs	r2, #39	@ 0x27
 8006536:	18bb      	adds	r3, r7, r2
 8006538:	18ba      	adds	r2, r7, r2
 800653a:	7812      	ldrb	r2, [r2, #0]
 800653c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	3301      	adds	r3, #1
 8006542:	d04f      	beq.n	80065e4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006544:	f7fe ff88 	bl	8005458 <HAL_GetTick>
 8006548:	0002      	movs	r2, r0
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	429a      	cmp	r2, r3
 8006552:	d302      	bcc.n	800655a <I2C_IsErrorOccurred+0x5e>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d144      	bne.n	80065e4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	01db      	lsls	r3, r3, #7
 8006564:	4013      	ands	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006568:	2013      	movs	r0, #19
 800656a:	183b      	adds	r3, r7, r0
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	2142      	movs	r1, #66	@ 0x42
 8006570:	5c52      	ldrb	r2, [r2, r1]
 8006572:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	2380      	movs	r3, #128	@ 0x80
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	401a      	ands	r2, r3
 8006580:	2380      	movs	r3, #128	@ 0x80
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	429a      	cmp	r2, r3
 8006586:	d126      	bne.n	80065d6 <I2C_IsErrorOccurred+0xda>
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	2380      	movs	r3, #128	@ 0x80
 800658c:	01db      	lsls	r3, r3, #7
 800658e:	429a      	cmp	r2, r3
 8006590:	d021      	beq.n	80065d6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006592:	183b      	adds	r3, r7, r0
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b20      	cmp	r3, #32
 8006598:	d01d      	beq.n	80065d6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2180      	movs	r1, #128	@ 0x80
 80065a6:	01c9      	lsls	r1, r1, #7
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065ac:	f7fe ff54 	bl	8005458 <HAL_GetTick>
 80065b0:	0003      	movs	r3, r0
 80065b2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065b4:	e00f      	b.n	80065d6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065b6:	f7fe ff4f 	bl	8005458 <HAL_GetTick>
 80065ba:	0002      	movs	r2, r0
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b19      	cmp	r3, #25
 80065c2:	d908      	bls.n	80065d6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	2220      	movs	r2, #32
 80065c8:	4313      	orrs	r3, r2
 80065ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065cc:	2327      	movs	r3, #39	@ 0x27
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	2201      	movs	r2, #1
 80065d2:	701a      	strb	r2, [r3, #0]

              break;
 80065d4:	e006      	b.n	80065e4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2220      	movs	r2, #32
 80065de:	4013      	ands	r3, r2
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d1e8      	bne.n	80065b6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2220      	movs	r2, #32
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d004      	beq.n	80065fc <I2C_IsErrorOccurred+0x100>
 80065f2:	2327      	movs	r3, #39	@ 0x27
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d09b      	beq.n	8006534 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065fc:	2327      	movs	r3, #39	@ 0x27
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2220      	movs	r2, #32
 800660c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	2204      	movs	r2, #4
 8006612:	4313      	orrs	r3, r2
 8006614:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006616:	2327      	movs	r3, #39	@ 0x27
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	2201      	movs	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	2380      	movs	r3, #128	@ 0x80
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	4013      	ands	r3, r2
 800662e:	d00c      	beq.n	800664a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	2201      	movs	r2, #1
 8006634:	4313      	orrs	r3, r2
 8006636:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2280      	movs	r2, #128	@ 0x80
 800663e:	0052      	lsls	r2, r2, #1
 8006640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006642:	2327      	movs	r3, #39	@ 0x27
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	2201      	movs	r2, #1
 8006648:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	2380      	movs	r3, #128	@ 0x80
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4013      	ands	r3, r2
 8006652:	d00c      	beq.n	800666e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	2208      	movs	r2, #8
 8006658:	4313      	orrs	r3, r2
 800665a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2280      	movs	r2, #128	@ 0x80
 8006662:	00d2      	lsls	r2, r2, #3
 8006664:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006666:	2327      	movs	r3, #39	@ 0x27
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4013      	ands	r3, r2
 8006676:	d00c      	beq.n	8006692 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2202      	movs	r2, #2
 800667c:	4313      	orrs	r3, r2
 800667e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2280      	movs	r2, #128	@ 0x80
 8006686:	0092      	lsls	r2, r2, #2
 8006688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800668a:	2327      	movs	r3, #39	@ 0x27
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006692:	2327      	movs	r3, #39	@ 0x27
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01d      	beq.n	80066d8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	0018      	movs	r0, r3
 80066a0:	f7ff fe28 	bl	80062f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	490e      	ldr	r1, [pc, #56]	@ (80066e8 <I2C_IsErrorOccurred+0x1ec>)
 80066b0:	400a      	ands	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2241      	movs	r2, #65	@ 0x41
 80066c4:	2120      	movs	r1, #32
 80066c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2242      	movs	r2, #66	@ 0x42
 80066cc:	2100      	movs	r1, #0
 80066ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2240      	movs	r2, #64	@ 0x40
 80066d4:	2100      	movs	r1, #0
 80066d6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80066d8:	2327      	movs	r3, #39	@ 0x27
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	781b      	ldrb	r3, [r3, #0]
}
 80066de:	0018      	movs	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b00a      	add	sp, #40	@ 0x28
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	fe00e800 	.word	0xfe00e800

080066ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	0008      	movs	r0, r1
 80066f6:	0011      	movs	r1, r2
 80066f8:	607b      	str	r3, [r7, #4]
 80066fa:	240a      	movs	r4, #10
 80066fc:	193b      	adds	r3, r7, r4
 80066fe:	1c02      	adds	r2, r0, #0
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	2009      	movs	r0, #9
 8006704:	183b      	adds	r3, r7, r0
 8006706:	1c0a      	adds	r2, r1, #0
 8006708:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800670a:	193b      	adds	r3, r7, r4
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	059b      	lsls	r3, r3, #22
 8006710:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006712:	183b      	adds	r3, r7, r0
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	0419      	lsls	r1, r3, #16
 8006718:	23ff      	movs	r3, #255	@ 0xff
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800671e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	4313      	orrs	r3, r2
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006736:	0d51      	lsrs	r1, r2, #21
 8006738:	2280      	movs	r2, #128	@ 0x80
 800673a:	00d2      	lsls	r2, r2, #3
 800673c:	400a      	ands	r2, r1
 800673e:	4907      	ldr	r1, [pc, #28]	@ (800675c <I2C_TransferConfig+0x70>)
 8006740:	430a      	orrs	r2, r1
 8006742:	43d2      	mvns	r2, r2
 8006744:	401a      	ands	r2, r3
 8006746:	0011      	movs	r1, r2
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	46bd      	mov	sp, r7
 8006756:	b007      	add	sp, #28
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	46c0      	nop			@ (mov r8, r8)
 800675c:	03ff63ff 	.word	0x03ff63ff

08006760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2241      	movs	r2, #65	@ 0x41
 800676e:	5c9b      	ldrb	r3, [r3, r2]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b20      	cmp	r3, #32
 8006774:	d138      	bne.n	80067e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2240      	movs	r2, #64	@ 0x40
 800677a:	5c9b      	ldrb	r3, [r3, r2]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006780:	2302      	movs	r3, #2
 8006782:	e032      	b.n	80067ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2240      	movs	r2, #64	@ 0x40
 8006788:	2101      	movs	r1, #1
 800678a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2241      	movs	r2, #65	@ 0x41
 8006790:	2124      	movs	r1, #36	@ 0x24
 8006792:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2101      	movs	r1, #1
 80067a0:	438a      	bics	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4911      	ldr	r1, [pc, #68]	@ (80067f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80067b0:	400a      	ands	r2, r1
 80067b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6819      	ldr	r1, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2101      	movs	r1, #1
 80067d0:	430a      	orrs	r2, r1
 80067d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2241      	movs	r2, #65	@ 0x41
 80067d8:	2120      	movs	r1, #32
 80067da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2240      	movs	r2, #64	@ 0x40
 80067e0:	2100      	movs	r1, #0
 80067e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	e000      	b.n	80067ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067e8:	2302      	movs	r3, #2
  }
}
 80067ea:	0018      	movs	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b002      	add	sp, #8
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	ffffefff 	.word	0xffffefff

080067f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2241      	movs	r2, #65	@ 0x41
 8006806:	5c9b      	ldrb	r3, [r3, r2]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b20      	cmp	r3, #32
 800680c:	d139      	bne.n	8006882 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2240      	movs	r2, #64	@ 0x40
 8006812:	5c9b      	ldrb	r3, [r3, r2]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006818:	2302      	movs	r3, #2
 800681a:	e033      	b.n	8006884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2240      	movs	r2, #64	@ 0x40
 8006820:	2101      	movs	r1, #1
 8006822:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2241      	movs	r2, #65	@ 0x41
 8006828:	2124      	movs	r1, #36	@ 0x24
 800682a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2101      	movs	r1, #1
 8006838:	438a      	bics	r2, r1
 800683a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a11      	ldr	r2, [pc, #68]	@ (800688c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006848:	4013      	ands	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2101      	movs	r1, #1
 800686a:	430a      	orrs	r2, r1
 800686c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2241      	movs	r2, #65	@ 0x41
 8006872:	2120      	movs	r1, #32
 8006874:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2240      	movs	r2, #64	@ 0x40
 800687a:	2100      	movs	r1, #0
 800687c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	e000      	b.n	8006884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
  }
}
 8006884:	0018      	movs	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	b004      	add	sp, #16
 800688a:	bd80      	pop	{r7, pc}
 800688c:	fffff0ff 	.word	0xfffff0ff

08006890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f000 fb76 	bl	8006f90 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2201      	movs	r2, #1
 80068aa:	4013      	ands	r3, r2
 80068ac:	d100      	bne.n	80068b0 <HAL_RCC_OscConfig+0x20>
 80068ae:	e08e      	b.n	80069ce <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80068b0:	4bc5      	ldr	r3, [pc, #788]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	220c      	movs	r2, #12
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d00e      	beq.n	80068da <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068bc:	4bc2      	ldr	r3, [pc, #776]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	220c      	movs	r2, #12
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d117      	bne.n	80068f8 <HAL_RCC_OscConfig+0x68>
 80068c8:	4bbf      	ldr	r3, [pc, #764]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	23c0      	movs	r3, #192	@ 0xc0
 80068ce:	025b      	lsls	r3, r3, #9
 80068d0:	401a      	ands	r2, r3
 80068d2:	2380      	movs	r3, #128	@ 0x80
 80068d4:	025b      	lsls	r3, r3, #9
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d10e      	bne.n	80068f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068da:	4bbb      	ldr	r3, [pc, #748]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	2380      	movs	r3, #128	@ 0x80
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	4013      	ands	r3, r2
 80068e4:	d100      	bne.n	80068e8 <HAL_RCC_OscConfig+0x58>
 80068e6:	e071      	b.n	80069cc <HAL_RCC_OscConfig+0x13c>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d000      	beq.n	80068f2 <HAL_RCC_OscConfig+0x62>
 80068f0:	e06c      	b.n	80069cc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f000 fb4c 	bl	8006f90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d107      	bne.n	8006910 <HAL_RCC_OscConfig+0x80>
 8006900:	4bb1      	ldr	r3, [pc, #708]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4bb0      	ldr	r3, [pc, #704]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006906:	2180      	movs	r1, #128	@ 0x80
 8006908:	0249      	lsls	r1, r1, #9
 800690a:	430a      	orrs	r2, r1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e02f      	b.n	8006970 <HAL_RCC_OscConfig+0xe0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10c      	bne.n	8006932 <HAL_RCC_OscConfig+0xa2>
 8006918:	4bab      	ldr	r3, [pc, #684]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4baa      	ldr	r3, [pc, #680]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800691e:	49ab      	ldr	r1, [pc, #684]	@ (8006bcc <HAL_RCC_OscConfig+0x33c>)
 8006920:	400a      	ands	r2, r1
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	4ba8      	ldr	r3, [pc, #672]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4ba7      	ldr	r3, [pc, #668]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800692a:	49a9      	ldr	r1, [pc, #676]	@ (8006bd0 <HAL_RCC_OscConfig+0x340>)
 800692c:	400a      	ands	r2, r1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e01e      	b.n	8006970 <HAL_RCC_OscConfig+0xe0>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b05      	cmp	r3, #5
 8006938:	d10e      	bne.n	8006958 <HAL_RCC_OscConfig+0xc8>
 800693a:	4ba3      	ldr	r3, [pc, #652]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4ba2      	ldr	r3, [pc, #648]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006940:	2180      	movs	r1, #128	@ 0x80
 8006942:	02c9      	lsls	r1, r1, #11
 8006944:	430a      	orrs	r2, r1
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	4b9f      	ldr	r3, [pc, #636]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b9e      	ldr	r3, [pc, #632]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800694e:	2180      	movs	r1, #128	@ 0x80
 8006950:	0249      	lsls	r1, r1, #9
 8006952:	430a      	orrs	r2, r1
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	e00b      	b.n	8006970 <HAL_RCC_OscConfig+0xe0>
 8006958:	4b9b      	ldr	r3, [pc, #620]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	4b9a      	ldr	r3, [pc, #616]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800695e:	499b      	ldr	r1, [pc, #620]	@ (8006bcc <HAL_RCC_OscConfig+0x33c>)
 8006960:	400a      	ands	r2, r1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	4b98      	ldr	r3, [pc, #608]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b97      	ldr	r3, [pc, #604]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 800696a:	4999      	ldr	r1, [pc, #612]	@ (8006bd0 <HAL_RCC_OscConfig+0x340>)
 800696c:	400a      	ands	r2, r1
 800696e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d014      	beq.n	80069a2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006978:	f7fe fd6e 	bl	8005458 <HAL_GetTick>
 800697c:	0003      	movs	r3, r0
 800697e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006982:	f7fe fd69 	bl	8005458 <HAL_GetTick>
 8006986:	0002      	movs	r2, r0
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b64      	cmp	r3, #100	@ 0x64
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e2fd      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006994:	4b8c      	ldr	r3, [pc, #560]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	2380      	movs	r3, #128	@ 0x80
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	4013      	ands	r3, r2
 800699e:	d0f0      	beq.n	8006982 <HAL_RCC_OscConfig+0xf2>
 80069a0:	e015      	b.n	80069ce <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a2:	f7fe fd59 	bl	8005458 <HAL_GetTick>
 80069a6:	0003      	movs	r3, r0
 80069a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069ac:	f7fe fd54 	bl	8005458 <HAL_GetTick>
 80069b0:	0002      	movs	r2, r0
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b64      	cmp	r3, #100	@ 0x64
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e2e8      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069be:	4b82      	ldr	r3, [pc, #520]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	2380      	movs	r3, #128	@ 0x80
 80069c4:	029b      	lsls	r3, r3, #10
 80069c6:	4013      	ands	r3, r2
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x11c>
 80069ca:	e000      	b.n	80069ce <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069cc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2202      	movs	r2, #2
 80069d4:	4013      	ands	r3, r2
 80069d6:	d100      	bne.n	80069da <HAL_RCC_OscConfig+0x14a>
 80069d8:	e06c      	b.n	8006ab4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80069da:	4b7b      	ldr	r3, [pc, #492]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	220c      	movs	r2, #12
 80069e0:	4013      	ands	r3, r2
 80069e2:	d00e      	beq.n	8006a02 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80069e4:	4b78      	ldr	r3, [pc, #480]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	220c      	movs	r2, #12
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d11f      	bne.n	8006a30 <HAL_RCC_OscConfig+0x1a0>
 80069f0:	4b75      	ldr	r3, [pc, #468]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	23c0      	movs	r3, #192	@ 0xc0
 80069f6:	025b      	lsls	r3, r3, #9
 80069f8:	401a      	ands	r2, r3
 80069fa:	2380      	movs	r3, #128	@ 0x80
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d116      	bne.n	8006a30 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a02:	4b71      	ldr	r3, [pc, #452]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2202      	movs	r2, #2
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d005      	beq.n	8006a18 <HAL_RCC_OscConfig+0x188>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d001      	beq.n	8006a18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e2bb      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a18:	4b6b      	ldr	r3, [pc, #428]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	22f8      	movs	r2, #248	@ 0xf8
 8006a1e:	4393      	bics	r3, r2
 8006a20:	0019      	movs	r1, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	00da      	lsls	r2, r3, #3
 8006a28:	4b67      	ldr	r3, [pc, #412]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a2e:	e041      	b.n	8006ab4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d024      	beq.n	8006a82 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a38:	4b63      	ldr	r3, [pc, #396]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	4b62      	ldr	r3, [pc, #392]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a3e:	2101      	movs	r1, #1
 8006a40:	430a      	orrs	r2, r1
 8006a42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a44:	f7fe fd08 	bl	8005458 <HAL_GetTick>
 8006a48:	0003      	movs	r3, r0
 8006a4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a4e:	f7fe fd03 	bl	8005458 <HAL_GetTick>
 8006a52:	0002      	movs	r2, r0
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e297      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a60:	4b59      	ldr	r3, [pc, #356]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2202      	movs	r2, #2
 8006a66:	4013      	ands	r3, r2
 8006a68:	d0f1      	beq.n	8006a4e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a6a:	4b57      	ldr	r3, [pc, #348]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	22f8      	movs	r2, #248	@ 0xf8
 8006a70:	4393      	bics	r3, r2
 8006a72:	0019      	movs	r1, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	00da      	lsls	r2, r3, #3
 8006a7a:	4b53      	ldr	r3, [pc, #332]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e018      	b.n	8006ab4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a82:	4b51      	ldr	r3, [pc, #324]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4b50      	ldr	r3, [pc, #320]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006a88:	2101      	movs	r1, #1
 8006a8a:	438a      	bics	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8e:	f7fe fce3 	bl	8005458 <HAL_GetTick>
 8006a92:	0003      	movs	r3, r0
 8006a94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a98:	f7fe fcde 	bl	8005458 <HAL_GetTick>
 8006a9c:	0002      	movs	r2, r0
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e272      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aaa:	4b47      	ldr	r3, [pc, #284]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d1f1      	bne.n	8006a98 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2208      	movs	r2, #8
 8006aba:	4013      	ands	r3, r2
 8006abc:	d036      	beq.n	8006b2c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d019      	beq.n	8006afa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ac6:	4b40      	ldr	r3, [pc, #256]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006aca:	4b3f      	ldr	r3, [pc, #252]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006acc:	2101      	movs	r1, #1
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ad2:	f7fe fcc1 	bl	8005458 <HAL_GetTick>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006adc:	f7fe fcbc 	bl	8005458 <HAL_GetTick>
 8006ae0:	0002      	movs	r2, r0
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e250      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	4b36      	ldr	r3, [pc, #216]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	2202      	movs	r2, #2
 8006af4:	4013      	ands	r3, r2
 8006af6:	d0f1      	beq.n	8006adc <HAL_RCC_OscConfig+0x24c>
 8006af8:	e018      	b.n	8006b2c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006afa:	4b33      	ldr	r3, [pc, #204]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006afe:	4b32      	ldr	r3, [pc, #200]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006b00:	2101      	movs	r1, #1
 8006b02:	438a      	bics	r2, r1
 8006b04:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b06:	f7fe fca7 	bl	8005458 <HAL_GetTick>
 8006b0a:	0003      	movs	r3, r0
 8006b0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b10:	f7fe fca2 	bl	8005458 <HAL_GetTick>
 8006b14:	0002      	movs	r2, r0
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e236      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b22:	4b29      	ldr	r3, [pc, #164]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b26:	2202      	movs	r2, #2
 8006b28:	4013      	ands	r3, r2
 8006b2a:	d1f1      	bne.n	8006b10 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2204      	movs	r2, #4
 8006b32:	4013      	ands	r3, r2
 8006b34:	d100      	bne.n	8006b38 <HAL_RCC_OscConfig+0x2a8>
 8006b36:	e0b5      	b.n	8006ca4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b38:	201f      	movs	r0, #31
 8006b3a:	183b      	adds	r3, r7, r0
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b40:	4b21      	ldr	r3, [pc, #132]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	2380      	movs	r3, #128	@ 0x80
 8006b46:	055b      	lsls	r3, r3, #21
 8006b48:	4013      	ands	r3, r2
 8006b4a:	d110      	bne.n	8006b6e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006b52:	2180      	movs	r1, #128	@ 0x80
 8006b54:	0549      	lsls	r1, r1, #21
 8006b56:	430a      	orrs	r2, r1
 8006b58:	61da      	str	r2, [r3, #28]
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006b5c:	69da      	ldr	r2, [r3, #28]
 8006b5e:	2380      	movs	r3, #128	@ 0x80
 8006b60:	055b      	lsls	r3, r3, #21
 8006b62:	4013      	ands	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b68:	183b      	adds	r3, r7, r0
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6e:	4b19      	ldr	r3, [pc, #100]	@ (8006bd4 <HAL_RCC_OscConfig+0x344>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	2380      	movs	r3, #128	@ 0x80
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	4013      	ands	r3, r2
 8006b78:	d11a      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b7a:	4b16      	ldr	r3, [pc, #88]	@ (8006bd4 <HAL_RCC_OscConfig+0x344>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b15      	ldr	r3, [pc, #84]	@ (8006bd4 <HAL_RCC_OscConfig+0x344>)
 8006b80:	2180      	movs	r1, #128	@ 0x80
 8006b82:	0049      	lsls	r1, r1, #1
 8006b84:	430a      	orrs	r2, r1
 8006b86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b88:	f7fe fc66 	bl	8005458 <HAL_GetTick>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b90:	e008      	b.n	8006ba4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b92:	f7fe fc61 	bl	8005458 <HAL_GetTick>
 8006b96:	0002      	movs	r2, r0
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b64      	cmp	r3, #100	@ 0x64
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e1f5      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd4 <HAL_RCC_OscConfig+0x344>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	2380      	movs	r3, #128	@ 0x80
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4013      	ands	r3, r2
 8006bae:	d0f0      	beq.n	8006b92 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10f      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x348>
 8006bb8:	4b03      	ldr	r3, [pc, #12]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006bba:	6a1a      	ldr	r2, [r3, #32]
 8006bbc:	4b02      	ldr	r3, [pc, #8]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	621a      	str	r2, [r3, #32]
 8006bc4:	e036      	b.n	8006c34 <HAL_RCC_OscConfig+0x3a4>
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	fffeffff 	.word	0xfffeffff
 8006bd0:	fffbffff 	.word	0xfffbffff
 8006bd4:	40007000 	.word	0x40007000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <HAL_RCC_OscConfig+0x36a>
 8006be0:	4bca      	ldr	r3, [pc, #808]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006be2:	6a1a      	ldr	r2, [r3, #32]
 8006be4:	4bc9      	ldr	r3, [pc, #804]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006be6:	2101      	movs	r1, #1
 8006be8:	438a      	bics	r2, r1
 8006bea:	621a      	str	r2, [r3, #32]
 8006bec:	4bc7      	ldr	r3, [pc, #796]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006bee:	6a1a      	ldr	r2, [r3, #32]
 8006bf0:	4bc6      	ldr	r3, [pc, #792]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006bf2:	2104      	movs	r1, #4
 8006bf4:	438a      	bics	r2, r1
 8006bf6:	621a      	str	r2, [r3, #32]
 8006bf8:	e01c      	b.n	8006c34 <HAL_RCC_OscConfig+0x3a4>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d10c      	bne.n	8006c1c <HAL_RCC_OscConfig+0x38c>
 8006c02:	4bc2      	ldr	r3, [pc, #776]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c04:	6a1a      	ldr	r2, [r3, #32]
 8006c06:	4bc1      	ldr	r3, [pc, #772]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c08:	2104      	movs	r1, #4
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	621a      	str	r2, [r3, #32]
 8006c0e:	4bbf      	ldr	r3, [pc, #764]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c10:	6a1a      	ldr	r2, [r3, #32]
 8006c12:	4bbe      	ldr	r3, [pc, #760]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c14:	2101      	movs	r1, #1
 8006c16:	430a      	orrs	r2, r1
 8006c18:	621a      	str	r2, [r3, #32]
 8006c1a:	e00b      	b.n	8006c34 <HAL_RCC_OscConfig+0x3a4>
 8006c1c:	4bbb      	ldr	r3, [pc, #748]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	4bba      	ldr	r3, [pc, #744]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c22:	2101      	movs	r1, #1
 8006c24:	438a      	bics	r2, r1
 8006c26:	621a      	str	r2, [r3, #32]
 8006c28:	4bb8      	ldr	r3, [pc, #736]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c2a:	6a1a      	ldr	r2, [r3, #32]
 8006c2c:	4bb7      	ldr	r3, [pc, #732]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c2e:	2104      	movs	r1, #4
 8006c30:	438a      	bics	r2, r1
 8006c32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d014      	beq.n	8006c66 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c3c:	f7fe fc0c 	bl	8005458 <HAL_GetTick>
 8006c40:	0003      	movs	r3, r0
 8006c42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c44:	e009      	b.n	8006c5a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c46:	f7fe fc07 	bl	8005458 <HAL_GetTick>
 8006c4a:	0002      	movs	r2, r0
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	4aaf      	ldr	r2, [pc, #700]	@ (8006f10 <HAL_RCC_OscConfig+0x680>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e19a      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c5a:	4bac      	ldr	r3, [pc, #688]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	4013      	ands	r3, r2
 8006c62:	d0f0      	beq.n	8006c46 <HAL_RCC_OscConfig+0x3b6>
 8006c64:	e013      	b.n	8006c8e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c66:	f7fe fbf7 	bl	8005458 <HAL_GetTick>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c6e:	e009      	b.n	8006c84 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c70:	f7fe fbf2 	bl	8005458 <HAL_GetTick>
 8006c74:	0002      	movs	r2, r0
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	4aa5      	ldr	r2, [pc, #660]	@ (8006f10 <HAL_RCC_OscConfig+0x680>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e185      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c84:	4ba1      	ldr	r3, [pc, #644]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	d1f0      	bne.n	8006c70 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c8e:	231f      	movs	r3, #31
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d105      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c98:	4b9c      	ldr	r3, [pc, #624]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c9a:	69da      	ldr	r2, [r3, #28]
 8006c9c:	4b9b      	ldr	r3, [pc, #620]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006c9e:	499d      	ldr	r1, [pc, #628]	@ (8006f14 <HAL_RCC_OscConfig+0x684>)
 8006ca0:	400a      	ands	r2, r1
 8006ca2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2210      	movs	r2, #16
 8006caa:	4013      	ands	r3, r2
 8006cac:	d063      	beq.n	8006d76 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d12a      	bne.n	8006d0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006cb6:	4b95      	ldr	r3, [pc, #596]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cba:	4b94      	ldr	r3, [pc, #592]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006cbc:	2104      	movs	r1, #4
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006cc2:	4b92      	ldr	r3, [pc, #584]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cc6:	4b91      	ldr	r3, [pc, #580]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006cc8:	2101      	movs	r1, #1
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cce:	f7fe fbc3 	bl	8005458 <HAL_GetTick>
 8006cd2:	0003      	movs	r3, r0
 8006cd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006cd8:	f7fe fbbe 	bl	8005458 <HAL_GetTick>
 8006cdc:	0002      	movs	r2, r0
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e152      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006cea:	4b88      	ldr	r3, [pc, #544]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cee:	2202      	movs	r2, #2
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d0f1      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006cf4:	4b85      	ldr	r3, [pc, #532]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf8:	22f8      	movs	r2, #248	@ 0xf8
 8006cfa:	4393      	bics	r3, r2
 8006cfc:	0019      	movs	r1, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	00da      	lsls	r2, r3, #3
 8006d04:	4b81      	ldr	r3, [pc, #516]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d06:	430a      	orrs	r2, r1
 8006d08:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d0a:	e034      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	3305      	adds	r3, #5
 8006d12:	d111      	bne.n	8006d38 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006d14:	4b7d      	ldr	r3, [pc, #500]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d18:	4b7c      	ldr	r3, [pc, #496]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d1a:	2104      	movs	r1, #4
 8006d1c:	438a      	bics	r2, r1
 8006d1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006d20:	4b7a      	ldr	r3, [pc, #488]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d24:	22f8      	movs	r2, #248	@ 0xf8
 8006d26:	4393      	bics	r3, r2
 8006d28:	0019      	movs	r1, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	00da      	lsls	r2, r3, #3
 8006d30:	4b76      	ldr	r3, [pc, #472]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d32:	430a      	orrs	r2, r1
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d36:	e01e      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006d38:	4b74      	ldr	r3, [pc, #464]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d3c:	4b73      	ldr	r3, [pc, #460]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d3e:	2104      	movs	r1, #4
 8006d40:	430a      	orrs	r2, r1
 8006d42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006d44:	4b71      	ldr	r3, [pc, #452]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d48:	4b70      	ldr	r3, [pc, #448]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	438a      	bics	r2, r1
 8006d4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d50:	f7fe fb82 	bl	8005458 <HAL_GetTick>
 8006d54:	0003      	movs	r3, r0
 8006d56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006d58:	e008      	b.n	8006d6c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006d5a:	f7fe fb7d 	bl	8005458 <HAL_GetTick>
 8006d5e:	0002      	movs	r2, r0
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e111      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006d6c:	4b67      	ldr	r3, [pc, #412]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d70:	2202      	movs	r2, #2
 8006d72:	4013      	ands	r3, r2
 8006d74:	d1f1      	bne.n	8006d5a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d05c      	beq.n	8006e3a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006d80:	4b62      	ldr	r3, [pc, #392]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	220c      	movs	r2, #12
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b0c      	cmp	r3, #12
 8006d8a:	d00e      	beq.n	8006daa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006d8c:	4b5f      	ldr	r3, [pc, #380]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	220c      	movs	r2, #12
 8006d92:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d114      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006d98:	4b5c      	ldr	r3, [pc, #368]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	23c0      	movs	r3, #192	@ 0xc0
 8006d9e:	025b      	lsls	r3, r3, #9
 8006da0:	401a      	ands	r2, r3
 8006da2:	23c0      	movs	r3, #192	@ 0xc0
 8006da4:	025b      	lsls	r3, r3, #9
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d10b      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006daa:	4b58      	ldr	r3, [pc, #352]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dae:	2380      	movs	r3, #128	@ 0x80
 8006db0:	029b      	lsls	r3, r3, #10
 8006db2:	4013      	ands	r3, r2
 8006db4:	d040      	beq.n	8006e38 <HAL_RCC_OscConfig+0x5a8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d03c      	beq.n	8006e38 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e0e6      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01b      	beq.n	8006e02 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006dca:	4b50      	ldr	r3, [pc, #320]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dce:	4b4f      	ldr	r3, [pc, #316]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006dd0:	2180      	movs	r1, #128	@ 0x80
 8006dd2:	0249      	lsls	r1, r1, #9
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd8:	f7fe fb3e 	bl	8005458 <HAL_GetTick>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006de2:	f7fe fb39 	bl	8005458 <HAL_GetTick>
 8006de6:	0002      	movs	r2, r0
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e0cd      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006df4:	4b45      	ldr	r3, [pc, #276]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df8:	2380      	movs	r3, #128	@ 0x80
 8006dfa:	029b      	lsls	r3, r3, #10
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCC_OscConfig+0x552>
 8006e00:	e01b      	b.n	8006e3a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006e02:	4b42      	ldr	r3, [pc, #264]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e06:	4b41      	ldr	r3, [pc, #260]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e08:	4943      	ldr	r1, [pc, #268]	@ (8006f18 <HAL_RCC_OscConfig+0x688>)
 8006e0a:	400a      	ands	r2, r1
 8006e0c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0e:	f7fe fb23 	bl	8005458 <HAL_GetTick>
 8006e12:	0003      	movs	r3, r0
 8006e14:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e18:	f7fe fb1e 	bl	8005458 <HAL_GetTick>
 8006e1c:	0002      	movs	r2, r0
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e0b2      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006e2a:	4b38      	ldr	r3, [pc, #224]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e2e:	2380      	movs	r3, #128	@ 0x80
 8006e30:	029b      	lsls	r3, r3, #10
 8006e32:	4013      	ands	r3, r2
 8006e34:	d1f0      	bne.n	8006e18 <HAL_RCC_OscConfig+0x588>
 8006e36:	e000      	b.n	8006e3a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006e38:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d100      	bne.n	8006e44 <HAL_RCC_OscConfig+0x5b4>
 8006e42:	e0a4      	b.n	8006f8e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e44:	4b31      	ldr	r3, [pc, #196]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	220c      	movs	r2, #12
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d100      	bne.n	8006e52 <HAL_RCC_OscConfig+0x5c2>
 8006e50:	e078      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d14c      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e60:	492e      	ldr	r1, [pc, #184]	@ (8006f1c <HAL_RCC_OscConfig+0x68c>)
 8006e62:	400a      	ands	r2, r1
 8006e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e66:	f7fe faf7 	bl	8005458 <HAL_GetTick>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e70:	f7fe faf2 	bl	8005458 <HAL_GetTick>
 8006e74:	0002      	movs	r2, r0
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e086      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e82:	4b22      	ldr	r3, [pc, #136]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	2380      	movs	r3, #128	@ 0x80
 8006e88:	049b      	lsls	r3, r3, #18
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e92:	220f      	movs	r2, #15
 8006e94:	4393      	bics	r3, r2
 8006e96:	0019      	movs	r1, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f20 <HAL_RCC_OscConfig+0x690>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	4b15      	ldr	r3, [pc, #84]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ebc:	4b13      	ldr	r3, [pc, #76]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b12      	ldr	r3, [pc, #72]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006ec2:	2180      	movs	r1, #128	@ 0x80
 8006ec4:	0449      	lsls	r1, r1, #17
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eca:	f7fe fac5 	bl	8005458 <HAL_GetTick>
 8006ece:	0003      	movs	r3, r0
 8006ed0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed4:	f7fe fac0 	bl	8005458 <HAL_GetTick>
 8006ed8:	0002      	movs	r2, r0
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e054      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ee6:	4b09      	ldr	r3, [pc, #36]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	2380      	movs	r3, #128	@ 0x80
 8006eec:	049b      	lsls	r3, r3, #18
 8006eee:	4013      	ands	r3, r2
 8006ef0:	d0f0      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x644>
 8006ef2:	e04c      	b.n	8006f8e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef4:	4b05      	ldr	r3, [pc, #20]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	4b04      	ldr	r3, [pc, #16]	@ (8006f0c <HAL_RCC_OscConfig+0x67c>)
 8006efa:	4908      	ldr	r1, [pc, #32]	@ (8006f1c <HAL_RCC_OscConfig+0x68c>)
 8006efc:	400a      	ands	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f00:	f7fe faaa 	bl	8005458 <HAL_GetTick>
 8006f04:	0003      	movs	r3, r0
 8006f06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f08:	e015      	b.n	8006f36 <HAL_RCC_OscConfig+0x6a6>
 8006f0a:	46c0      	nop			@ (mov r8, r8)
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	00001388 	.word	0x00001388
 8006f14:	efffffff 	.word	0xefffffff
 8006f18:	fffeffff 	.word	0xfffeffff
 8006f1c:	feffffff 	.word	0xfeffffff
 8006f20:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f24:	f7fe fa98 	bl	8005458 <HAL_GetTick>
 8006f28:	0002      	movs	r2, r0
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e02c      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f36:	4b18      	ldr	r3, [pc, #96]	@ (8006f98 <HAL_RCC_OscConfig+0x708>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	2380      	movs	r3, #128	@ 0x80
 8006f3c:	049b      	lsls	r3, r3, #18
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d1f0      	bne.n	8006f24 <HAL_RCC_OscConfig+0x694>
 8006f42:	e024      	b.n	8006f8e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e01f      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006f50:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <HAL_RCC_OscConfig+0x708>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006f56:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <HAL_RCC_OscConfig+0x708>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	23c0      	movs	r3, #192	@ 0xc0
 8006f60:	025b      	lsls	r3, r3, #9
 8006f62:	401a      	ands	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d10e      	bne.n	8006f8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	220f      	movs	r2, #15
 8006f70:	401a      	ands	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d107      	bne.n	8006f8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	23f0      	movs	r3, #240	@ 0xf0
 8006f7e:	039b      	lsls	r3, r3, #14
 8006f80:	401a      	ands	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d001      	beq.n	8006f8e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	0018      	movs	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b008      	add	sp, #32
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40021000 	.word	0x40021000

08006f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0bf      	b.n	8007130 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb0:	4b61      	ldr	r3, [pc, #388]	@ (8007138 <HAL_RCC_ClockConfig+0x19c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d911      	bls.n	8006fe2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8007138 <HAL_RCC_ClockConfig+0x19c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	4393      	bics	r3, r2
 8006fc6:	0019      	movs	r1, r3
 8006fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8007138 <HAL_RCC_ClockConfig+0x19c>)
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd0:	4b59      	ldr	r3, [pc, #356]	@ (8007138 <HAL_RCC_ClockConfig+0x19c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d001      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e0a6      	b.n	8007130 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d015      	beq.n	8007018 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	d006      	beq.n	8007004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006ff6:	4b51      	ldr	r3, [pc, #324]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	4b50      	ldr	r3, [pc, #320]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 8006ffc:	21e0      	movs	r1, #224	@ 0xe0
 8006ffe:	00c9      	lsls	r1, r1, #3
 8007000:	430a      	orrs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007004:	4b4d      	ldr	r3, [pc, #308]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	22f0      	movs	r2, #240	@ 0xf0
 800700a:	4393      	bics	r3, r2
 800700c:	0019      	movs	r1, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	4b4a      	ldr	r3, [pc, #296]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	4013      	ands	r3, r2
 8007020:	d04c      	beq.n	80070bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d107      	bne.n	800703a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702a:	4b44      	ldr	r3, [pc, #272]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	2380      	movs	r3, #128	@ 0x80
 8007030:	029b      	lsls	r3, r3, #10
 8007032:	4013      	ands	r3, r2
 8007034:	d120      	bne.n	8007078 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e07a      	b.n	8007130 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d107      	bne.n	8007052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007042:	4b3e      	ldr	r3, [pc, #248]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	2380      	movs	r3, #128	@ 0x80
 8007048:	049b      	lsls	r3, r3, #18
 800704a:	4013      	ands	r3, r2
 800704c:	d114      	bne.n	8007078 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e06e      	b.n	8007130 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d107      	bne.n	800706a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800705a:	4b38      	ldr	r3, [pc, #224]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 800705c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800705e:	2380      	movs	r3, #128	@ 0x80
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	4013      	ands	r3, r2
 8007064:	d108      	bne.n	8007078 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e062      	b.n	8007130 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800706a:	4b34      	ldr	r3, [pc, #208]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2202      	movs	r2, #2
 8007070:	4013      	ands	r3, r2
 8007072:	d101      	bne.n	8007078 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e05b      	b.n	8007130 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007078:	4b30      	ldr	r3, [pc, #192]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2203      	movs	r2, #3
 800707e:	4393      	bics	r3, r2
 8007080:	0019      	movs	r1, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	4b2d      	ldr	r3, [pc, #180]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 8007088:	430a      	orrs	r2, r1
 800708a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800708c:	f7fe f9e4 	bl	8005458 <HAL_GetTick>
 8007090:	0003      	movs	r3, r0
 8007092:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007094:	e009      	b.n	80070aa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007096:	f7fe f9df 	bl	8005458 <HAL_GetTick>
 800709a:	0002      	movs	r2, r0
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	4a27      	ldr	r2, [pc, #156]	@ (8007140 <HAL_RCC_ClockConfig+0x1a4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e042      	b.n	8007130 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070aa:	4b24      	ldr	r3, [pc, #144]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	220c      	movs	r2, #12
 80070b0:	401a      	ands	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d1ec      	bne.n	8007096 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070bc:	4b1e      	ldr	r3, [pc, #120]	@ (8007138 <HAL_RCC_ClockConfig+0x19c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2201      	movs	r2, #1
 80070c2:	4013      	ands	r3, r2
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d211      	bcs.n	80070ee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007138 <HAL_RCC_ClockConfig+0x19c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	4393      	bics	r3, r2
 80070d2:	0019      	movs	r1, r3
 80070d4:	4b18      	ldr	r3, [pc, #96]	@ (8007138 <HAL_RCC_ClockConfig+0x19c>)
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070dc:	4b16      	ldr	r3, [pc, #88]	@ (8007138 <HAL_RCC_ClockConfig+0x19c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2201      	movs	r2, #1
 80070e2:	4013      	ands	r3, r2
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d001      	beq.n	80070ee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e020      	b.n	8007130 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2204      	movs	r2, #4
 80070f4:	4013      	ands	r3, r2
 80070f6:	d009      	beq.n	800710c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80070f8:	4b10      	ldr	r3, [pc, #64]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4a11      	ldr	r2, [pc, #68]	@ (8007144 <HAL_RCC_ClockConfig+0x1a8>)
 80070fe:	4013      	ands	r3, r2
 8007100:	0019      	movs	r1, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	4b0d      	ldr	r3, [pc, #52]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800710c:	f000 f820 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 8007110:	0001      	movs	r1, r0
 8007112:	4b0a      	ldr	r3, [pc, #40]	@ (800713c <HAL_RCC_ClockConfig+0x1a0>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	091b      	lsrs	r3, r3, #4
 8007118:	220f      	movs	r2, #15
 800711a:	4013      	ands	r3, r2
 800711c:	4a0a      	ldr	r2, [pc, #40]	@ (8007148 <HAL_RCC_ClockConfig+0x1ac>)
 800711e:	5cd3      	ldrb	r3, [r2, r3]
 8007120:	000a      	movs	r2, r1
 8007122:	40da      	lsrs	r2, r3
 8007124:	4b09      	ldr	r3, [pc, #36]	@ (800714c <HAL_RCC_ClockConfig+0x1b0>)
 8007126:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007128:	2000      	movs	r0, #0
 800712a:	f7fe f94f 	bl	80053cc <HAL_InitTick>
  
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	0018      	movs	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	b004      	add	sp, #16
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40022000 	.word	0x40022000
 800713c:	40021000 	.word	0x40021000
 8007140:	00001388 	.word	0x00001388
 8007144:	fffff8ff 	.word	0xfffff8ff
 8007148:	0800b01c 	.word	0x0800b01c
 800714c:	20000000 	.word	0x20000000

08007150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800716a:	4b2d      	ldr	r3, [pc, #180]	@ (8007220 <HAL_RCC_GetSysClockFreq+0xd0>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	220c      	movs	r2, #12
 8007174:	4013      	ands	r3, r2
 8007176:	2b0c      	cmp	r3, #12
 8007178:	d046      	beq.n	8007208 <HAL_RCC_GetSysClockFreq+0xb8>
 800717a:	d848      	bhi.n	800720e <HAL_RCC_GetSysClockFreq+0xbe>
 800717c:	2b04      	cmp	r3, #4
 800717e:	d002      	beq.n	8007186 <HAL_RCC_GetSysClockFreq+0x36>
 8007180:	2b08      	cmp	r3, #8
 8007182:	d003      	beq.n	800718c <HAL_RCC_GetSysClockFreq+0x3c>
 8007184:	e043      	b.n	800720e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007186:	4b27      	ldr	r3, [pc, #156]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007188:	613b      	str	r3, [r7, #16]
      break;
 800718a:	e043      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	0c9b      	lsrs	r3, r3, #18
 8007190:	220f      	movs	r2, #15
 8007192:	4013      	ands	r3, r2
 8007194:	4a24      	ldr	r2, [pc, #144]	@ (8007228 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007196:	5cd3      	ldrb	r3, [r2, r3]
 8007198:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800719a:	4b21      	ldr	r3, [pc, #132]	@ (8007220 <HAL_RCC_GetSysClockFreq+0xd0>)
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	220f      	movs	r2, #15
 80071a0:	4013      	ands	r3, r2
 80071a2:	4a22      	ldr	r2, [pc, #136]	@ (800722c <HAL_RCC_GetSysClockFreq+0xdc>)
 80071a4:	5cd3      	ldrb	r3, [r2, r3]
 80071a6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	23c0      	movs	r3, #192	@ 0xc0
 80071ac:	025b      	lsls	r3, r3, #9
 80071ae:	401a      	ands	r2, r3
 80071b0:	2380      	movs	r3, #128	@ 0x80
 80071b2:	025b      	lsls	r3, r3, #9
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d109      	bne.n	80071cc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	481a      	ldr	r0, [pc, #104]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xd4>)
 80071bc:	f7f8 ffbe 	bl	800013c <__udivsi3>
 80071c0:	0003      	movs	r3, r0
 80071c2:	001a      	movs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4353      	muls	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	e01a      	b.n	8007202 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	23c0      	movs	r3, #192	@ 0xc0
 80071d0:	025b      	lsls	r3, r3, #9
 80071d2:	401a      	ands	r2, r3
 80071d4:	23c0      	movs	r3, #192	@ 0xc0
 80071d6:	025b      	lsls	r3, r3, #9
 80071d8:	429a      	cmp	r2, r3
 80071da:	d109      	bne.n	80071f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	4814      	ldr	r0, [pc, #80]	@ (8007230 <HAL_RCC_GetSysClockFreq+0xe0>)
 80071e0:	f7f8 ffac 	bl	800013c <__udivsi3>
 80071e4:	0003      	movs	r3, r0
 80071e6:	001a      	movs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4353      	muls	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e008      	b.n	8007202 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	480c      	ldr	r0, [pc, #48]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xd4>)
 80071f4:	f7f8 ffa2 	bl	800013c <__udivsi3>
 80071f8:	0003      	movs	r3, r0
 80071fa:	001a      	movs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4353      	muls	r3, r2
 8007200:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	613b      	str	r3, [r7, #16]
      break;
 8007206:	e005      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8007208:	4b09      	ldr	r3, [pc, #36]	@ (8007230 <HAL_RCC_GetSysClockFreq+0xe0>)
 800720a:	613b      	str	r3, [r7, #16]
      break;
 800720c:	e002      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800720e:	4b05      	ldr	r3, [pc, #20]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007210:	613b      	str	r3, [r7, #16]
      break;
 8007212:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007214:	693b      	ldr	r3, [r7, #16]
}
 8007216:	0018      	movs	r0, r3
 8007218:	46bd      	mov	sp, r7
 800721a:	b006      	add	sp, #24
 800721c:	bd80      	pop	{r7, pc}
 800721e:	46c0      	nop			@ (mov r8, r8)
 8007220:	40021000 	.word	0x40021000
 8007224:	007a1200 	.word	0x007a1200
 8007228:	0800b034 	.word	0x0800b034
 800722c:	0800b044 	.word	0x0800b044
 8007230:	02dc6c00 	.word	0x02dc6c00

08007234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007238:	4b02      	ldr	r3, [pc, #8]	@ (8007244 <HAL_RCC_GetHCLKFreq+0x10>)
 800723a:	681b      	ldr	r3, [r3, #0]
}
 800723c:	0018      	movs	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	20000000 	.word	0x20000000

08007248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800724c:	f7ff fff2 	bl	8007234 <HAL_RCC_GetHCLKFreq>
 8007250:	0001      	movs	r1, r0
 8007252:	4b06      	ldr	r3, [pc, #24]	@ (800726c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	2207      	movs	r2, #7
 800725a:	4013      	ands	r3, r2
 800725c:	4a04      	ldr	r2, [pc, #16]	@ (8007270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800725e:	5cd3      	ldrb	r3, [r2, r3]
 8007260:	40d9      	lsrs	r1, r3
 8007262:	000b      	movs	r3, r1
}    
 8007264:	0018      	movs	r0, r3
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	46c0      	nop			@ (mov r8, r8)
 800726c:	40021000 	.word	0x40021000
 8007270:	0800b02c 	.word	0x0800b02c

08007274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	2380      	movs	r3, #128	@ 0x80
 800728a:	025b      	lsls	r3, r3, #9
 800728c:	4013      	ands	r3, r2
 800728e:	d100      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007290:	e08e      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8007292:	2017      	movs	r0, #23
 8007294:	183b      	adds	r3, r7, r0
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800729a:	4b6e      	ldr	r3, [pc, #440]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	2380      	movs	r3, #128	@ 0x80
 80072a0:	055b      	lsls	r3, r3, #21
 80072a2:	4013      	ands	r3, r2
 80072a4:	d110      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80072a6:	4b6b      	ldr	r3, [pc, #428]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80072a8:	69da      	ldr	r2, [r3, #28]
 80072aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80072ac:	2180      	movs	r1, #128	@ 0x80
 80072ae:	0549      	lsls	r1, r1, #21
 80072b0:	430a      	orrs	r2, r1
 80072b2:	61da      	str	r2, [r3, #28]
 80072b4:	4b67      	ldr	r3, [pc, #412]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80072b6:	69da      	ldr	r2, [r3, #28]
 80072b8:	2380      	movs	r3, #128	@ 0x80
 80072ba:	055b      	lsls	r3, r3, #21
 80072bc:	4013      	ands	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]
 80072c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072c2:	183b      	adds	r3, r7, r0
 80072c4:	2201      	movs	r2, #1
 80072c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c8:	4b63      	ldr	r3, [pc, #396]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	2380      	movs	r3, #128	@ 0x80
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4013      	ands	r3, r2
 80072d2:	d11a      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072d4:	4b60      	ldr	r3, [pc, #384]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	4b5f      	ldr	r3, [pc, #380]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80072da:	2180      	movs	r1, #128	@ 0x80
 80072dc:	0049      	lsls	r1, r1, #1
 80072de:	430a      	orrs	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072e2:	f7fe f8b9 	bl	8005458 <HAL_GetTick>
 80072e6:	0003      	movs	r3, r0
 80072e8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ea:	e008      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ec:	f7fe f8b4 	bl	8005458 <HAL_GetTick>
 80072f0:	0002      	movs	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b64      	cmp	r3, #100	@ 0x64
 80072f8:	d901      	bls.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e0a6      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072fe:	4b56      	ldr	r3, [pc, #344]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	2380      	movs	r3, #128	@ 0x80
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	4013      	ands	r3, r2
 8007308:	d0f0      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800730a:	4b52      	ldr	r3, [pc, #328]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	23c0      	movs	r3, #192	@ 0xc0
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4013      	ands	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d034      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	23c0      	movs	r3, #192	@ 0xc0
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4013      	ands	r3, r2
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	429a      	cmp	r2, r3
 800732a:	d02c      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800732c:	4b49      	ldr	r3, [pc, #292]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	4a4a      	ldr	r2, [pc, #296]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007332:	4013      	ands	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007336:	4b47      	ldr	r3, [pc, #284]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007338:	6a1a      	ldr	r2, [r3, #32]
 800733a:	4b46      	ldr	r3, [pc, #280]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800733c:	2180      	movs	r1, #128	@ 0x80
 800733e:	0249      	lsls	r1, r1, #9
 8007340:	430a      	orrs	r2, r1
 8007342:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007344:	4b43      	ldr	r3, [pc, #268]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007346:	6a1a      	ldr	r2, [r3, #32]
 8007348:	4b42      	ldr	r3, [pc, #264]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800734a:	4945      	ldr	r1, [pc, #276]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800734c:	400a      	ands	r2, r1
 800734e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007350:	4b40      	ldr	r3, [pc, #256]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	4013      	ands	r3, r2
 800735c:	d013      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800735e:	f7fe f87b 	bl	8005458 <HAL_GetTick>
 8007362:	0003      	movs	r3, r0
 8007364:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007366:	e009      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007368:	f7fe f876 	bl	8005458 <HAL_GetTick>
 800736c:	0002      	movs	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	4a3c      	ldr	r2, [pc, #240]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e067      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800737c:	4b35      	ldr	r3, [pc, #212]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	2202      	movs	r2, #2
 8007382:	4013      	ands	r3, r2
 8007384:	d0f0      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007386:	4b33      	ldr	r3, [pc, #204]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	4a34      	ldr	r2, [pc, #208]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800738c:	4013      	ands	r3, r2
 800738e:	0019      	movs	r1, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	4b2f      	ldr	r3, [pc, #188]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007396:	430a      	orrs	r2, r1
 8007398:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800739a:	2317      	movs	r3, #23
 800739c:	18fb      	adds	r3, r7, r3
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d105      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80073aa:	492f      	ldr	r1, [pc, #188]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80073ac:	400a      	ands	r2, r1
 80073ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2201      	movs	r2, #1
 80073b6:	4013      	ands	r3, r2
 80073b8:	d009      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073ba:	4b26      	ldr	r3, [pc, #152]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073be:	2203      	movs	r2, #3
 80073c0:	4393      	bics	r3, r2
 80073c2:	0019      	movs	r1, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	4b22      	ldr	r3, [pc, #136]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80073ca:	430a      	orrs	r2, r1
 80073cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2202      	movs	r2, #2
 80073d4:	4013      	ands	r3, r2
 80073d6:	d009      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80073da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073dc:	4a23      	ldr	r2, [pc, #140]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80073de:	4013      	ands	r3, r2
 80073e0:	0019      	movs	r1, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80073e8:	430a      	orrs	r2, r1
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	2380      	movs	r3, #128	@ 0x80
 80073f2:	02db      	lsls	r3, r3, #11
 80073f4:	4013      	ands	r3, r2
 80073f6:	d009      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073f8:	4b16      	ldr	r3, [pc, #88]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80073fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80073fe:	4013      	ands	r3, r2
 8007400:	0019      	movs	r1, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691a      	ldr	r2, [r3, #16]
 8007406:	4b13      	ldr	r3, [pc, #76]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007408:	430a      	orrs	r2, r1
 800740a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2220      	movs	r2, #32
 8007412:	4013      	ands	r3, r2
 8007414:	d009      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007416:	4b0f      	ldr	r3, [pc, #60]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741a:	2210      	movs	r2, #16
 800741c:	4393      	bics	r3, r2
 800741e:	0019      	movs	r1, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	695a      	ldr	r2, [r3, #20]
 8007424:	4b0b      	ldr	r3, [pc, #44]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007426:	430a      	orrs	r2, r1
 8007428:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	2380      	movs	r3, #128	@ 0x80
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	4013      	ands	r3, r2
 8007434:	d009      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007436:	4b07      	ldr	r3, [pc, #28]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743a:	2240      	movs	r2, #64	@ 0x40
 800743c:	4393      	bics	r3, r2
 800743e:	0019      	movs	r1, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699a      	ldr	r2, [r3, #24]
 8007444:	4b03      	ldr	r3, [pc, #12]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007446:	430a      	orrs	r2, r1
 8007448:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	0018      	movs	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	b006      	add	sp, #24
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40021000 	.word	0x40021000
 8007458:	40007000 	.word	0x40007000
 800745c:	fffffcff 	.word	0xfffffcff
 8007460:	fffeffff 	.word	0xfffeffff
 8007464:	00001388 	.word	0x00001388
 8007468:	efffffff 	.word	0xefffffff
 800746c:	fffcffff 	.word	0xfffcffff
 8007470:	fff3ffff 	.word	0xfff3ffff

08007474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e044      	b.n	8007510 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d107      	bne.n	800749e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2278      	movs	r2, #120	@ 0x78
 8007492:	2100      	movs	r1, #0
 8007494:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	0018      	movs	r0, r3
 800749a:	f7fd fe2f 	bl	80050fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2224      	movs	r2, #36	@ 0x24
 80074a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2101      	movs	r1, #1
 80074b0:	438a      	bics	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	0018      	movs	r0, r3
 80074c0:	f000 fab4 	bl	8007a2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	0018      	movs	r0, r3
 80074c8:	f000 f8c8 	bl	800765c <UART_SetConfig>
 80074cc:	0003      	movs	r3, r0
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e01c      	b.n	8007510 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	490d      	ldr	r1, [pc, #52]	@ (8007518 <HAL_UART_Init+0xa4>)
 80074e2:	400a      	ands	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	212a      	movs	r1, #42	@ 0x2a
 80074f2:	438a      	bics	r2, r1
 80074f4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2101      	movs	r1, #1
 8007502:	430a      	orrs	r2, r1
 8007504:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	0018      	movs	r0, r3
 800750a:	f000 fb43 	bl	8007b94 <UART_CheckIdleState>
 800750e:	0003      	movs	r3, r0
}
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	b002      	add	sp, #8
 8007516:	bd80      	pop	{r7, pc}
 8007518:	ffffb7ff 	.word	0xffffb7ff

0800751c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	1dbb      	adds	r3, r7, #6
 800752a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007530:	2b20      	cmp	r3, #32
 8007532:	d000      	beq.n	8007536 <HAL_UART_Transmit+0x1a>
 8007534:	e08c      	b.n	8007650 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_UART_Transmit+0x28>
 800753c:	1dbb      	adds	r3, r7, #6
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e084      	b.n	8007652 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	2380      	movs	r3, #128	@ 0x80
 800754e:	015b      	lsls	r3, r3, #5
 8007550:	429a      	cmp	r2, r3
 8007552:	d109      	bne.n	8007568 <HAL_UART_Transmit+0x4c>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2201      	movs	r2, #1
 8007560:	4013      	ands	r3, r2
 8007562:	d001      	beq.n	8007568 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e074      	b.n	8007652 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2284      	movs	r2, #132	@ 0x84
 800756c:	2100      	movs	r1, #0
 800756e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2221      	movs	r2, #33	@ 0x21
 8007574:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007576:	f7fd ff6f 	bl	8005458 <HAL_GetTick>
 800757a:	0003      	movs	r3, r0
 800757c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1dba      	adds	r2, r7, #6
 8007582:	2150      	movs	r1, #80	@ 0x50
 8007584:	8812      	ldrh	r2, [r2, #0]
 8007586:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	1dba      	adds	r2, r7, #6
 800758c:	2152      	movs	r1, #82	@ 0x52
 800758e:	8812      	ldrh	r2, [r2, #0]
 8007590:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	2380      	movs	r3, #128	@ 0x80
 8007598:	015b      	lsls	r3, r3, #5
 800759a:	429a      	cmp	r2, r3
 800759c:	d108      	bne.n	80075b0 <HAL_UART_Transmit+0x94>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e003      	b.n	80075b8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075b8:	e02f      	b.n	800761a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	0013      	movs	r3, r2
 80075c4:	2200      	movs	r2, #0
 80075c6:	2180      	movs	r1, #128	@ 0x80
 80075c8:	f000 fb8c 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 80075cc:	1e03      	subs	r3, r0, #0
 80075ce:	d004      	beq.n	80075da <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e03b      	b.n	8007652 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10b      	bne.n	80075f8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	881a      	ldrh	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	05d2      	lsls	r2, r2, #23
 80075ea:	0dd2      	lsrs	r2, r2, #23
 80075ec:	b292      	uxth	r2, r2
 80075ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	3302      	adds	r3, #2
 80075f4:	61bb      	str	r3, [r7, #24]
 80075f6:	e007      	b.n	8007608 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	781a      	ldrb	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	3301      	adds	r3, #1
 8007606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2252      	movs	r2, #82	@ 0x52
 800760c:	5a9b      	ldrh	r3, [r3, r2]
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b299      	uxth	r1, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2252      	movs	r2, #82	@ 0x52
 8007618:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2252      	movs	r2, #82	@ 0x52
 800761e:	5a9b      	ldrh	r3, [r3, r2]
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1c9      	bne.n	80075ba <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	0013      	movs	r3, r2
 8007630:	2200      	movs	r2, #0
 8007632:	2140      	movs	r1, #64	@ 0x40
 8007634:	f000 fb56 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007638:	1e03      	subs	r3, r0, #0
 800763a:	d004      	beq.n	8007646 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2220      	movs	r2, #32
 8007640:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e005      	b.n	8007652 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	e000      	b.n	8007652 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007650:	2302      	movs	r3, #2
  }
}
 8007652:	0018      	movs	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	b008      	add	sp, #32
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007664:	231e      	movs	r3, #30
 8007666:	18fb      	adds	r3, r7, r3
 8007668:	2200      	movs	r2, #0
 800766a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4abe      	ldr	r2, [pc, #760]	@ (8007984 <UART_SetConfig+0x328>)
 800768c:	4013      	ands	r3, r2
 800768e:	0019      	movs	r1, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	430a      	orrs	r2, r1
 8007698:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	4ab9      	ldr	r2, [pc, #740]	@ (8007988 <UART_SetConfig+0x32c>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	0019      	movs	r1, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	4ab0      	ldr	r2, [pc, #704]	@ (800798c <UART_SetConfig+0x330>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	0019      	movs	r1, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4aac      	ldr	r2, [pc, #688]	@ (8007990 <UART_SetConfig+0x334>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d127      	bne.n	8007732 <UART_SetConfig+0xd6>
 80076e2:	4bac      	ldr	r3, [pc, #688]	@ (8007994 <UART_SetConfig+0x338>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e6:	2203      	movs	r2, #3
 80076e8:	4013      	ands	r3, r2
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d00d      	beq.n	800770a <UART_SetConfig+0xae>
 80076ee:	d81b      	bhi.n	8007728 <UART_SetConfig+0xcc>
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d014      	beq.n	800771e <UART_SetConfig+0xc2>
 80076f4:	d818      	bhi.n	8007728 <UART_SetConfig+0xcc>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <UART_SetConfig+0xa4>
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d00a      	beq.n	8007714 <UART_SetConfig+0xb8>
 80076fe:	e013      	b.n	8007728 <UART_SetConfig+0xcc>
 8007700:	231f      	movs	r3, #31
 8007702:	18fb      	adds	r3, r7, r3
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e0bd      	b.n	8007886 <UART_SetConfig+0x22a>
 800770a:	231f      	movs	r3, #31
 800770c:	18fb      	adds	r3, r7, r3
 800770e:	2202      	movs	r2, #2
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	e0b8      	b.n	8007886 <UART_SetConfig+0x22a>
 8007714:	231f      	movs	r3, #31
 8007716:	18fb      	adds	r3, r7, r3
 8007718:	2204      	movs	r2, #4
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e0b3      	b.n	8007886 <UART_SetConfig+0x22a>
 800771e:	231f      	movs	r3, #31
 8007720:	18fb      	adds	r3, r7, r3
 8007722:	2208      	movs	r2, #8
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e0ae      	b.n	8007886 <UART_SetConfig+0x22a>
 8007728:	231f      	movs	r3, #31
 800772a:	18fb      	adds	r3, r7, r3
 800772c:	2210      	movs	r2, #16
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	e0a9      	b.n	8007886 <UART_SetConfig+0x22a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a98      	ldr	r2, [pc, #608]	@ (8007998 <UART_SetConfig+0x33c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d134      	bne.n	80077a6 <UART_SetConfig+0x14a>
 800773c:	4b95      	ldr	r3, [pc, #596]	@ (8007994 <UART_SetConfig+0x338>)
 800773e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007740:	23c0      	movs	r3, #192	@ 0xc0
 8007742:	029b      	lsls	r3, r3, #10
 8007744:	4013      	ands	r3, r2
 8007746:	22c0      	movs	r2, #192	@ 0xc0
 8007748:	0292      	lsls	r2, r2, #10
 800774a:	4293      	cmp	r3, r2
 800774c:	d017      	beq.n	800777e <UART_SetConfig+0x122>
 800774e:	22c0      	movs	r2, #192	@ 0xc0
 8007750:	0292      	lsls	r2, r2, #10
 8007752:	4293      	cmp	r3, r2
 8007754:	d822      	bhi.n	800779c <UART_SetConfig+0x140>
 8007756:	2280      	movs	r2, #128	@ 0x80
 8007758:	0292      	lsls	r2, r2, #10
 800775a:	4293      	cmp	r3, r2
 800775c:	d019      	beq.n	8007792 <UART_SetConfig+0x136>
 800775e:	2280      	movs	r2, #128	@ 0x80
 8007760:	0292      	lsls	r2, r2, #10
 8007762:	4293      	cmp	r3, r2
 8007764:	d81a      	bhi.n	800779c <UART_SetConfig+0x140>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <UART_SetConfig+0x118>
 800776a:	2280      	movs	r2, #128	@ 0x80
 800776c:	0252      	lsls	r2, r2, #9
 800776e:	4293      	cmp	r3, r2
 8007770:	d00a      	beq.n	8007788 <UART_SetConfig+0x12c>
 8007772:	e013      	b.n	800779c <UART_SetConfig+0x140>
 8007774:	231f      	movs	r3, #31
 8007776:	18fb      	adds	r3, r7, r3
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
 800777c:	e083      	b.n	8007886 <UART_SetConfig+0x22a>
 800777e:	231f      	movs	r3, #31
 8007780:	18fb      	adds	r3, r7, r3
 8007782:	2202      	movs	r2, #2
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	e07e      	b.n	8007886 <UART_SetConfig+0x22a>
 8007788:	231f      	movs	r3, #31
 800778a:	18fb      	adds	r3, r7, r3
 800778c:	2204      	movs	r2, #4
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	e079      	b.n	8007886 <UART_SetConfig+0x22a>
 8007792:	231f      	movs	r3, #31
 8007794:	18fb      	adds	r3, r7, r3
 8007796:	2208      	movs	r2, #8
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	e074      	b.n	8007886 <UART_SetConfig+0x22a>
 800779c:	231f      	movs	r3, #31
 800779e:	18fb      	adds	r3, r7, r3
 80077a0:	2210      	movs	r2, #16
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e06f      	b.n	8007886 <UART_SetConfig+0x22a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a7c      	ldr	r2, [pc, #496]	@ (800799c <UART_SetConfig+0x340>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d134      	bne.n	800781a <UART_SetConfig+0x1be>
 80077b0:	4b78      	ldr	r3, [pc, #480]	@ (8007994 <UART_SetConfig+0x338>)
 80077b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077b4:	23c0      	movs	r3, #192	@ 0xc0
 80077b6:	031b      	lsls	r3, r3, #12
 80077b8:	4013      	ands	r3, r2
 80077ba:	22c0      	movs	r2, #192	@ 0xc0
 80077bc:	0312      	lsls	r2, r2, #12
 80077be:	4293      	cmp	r3, r2
 80077c0:	d017      	beq.n	80077f2 <UART_SetConfig+0x196>
 80077c2:	22c0      	movs	r2, #192	@ 0xc0
 80077c4:	0312      	lsls	r2, r2, #12
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d822      	bhi.n	8007810 <UART_SetConfig+0x1b4>
 80077ca:	2280      	movs	r2, #128	@ 0x80
 80077cc:	0312      	lsls	r2, r2, #12
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d019      	beq.n	8007806 <UART_SetConfig+0x1aa>
 80077d2:	2280      	movs	r2, #128	@ 0x80
 80077d4:	0312      	lsls	r2, r2, #12
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d81a      	bhi.n	8007810 <UART_SetConfig+0x1b4>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <UART_SetConfig+0x18c>
 80077de:	2280      	movs	r2, #128	@ 0x80
 80077e0:	02d2      	lsls	r2, r2, #11
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00a      	beq.n	80077fc <UART_SetConfig+0x1a0>
 80077e6:	e013      	b.n	8007810 <UART_SetConfig+0x1b4>
 80077e8:	231f      	movs	r3, #31
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
 80077f0:	e049      	b.n	8007886 <UART_SetConfig+0x22a>
 80077f2:	231f      	movs	r3, #31
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	2202      	movs	r2, #2
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	e044      	b.n	8007886 <UART_SetConfig+0x22a>
 80077fc:	231f      	movs	r3, #31
 80077fe:	18fb      	adds	r3, r7, r3
 8007800:	2204      	movs	r2, #4
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	e03f      	b.n	8007886 <UART_SetConfig+0x22a>
 8007806:	231f      	movs	r3, #31
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	2208      	movs	r2, #8
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	e03a      	b.n	8007886 <UART_SetConfig+0x22a>
 8007810:	231f      	movs	r3, #31
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	2210      	movs	r2, #16
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	e035      	b.n	8007886 <UART_SetConfig+0x22a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a60      	ldr	r2, [pc, #384]	@ (80079a0 <UART_SetConfig+0x344>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d104      	bne.n	800782e <UART_SetConfig+0x1d2>
 8007824:	231f      	movs	r3, #31
 8007826:	18fb      	adds	r3, r7, r3
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e02b      	b.n	8007886 <UART_SetConfig+0x22a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a5c      	ldr	r2, [pc, #368]	@ (80079a4 <UART_SetConfig+0x348>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d104      	bne.n	8007842 <UART_SetConfig+0x1e6>
 8007838:	231f      	movs	r3, #31
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	2200      	movs	r2, #0
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	e021      	b.n	8007886 <UART_SetConfig+0x22a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a58      	ldr	r2, [pc, #352]	@ (80079a8 <UART_SetConfig+0x34c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d104      	bne.n	8007856 <UART_SetConfig+0x1fa>
 800784c:	231f      	movs	r3, #31
 800784e:	18fb      	adds	r3, r7, r3
 8007850:	2200      	movs	r2, #0
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	e017      	b.n	8007886 <UART_SetConfig+0x22a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a54      	ldr	r2, [pc, #336]	@ (80079ac <UART_SetConfig+0x350>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d104      	bne.n	800786a <UART_SetConfig+0x20e>
 8007860:	231f      	movs	r3, #31
 8007862:	18fb      	adds	r3, r7, r3
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e00d      	b.n	8007886 <UART_SetConfig+0x22a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a50      	ldr	r2, [pc, #320]	@ (80079b0 <UART_SetConfig+0x354>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d104      	bne.n	800787e <UART_SetConfig+0x222>
 8007874:	231f      	movs	r3, #31
 8007876:	18fb      	adds	r3, r7, r3
 8007878:	2200      	movs	r2, #0
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	e003      	b.n	8007886 <UART_SetConfig+0x22a>
 800787e:	231f      	movs	r3, #31
 8007880:	18fb      	adds	r3, r7, r3
 8007882:	2210      	movs	r2, #16
 8007884:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69da      	ldr	r2, [r3, #28]
 800788a:	2380      	movs	r3, #128	@ 0x80
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	429a      	cmp	r2, r3
 8007890:	d15c      	bne.n	800794c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8007892:	231f      	movs	r3, #31
 8007894:	18fb      	adds	r3, r7, r3
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b08      	cmp	r3, #8
 800789a:	d015      	beq.n	80078c8 <UART_SetConfig+0x26c>
 800789c:	dc18      	bgt.n	80078d0 <UART_SetConfig+0x274>
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d00d      	beq.n	80078be <UART_SetConfig+0x262>
 80078a2:	dc15      	bgt.n	80078d0 <UART_SetConfig+0x274>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <UART_SetConfig+0x252>
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d005      	beq.n	80078b8 <UART_SetConfig+0x25c>
 80078ac:	e010      	b.n	80078d0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ae:	f7ff fccb 	bl	8007248 <HAL_RCC_GetPCLK1Freq>
 80078b2:	0003      	movs	r3, r0
 80078b4:	61bb      	str	r3, [r7, #24]
        break;
 80078b6:	e012      	b.n	80078de <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078b8:	4b3e      	ldr	r3, [pc, #248]	@ (80079b4 <UART_SetConfig+0x358>)
 80078ba:	61bb      	str	r3, [r7, #24]
        break;
 80078bc:	e00f      	b.n	80078de <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078be:	f7ff fc47 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 80078c2:	0003      	movs	r3, r0
 80078c4:	61bb      	str	r3, [r7, #24]
        break;
 80078c6:	e00a      	b.n	80078de <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078c8:	2380      	movs	r3, #128	@ 0x80
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	61bb      	str	r3, [r7, #24]
        break;
 80078ce:	e006      	b.n	80078de <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078d4:	231e      	movs	r3, #30
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	2201      	movs	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]
        break;
 80078dc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d100      	bne.n	80078e6 <UART_SetConfig+0x28a>
 80078e4:	e095      	b.n	8007a12 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	005a      	lsls	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	18d2      	adds	r2, r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	0019      	movs	r1, r3
 80078f8:	0010      	movs	r0, r2
 80078fa:	f7f8 fc1f 	bl	800013c <__udivsi3>
 80078fe:	0003      	movs	r3, r0
 8007900:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	2b0f      	cmp	r3, #15
 8007906:	d91c      	bls.n	8007942 <UART_SetConfig+0x2e6>
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	2380      	movs	r3, #128	@ 0x80
 800790c:	025b      	lsls	r3, r3, #9
 800790e:	429a      	cmp	r2, r3
 8007910:	d217      	bcs.n	8007942 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	b29a      	uxth	r2, r3
 8007916:	200e      	movs	r0, #14
 8007918:	183b      	adds	r3, r7, r0
 800791a:	210f      	movs	r1, #15
 800791c:	438a      	bics	r2, r1
 800791e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	b29b      	uxth	r3, r3
 8007926:	2207      	movs	r2, #7
 8007928:	4013      	ands	r3, r2
 800792a:	b299      	uxth	r1, r3
 800792c:	183b      	adds	r3, r7, r0
 800792e:	183a      	adds	r2, r7, r0
 8007930:	8812      	ldrh	r2, [r2, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	183a      	adds	r2, r7, r0
 800793c:	8812      	ldrh	r2, [r2, #0]
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	e067      	b.n	8007a12 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007942:	231e      	movs	r3, #30
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	2201      	movs	r2, #1
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e062      	b.n	8007a12 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800794c:	231f      	movs	r3, #31
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b08      	cmp	r3, #8
 8007954:	d030      	beq.n	80079b8 <UART_SetConfig+0x35c>
 8007956:	dc33      	bgt.n	80079c0 <UART_SetConfig+0x364>
 8007958:	2b04      	cmp	r3, #4
 800795a:	d00d      	beq.n	8007978 <UART_SetConfig+0x31c>
 800795c:	dc30      	bgt.n	80079c0 <UART_SetConfig+0x364>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <UART_SetConfig+0x30c>
 8007962:	2b02      	cmp	r3, #2
 8007964:	d005      	beq.n	8007972 <UART_SetConfig+0x316>
 8007966:	e02b      	b.n	80079c0 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007968:	f7ff fc6e 	bl	8007248 <HAL_RCC_GetPCLK1Freq>
 800796c:	0003      	movs	r3, r0
 800796e:	61bb      	str	r3, [r7, #24]
        break;
 8007970:	e02d      	b.n	80079ce <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007972:	4b10      	ldr	r3, [pc, #64]	@ (80079b4 <UART_SetConfig+0x358>)
 8007974:	61bb      	str	r3, [r7, #24]
        break;
 8007976:	e02a      	b.n	80079ce <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007978:	f7ff fbea 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 800797c:	0003      	movs	r3, r0
 800797e:	61bb      	str	r3, [r7, #24]
        break;
 8007980:	e025      	b.n	80079ce <UART_SetConfig+0x372>
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	efff69f3 	.word	0xefff69f3
 8007988:	ffffcfff 	.word	0xffffcfff
 800798c:	fffff4ff 	.word	0xfffff4ff
 8007990:	40013800 	.word	0x40013800
 8007994:	40021000 	.word	0x40021000
 8007998:	40004400 	.word	0x40004400
 800799c:	40004800 	.word	0x40004800
 80079a0:	40004c00 	.word	0x40004c00
 80079a4:	40005000 	.word	0x40005000
 80079a8:	40011400 	.word	0x40011400
 80079ac:	40011800 	.word	0x40011800
 80079b0:	40011c00 	.word	0x40011c00
 80079b4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b8:	2380      	movs	r3, #128	@ 0x80
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	61bb      	str	r3, [r7, #24]
        break;
 80079be:	e006      	b.n	80079ce <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079c4:	231e      	movs	r3, #30
 80079c6:	18fb      	adds	r3, r7, r3
 80079c8:	2201      	movs	r2, #1
 80079ca:	701a      	strb	r2, [r3, #0]
        break;
 80079cc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01e      	beq.n	8007a12 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	085a      	lsrs	r2, r3, #1
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	18d2      	adds	r2, r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	0019      	movs	r1, r3
 80079e4:	0010      	movs	r0, r2
 80079e6:	f7f8 fba9 	bl	800013c <__udivsi3>
 80079ea:	0003      	movs	r3, r0
 80079ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2b0f      	cmp	r3, #15
 80079f2:	d90a      	bls.n	8007a0a <UART_SetConfig+0x3ae>
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	2380      	movs	r3, #128	@ 0x80
 80079f8:	025b      	lsls	r3, r3, #9
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d205      	bcs.n	8007a0a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60da      	str	r2, [r3, #12]
 8007a08:	e003      	b.n	8007a12 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007a0a:	231e      	movs	r3, #30
 8007a0c:	18fb      	adds	r3, r7, r3
 8007a0e:	2201      	movs	r2, #1
 8007a10:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007a1e:	231e      	movs	r3, #30
 8007a20:	18fb      	adds	r3, r7, r3
 8007a22:	781b      	ldrb	r3, [r3, #0]
}
 8007a24:	0018      	movs	r0, r3
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b008      	add	sp, #32
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a38:	2208      	movs	r2, #8
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	d00b      	beq.n	8007a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	4a4a      	ldr	r2, [pc, #296]	@ (8007b70 <UART_AdvFeatureConfig+0x144>)
 8007a46:	4013      	ands	r3, r2
 8007a48:	0019      	movs	r1, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d00b      	beq.n	8007a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4a43      	ldr	r2, [pc, #268]	@ (8007b74 <UART_AdvFeatureConfig+0x148>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	0019      	movs	r1, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	4013      	ands	r3, r2
 8007a80:	d00b      	beq.n	8007a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	4a3b      	ldr	r2, [pc, #236]	@ (8007b78 <UART_AdvFeatureConfig+0x14c>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	0019      	movs	r1, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	d00b      	beq.n	8007abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	4a34      	ldr	r2, [pc, #208]	@ (8007b7c <UART_AdvFeatureConfig+0x150>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	0019      	movs	r1, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	2210      	movs	r2, #16
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	4a2c      	ldr	r2, [pc, #176]	@ (8007b80 <UART_AdvFeatureConfig+0x154>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	0019      	movs	r1, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	d00b      	beq.n	8007b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	4a25      	ldr	r2, [pc, #148]	@ (8007b84 <UART_AdvFeatureConfig+0x158>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	0019      	movs	r1, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	2240      	movs	r2, #64	@ 0x40
 8007b06:	4013      	ands	r3, r2
 8007b08:	d01d      	beq.n	8007b46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4a1d      	ldr	r2, [pc, #116]	@ (8007b88 <UART_AdvFeatureConfig+0x15c>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	0019      	movs	r1, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b26:	2380      	movs	r3, #128	@ 0x80
 8007b28:	035b      	lsls	r3, r3, #13
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d10b      	bne.n	8007b46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	4a15      	ldr	r2, [pc, #84]	@ (8007b8c <UART_AdvFeatureConfig+0x160>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	0019      	movs	r1, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4a:	2280      	movs	r2, #128	@ 0x80
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4a0e      	ldr	r2, [pc, #56]	@ (8007b90 <UART_AdvFeatureConfig+0x164>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	0019      	movs	r1, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
  }
}
 8007b68:	46c0      	nop			@ (mov r8, r8)
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	ffff7fff 	.word	0xffff7fff
 8007b74:	fffdffff 	.word	0xfffdffff
 8007b78:	fffeffff 	.word	0xfffeffff
 8007b7c:	fffbffff 	.word	0xfffbffff
 8007b80:	ffffefff 	.word	0xffffefff
 8007b84:	ffffdfff 	.word	0xffffdfff
 8007b88:	ffefffff 	.word	0xffefffff
 8007b8c:	ff9fffff 	.word	0xff9fffff
 8007b90:	fff7ffff 	.word	0xfff7ffff

08007b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b092      	sub	sp, #72	@ 0x48
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2284      	movs	r2, #132	@ 0x84
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ba4:	f7fd fc58 	bl	8005458 <HAL_GetTick>
 8007ba8:	0003      	movs	r3, r0
 8007baa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d12c      	bne.n	8007c14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bbc:	2280      	movs	r2, #128	@ 0x80
 8007bbe:	0391      	lsls	r1, r2, #14
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	4a46      	ldr	r2, [pc, #280]	@ (8007cdc <UART_CheckIdleState+0x148>)
 8007bc4:	9200      	str	r2, [sp, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f000 f88c 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007bcc:	1e03      	subs	r3, r0, #0
 8007bce:	d021      	beq.n	8007c14 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bda:	2301      	movs	r3, #1
 8007bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be0:	f383 8810 	msr	PRIMASK, r3
}
 8007be4:	46c0      	nop			@ (mov r8, r8)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2180      	movs	r1, #128	@ 0x80
 8007bf2:	438a      	bics	r2, r1
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfc:	f383 8810 	msr	PRIMASK, r3
}
 8007c00:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2278      	movs	r2, #120	@ 0x78
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e05f      	b.n	8007cd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d146      	bne.n	8007cb0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c24:	2280      	movs	r2, #128	@ 0x80
 8007c26:	03d1      	lsls	r1, r2, #15
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8007cdc <UART_CheckIdleState+0x148>)
 8007c2c:	9200      	str	r2, [sp, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f000 f858 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007c34:	1e03      	subs	r3, r0, #0
 8007c36:	d03b      	beq.n	8007cb0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c38:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c42:	2301      	movs	r3, #1
 8007c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f383 8810 	msr	PRIMASK, r3
}
 8007c4c:	46c0      	nop			@ (mov r8, r8)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4921      	ldr	r1, [pc, #132]	@ (8007ce0 <UART_CheckIdleState+0x14c>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f383 8810 	msr	PRIMASK, r3
}
 8007c68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c72:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c74:	2301      	movs	r3, #1
 8007c76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f383 8810 	msr	PRIMASK, r3
}
 8007c7e:	46c0      	nop			@ (mov r8, r8)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	438a      	bics	r2, r1
 8007c8e:	609a      	str	r2, [r3, #8]
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	f383 8810 	msr	PRIMASK, r3
}
 8007c9a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2280      	movs	r2, #128	@ 0x80
 8007ca0:	2120      	movs	r1, #32
 8007ca2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2278      	movs	r2, #120	@ 0x78
 8007ca8:	2100      	movs	r1, #0
 8007caa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e011      	b.n	8007cd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2280      	movs	r2, #128	@ 0x80
 8007cba:	2120      	movs	r1, #32
 8007cbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2278      	movs	r2, #120	@ 0x78
 8007cce:	2100      	movs	r1, #0
 8007cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	b010      	add	sp, #64	@ 0x40
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	01ffffff 	.word	0x01ffffff
 8007ce0:	fffffedf 	.word	0xfffffedf

08007ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	1dfb      	adds	r3, r7, #7
 8007cf2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf4:	e051      	b.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	d04e      	beq.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cfc:	f7fd fbac 	bl	8005458 <HAL_GetTick>
 8007d00:	0002      	movs	r2, r0
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d302      	bcc.n	8007d12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e051      	b.n	8007dba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d03b      	beq.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b80      	cmp	r3, #128	@ 0x80
 8007d26:	d038      	beq.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b40      	cmp	r3, #64	@ 0x40
 8007d2c:	d035      	beq.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	2208      	movs	r2, #8
 8007d36:	4013      	ands	r3, r2
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d111      	bne.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2208      	movs	r2, #8
 8007d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	0018      	movs	r0, r3
 8007d48:	f000 f83c 	bl	8007dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2284      	movs	r2, #132	@ 0x84
 8007d50:	2108      	movs	r1, #8
 8007d52:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2278      	movs	r2, #120	@ 0x78
 8007d58:	2100      	movs	r1, #0
 8007d5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e02c      	b.n	8007dba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69da      	ldr	r2, [r3, #28]
 8007d66:	2380      	movs	r3, #128	@ 0x80
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	401a      	ands	r2, r3
 8007d6c:	2380      	movs	r3, #128	@ 0x80
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d112      	bne.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2280      	movs	r2, #128	@ 0x80
 8007d7a:	0112      	lsls	r2, r2, #4
 8007d7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	0018      	movs	r0, r3
 8007d82:	f000 f81f 	bl	8007dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2284      	movs	r2, #132	@ 0x84
 8007d8a:	2120      	movs	r1, #32
 8007d8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2278      	movs	r2, #120	@ 0x78
 8007d92:	2100      	movs	r1, #0
 8007d94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e00f      	b.n	8007dba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	4013      	ands	r3, r2
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	425a      	negs	r2, r3
 8007daa:	4153      	adcs	r3, r2
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	001a      	movs	r2, r3
 8007db0:	1dfb      	adds	r3, r7, #7
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d09e      	beq.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	0018      	movs	r0, r3
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	b004      	add	sp, #16
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08e      	sub	sp, #56	@ 0x38
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8007dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8007dd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	f383 8810 	msr	PRIMASK, r3
}
 8007de0:	46c0      	nop			@ (mov r8, r8)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4926      	ldr	r1, [pc, #152]	@ (8007e88 <UART_EndRxTransfer+0xc4>)
 8007dee:	400a      	ands	r2, r1
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	f383 8810 	msr	PRIMASK, r3
}
 8007dfc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8007e02:	623b      	str	r3, [r7, #32]
  return(result);
 8007e04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e08:	2301      	movs	r3, #1
 8007e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0e:	f383 8810 	msr	PRIMASK, r3
}
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2101      	movs	r1, #1
 8007e20:	438a      	bics	r2, r1
 8007e22:	609a      	str	r2, [r3, #8]
 8007e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	f383 8810 	msr	PRIMASK, r3
}
 8007e2e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d118      	bne.n	8007e6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e38:	f3ef 8310 	mrs	r3, PRIMASK
 8007e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e42:	2301      	movs	r3, #1
 8007e44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f383 8810 	msr	PRIMASK, r3
}
 8007e4c:	46c0      	nop			@ (mov r8, r8)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2110      	movs	r1, #16
 8007e5a:	438a      	bics	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f383 8810 	msr	PRIMASK, r3
}
 8007e68:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2280      	movs	r2, #128	@ 0x80
 8007e6e:	2120      	movs	r1, #32
 8007e70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e7e:	46c0      	nop			@ (mov r8, r8)
 8007e80:	46bd      	mov	sp, r7
 8007e82:	b00e      	add	sp, #56	@ 0x38
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	46c0      	nop			@ (mov r8, r8)
 8007e88:	fffffedf 	.word	0xfffffedf

08007e8c <__cvt>:
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	001f      	movs	r7, r3
 8007e90:	2300      	movs	r3, #0
 8007e92:	0016      	movs	r6, r2
 8007e94:	b08b      	sub	sp, #44	@ 0x2c
 8007e96:	429f      	cmp	r7, r3
 8007e98:	da04      	bge.n	8007ea4 <__cvt+0x18>
 8007e9a:	2180      	movs	r1, #128	@ 0x80
 8007e9c:	0609      	lsls	r1, r1, #24
 8007e9e:	187b      	adds	r3, r7, r1
 8007ea0:	001f      	movs	r7, r3
 8007ea2:	232d      	movs	r3, #45	@ 0x2d
 8007ea4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ea6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007ea8:	7013      	strb	r3, [r2, #0]
 8007eaa:	2320      	movs	r3, #32
 8007eac:	2203      	movs	r2, #3
 8007eae:	439d      	bics	r5, r3
 8007eb0:	2d46      	cmp	r5, #70	@ 0x46
 8007eb2:	d007      	beq.n	8007ec4 <__cvt+0x38>
 8007eb4:	002b      	movs	r3, r5
 8007eb6:	3b45      	subs	r3, #69	@ 0x45
 8007eb8:	4259      	negs	r1, r3
 8007eba:	414b      	adcs	r3, r1
 8007ebc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	18cb      	adds	r3, r1, r3
 8007ec2:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ec4:	ab09      	add	r3, sp, #36	@ 0x24
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	ab08      	add	r3, sp, #32
 8007eca:	9303      	str	r3, [sp, #12]
 8007ecc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ece:	9200      	str	r2, [sp, #0]
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ed4:	0032      	movs	r2, r6
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	003b      	movs	r3, r7
 8007eda:	f000 fe89 	bl	8008bf0 <_dtoa_r>
 8007ede:	0004      	movs	r4, r0
 8007ee0:	2d47      	cmp	r5, #71	@ 0x47
 8007ee2:	d11b      	bne.n	8007f1c <__cvt+0x90>
 8007ee4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ee6:	07db      	lsls	r3, r3, #31
 8007ee8:	d511      	bpl.n	8007f0e <__cvt+0x82>
 8007eea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007eec:	18c3      	adds	r3, r0, r3
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	0030      	movs	r0, r6
 8007ef6:	0039      	movs	r1, r7
 8007ef8:	f7f8 faa6 	bl	8000448 <__aeabi_dcmpeq>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d001      	beq.n	8007f04 <__cvt+0x78>
 8007f00:	9b07      	ldr	r3, [sp, #28]
 8007f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f04:	2230      	movs	r2, #48	@ 0x30
 8007f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f08:	9907      	ldr	r1, [sp, #28]
 8007f0a:	428b      	cmp	r3, r1
 8007f0c:	d320      	bcc.n	8007f50 <__cvt+0xc4>
 8007f0e:	0020      	movs	r0, r4
 8007f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f12:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007f14:	1b1b      	subs	r3, r3, r4
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	b00b      	add	sp, #44	@ 0x2c
 8007f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f1e:	18c3      	adds	r3, r0, r3
 8007f20:	9307      	str	r3, [sp, #28]
 8007f22:	2d46      	cmp	r5, #70	@ 0x46
 8007f24:	d1e4      	bne.n	8007ef0 <__cvt+0x64>
 8007f26:	7803      	ldrb	r3, [r0, #0]
 8007f28:	2b30      	cmp	r3, #48	@ 0x30
 8007f2a:	d10c      	bne.n	8007f46 <__cvt+0xba>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2300      	movs	r3, #0
 8007f30:	0030      	movs	r0, r6
 8007f32:	0039      	movs	r1, r7
 8007f34:	f7f8 fa88 	bl	8000448 <__aeabi_dcmpeq>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d104      	bne.n	8007f46 <__cvt+0xba>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007f40:	1a9b      	subs	r3, r3, r2
 8007f42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f48:	9a07      	ldr	r2, [sp, #28]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	18d3      	adds	r3, r2, r3
 8007f4e:	e7ce      	b.n	8007eee <__cvt+0x62>
 8007f50:	1c59      	adds	r1, r3, #1
 8007f52:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	e7d6      	b.n	8007f06 <__cvt+0x7a>

08007f58 <__exponent>:
 8007f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f5a:	232b      	movs	r3, #43	@ 0x2b
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	0005      	movs	r5, r0
 8007f60:	1e0c      	subs	r4, r1, #0
 8007f62:	7002      	strb	r2, [r0, #0]
 8007f64:	da01      	bge.n	8007f6a <__exponent+0x12>
 8007f66:	424c      	negs	r4, r1
 8007f68:	3302      	adds	r3, #2
 8007f6a:	706b      	strb	r3, [r5, #1]
 8007f6c:	2c09      	cmp	r4, #9
 8007f6e:	dd2c      	ble.n	8007fca <__exponent+0x72>
 8007f70:	ab02      	add	r3, sp, #8
 8007f72:	1dde      	adds	r6, r3, #7
 8007f74:	0020      	movs	r0, r4
 8007f76:	210a      	movs	r1, #10
 8007f78:	f7f8 fa50 	bl	800041c <__aeabi_idivmod>
 8007f7c:	0037      	movs	r7, r6
 8007f7e:	3130      	adds	r1, #48	@ 0x30
 8007f80:	3e01      	subs	r6, #1
 8007f82:	0020      	movs	r0, r4
 8007f84:	7031      	strb	r1, [r6, #0]
 8007f86:	210a      	movs	r1, #10
 8007f88:	9401      	str	r4, [sp, #4]
 8007f8a:	f7f8 f961 	bl	8000250 <__divsi3>
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	0004      	movs	r4, r0
 8007f92:	2b63      	cmp	r3, #99	@ 0x63
 8007f94:	dcee      	bgt.n	8007f74 <__exponent+0x1c>
 8007f96:	1eba      	subs	r2, r7, #2
 8007f98:	1ca8      	adds	r0, r5, #2
 8007f9a:	0001      	movs	r1, r0
 8007f9c:	0013      	movs	r3, r2
 8007f9e:	3430      	adds	r4, #48	@ 0x30
 8007fa0:	7014      	strb	r4, [r2, #0]
 8007fa2:	ac02      	add	r4, sp, #8
 8007fa4:	3407      	adds	r4, #7
 8007fa6:	429c      	cmp	r4, r3
 8007fa8:	d80a      	bhi.n	8007fc0 <__exponent+0x68>
 8007faa:	2300      	movs	r3, #0
 8007fac:	4294      	cmp	r4, r2
 8007fae:	d303      	bcc.n	8007fb8 <__exponent+0x60>
 8007fb0:	3309      	adds	r3, #9
 8007fb2:	aa02      	add	r2, sp, #8
 8007fb4:	189b      	adds	r3, r3, r2
 8007fb6:	1bdb      	subs	r3, r3, r7
 8007fb8:	18c0      	adds	r0, r0, r3
 8007fba:	1b40      	subs	r0, r0, r5
 8007fbc:	b005      	add	sp, #20
 8007fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc0:	781c      	ldrb	r4, [r3, #0]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	700c      	strb	r4, [r1, #0]
 8007fc6:	3101      	adds	r1, #1
 8007fc8:	e7eb      	b.n	8007fa2 <__exponent+0x4a>
 8007fca:	2330      	movs	r3, #48	@ 0x30
 8007fcc:	18e4      	adds	r4, r4, r3
 8007fce:	70ab      	strb	r3, [r5, #2]
 8007fd0:	1d28      	adds	r0, r5, #4
 8007fd2:	70ec      	strb	r4, [r5, #3]
 8007fd4:	e7f1      	b.n	8007fba <__exponent+0x62>
	...

08007fd8 <_printf_float>:
 8007fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fda:	b097      	sub	sp, #92	@ 0x5c
 8007fdc:	000d      	movs	r5, r1
 8007fde:	920a      	str	r2, [sp, #40]	@ 0x28
 8007fe0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8007fe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fe4:	9009      	str	r0, [sp, #36]	@ 0x24
 8007fe6:	f000 fceb 	bl	80089c0 <_localeconv_r>
 8007fea:	6803      	ldr	r3, [r0, #0]
 8007fec:	0018      	movs	r0, r3
 8007fee:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ff0:	f7f8 f888 	bl	8000104 <strlen>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007ff8:	9314      	str	r3, [sp, #80]	@ 0x50
 8007ffa:	7e2b      	ldrb	r3, [r5, #24]
 8007ffc:	2207      	movs	r2, #7
 8007ffe:	930c      	str	r3, [sp, #48]	@ 0x30
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	930e      	str	r3, [sp, #56]	@ 0x38
 8008004:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	05c9      	lsls	r1, r1, #23
 800800a:	d545      	bpl.n	8008098 <_printf_float+0xc0>
 800800c:	189b      	adds	r3, r3, r2
 800800e:	4393      	bics	r3, r2
 8008010:	001a      	movs	r2, r3
 8008012:	3208      	adds	r2, #8
 8008014:	6022      	str	r2, [r4, #0]
 8008016:	2201      	movs	r2, #1
 8008018:	681e      	ldr	r6, [r3, #0]
 800801a:	685f      	ldr	r7, [r3, #4]
 800801c:	007b      	lsls	r3, r7, #1
 800801e:	085b      	lsrs	r3, r3, #1
 8008020:	9311      	str	r3, [sp, #68]	@ 0x44
 8008022:	9610      	str	r6, [sp, #64]	@ 0x40
 8008024:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008026:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008028:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800802a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800802c:	4ba7      	ldr	r3, [pc, #668]	@ (80082cc <_printf_float+0x2f4>)
 800802e:	4252      	negs	r2, r2
 8008030:	f7fa fa2e 	bl	8002490 <__aeabi_dcmpun>
 8008034:	2800      	cmp	r0, #0
 8008036:	d131      	bne.n	800809c <_printf_float+0xc4>
 8008038:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800803a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800803c:	2201      	movs	r2, #1
 800803e:	4ba3      	ldr	r3, [pc, #652]	@ (80082cc <_printf_float+0x2f4>)
 8008040:	4252      	negs	r2, r2
 8008042:	f7f8 fa11 	bl	8000468 <__aeabi_dcmple>
 8008046:	2800      	cmp	r0, #0
 8008048:	d128      	bne.n	800809c <_printf_float+0xc4>
 800804a:	2200      	movs	r2, #0
 800804c:	2300      	movs	r3, #0
 800804e:	0030      	movs	r0, r6
 8008050:	0039      	movs	r1, r7
 8008052:	f7f8 f9ff 	bl	8000454 <__aeabi_dcmplt>
 8008056:	2800      	cmp	r0, #0
 8008058:	d003      	beq.n	8008062 <_printf_float+0x8a>
 800805a:	002b      	movs	r3, r5
 800805c:	222d      	movs	r2, #45	@ 0x2d
 800805e:	3343      	adds	r3, #67	@ 0x43
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008064:	4f9a      	ldr	r7, [pc, #616]	@ (80082d0 <_printf_float+0x2f8>)
 8008066:	2b47      	cmp	r3, #71	@ 0x47
 8008068:	d800      	bhi.n	800806c <_printf_float+0x94>
 800806a:	4f9a      	ldr	r7, [pc, #616]	@ (80082d4 <_printf_float+0x2fc>)
 800806c:	2303      	movs	r3, #3
 800806e:	2400      	movs	r4, #0
 8008070:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008072:	612b      	str	r3, [r5, #16]
 8008074:	3301      	adds	r3, #1
 8008076:	439a      	bics	r2, r3
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800807c:	0029      	movs	r1, r5
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008084:	aa15      	add	r2, sp, #84	@ 0x54
 8008086:	f000 f9e5 	bl	8008454 <_printf_common>
 800808a:	3001      	adds	r0, #1
 800808c:	d000      	beq.n	8008090 <_printf_float+0xb8>
 800808e:	e09e      	b.n	80081ce <_printf_float+0x1f6>
 8008090:	2001      	movs	r0, #1
 8008092:	4240      	negs	r0, r0
 8008094:	b017      	add	sp, #92	@ 0x5c
 8008096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008098:	3307      	adds	r3, #7
 800809a:	e7b8      	b.n	800800e <_printf_float+0x36>
 800809c:	0032      	movs	r2, r6
 800809e:	003b      	movs	r3, r7
 80080a0:	0030      	movs	r0, r6
 80080a2:	0039      	movs	r1, r7
 80080a4:	f7fa f9f4 	bl	8002490 <__aeabi_dcmpun>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d00b      	beq.n	80080c4 <_printf_float+0xec>
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	da03      	bge.n	80080b8 <_printf_float+0xe0>
 80080b0:	002b      	movs	r3, r5
 80080b2:	222d      	movs	r2, #45	@ 0x2d
 80080b4:	3343      	adds	r3, #67	@ 0x43
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080ba:	4f87      	ldr	r7, [pc, #540]	@ (80082d8 <_printf_float+0x300>)
 80080bc:	2b47      	cmp	r3, #71	@ 0x47
 80080be:	d8d5      	bhi.n	800806c <_printf_float+0x94>
 80080c0:	4f86      	ldr	r7, [pc, #536]	@ (80082dc <_printf_float+0x304>)
 80080c2:	e7d3      	b.n	800806c <_printf_float+0x94>
 80080c4:	2220      	movs	r2, #32
 80080c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80080c8:	686b      	ldr	r3, [r5, #4]
 80080ca:	4394      	bics	r4, r2
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	d146      	bne.n	800815e <_printf_float+0x186>
 80080d0:	3307      	adds	r3, #7
 80080d2:	606b      	str	r3, [r5, #4]
 80080d4:	2380      	movs	r3, #128	@ 0x80
 80080d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	4313      	orrs	r3, r2
 80080dc:	2200      	movs	r2, #0
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	9206      	str	r2, [sp, #24]
 80080e2:	aa14      	add	r2, sp, #80	@ 0x50
 80080e4:	9205      	str	r2, [sp, #20]
 80080e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80080e8:	a90a      	add	r1, sp, #40	@ 0x28
 80080ea:	9204      	str	r2, [sp, #16]
 80080ec:	aa13      	add	r2, sp, #76	@ 0x4c
 80080ee:	9203      	str	r2, [sp, #12]
 80080f0:	2223      	movs	r2, #35	@ 0x23
 80080f2:	1852      	adds	r2, r2, r1
 80080f4:	9202      	str	r2, [sp, #8]
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	686b      	ldr	r3, [r5, #4]
 80080fa:	0032      	movs	r2, r6
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008100:	003b      	movs	r3, r7
 8008102:	f7ff fec3 	bl	8007e8c <__cvt>
 8008106:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008108:	0007      	movs	r7, r0
 800810a:	2c47      	cmp	r4, #71	@ 0x47
 800810c:	d12d      	bne.n	800816a <_printf_float+0x192>
 800810e:	1cd3      	adds	r3, r2, #3
 8008110:	db02      	blt.n	8008118 <_printf_float+0x140>
 8008112:	686b      	ldr	r3, [r5, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	dd47      	ble.n	80081a8 <_printf_float+0x1d0>
 8008118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800811a:	3b02      	subs	r3, #2
 800811c:	b2db      	uxtb	r3, r3
 800811e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008120:	0028      	movs	r0, r5
 8008122:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008124:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008126:	3901      	subs	r1, #1
 8008128:	3050      	adds	r0, #80	@ 0x50
 800812a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800812c:	f7ff ff14 	bl	8007f58 <__exponent>
 8008130:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008132:	0004      	movs	r4, r0
 8008134:	1813      	adds	r3, r2, r0
 8008136:	612b      	str	r3, [r5, #16]
 8008138:	2a01      	cmp	r2, #1
 800813a:	dc02      	bgt.n	8008142 <_printf_float+0x16a>
 800813c:	682a      	ldr	r2, [r5, #0]
 800813e:	07d2      	lsls	r2, r2, #31
 8008140:	d501      	bpl.n	8008146 <_printf_float+0x16e>
 8008142:	3301      	adds	r3, #1
 8008144:	612b      	str	r3, [r5, #16]
 8008146:	2323      	movs	r3, #35	@ 0x23
 8008148:	aa0a      	add	r2, sp, #40	@ 0x28
 800814a:	189b      	adds	r3, r3, r2
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d100      	bne.n	8008154 <_printf_float+0x17c>
 8008152:	e792      	b.n	800807a <_printf_float+0xa2>
 8008154:	002b      	movs	r3, r5
 8008156:	222d      	movs	r2, #45	@ 0x2d
 8008158:	3343      	adds	r3, #67	@ 0x43
 800815a:	701a      	strb	r2, [r3, #0]
 800815c:	e78d      	b.n	800807a <_printf_float+0xa2>
 800815e:	2c47      	cmp	r4, #71	@ 0x47
 8008160:	d1b8      	bne.n	80080d4 <_printf_float+0xfc>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1b6      	bne.n	80080d4 <_printf_float+0xfc>
 8008166:	3301      	adds	r3, #1
 8008168:	e7b3      	b.n	80080d2 <_printf_float+0xfa>
 800816a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800816c:	2b65      	cmp	r3, #101	@ 0x65
 800816e:	d9d7      	bls.n	8008120 <_printf_float+0x148>
 8008170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008172:	2b66      	cmp	r3, #102	@ 0x66
 8008174:	d11a      	bne.n	80081ac <_printf_float+0x1d4>
 8008176:	686b      	ldr	r3, [r5, #4]
 8008178:	2a00      	cmp	r2, #0
 800817a:	dd09      	ble.n	8008190 <_printf_float+0x1b8>
 800817c:	612a      	str	r2, [r5, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d102      	bne.n	8008188 <_printf_float+0x1b0>
 8008182:	6829      	ldr	r1, [r5, #0]
 8008184:	07c9      	lsls	r1, r1, #31
 8008186:	d50b      	bpl.n	80081a0 <_printf_float+0x1c8>
 8008188:	3301      	adds	r3, #1
 800818a:	189b      	adds	r3, r3, r2
 800818c:	612b      	str	r3, [r5, #16]
 800818e:	e007      	b.n	80081a0 <_printf_float+0x1c8>
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <_printf_float+0x1c4>
 8008194:	2201      	movs	r2, #1
 8008196:	6829      	ldr	r1, [r5, #0]
 8008198:	4211      	tst	r1, r2
 800819a:	d000      	beq.n	800819e <_printf_float+0x1c6>
 800819c:	1c9a      	adds	r2, r3, #2
 800819e:	612a      	str	r2, [r5, #16]
 80081a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081a2:	2400      	movs	r4, #0
 80081a4:	65ab      	str	r3, [r5, #88]	@ 0x58
 80081a6:	e7ce      	b.n	8008146 <_printf_float+0x16e>
 80081a8:	2367      	movs	r3, #103	@ 0x67
 80081aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80081ac:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80081ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081b0:	4299      	cmp	r1, r3
 80081b2:	db06      	blt.n	80081c2 <_printf_float+0x1ea>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	6129      	str	r1, [r5, #16]
 80081b8:	07db      	lsls	r3, r3, #31
 80081ba:	d5f1      	bpl.n	80081a0 <_printf_float+0x1c8>
 80081bc:	3101      	adds	r1, #1
 80081be:	6129      	str	r1, [r5, #16]
 80081c0:	e7ee      	b.n	80081a0 <_printf_float+0x1c8>
 80081c2:	2201      	movs	r2, #1
 80081c4:	2900      	cmp	r1, #0
 80081c6:	dce0      	bgt.n	800818a <_printf_float+0x1b2>
 80081c8:	1892      	adds	r2, r2, r2
 80081ca:	1a52      	subs	r2, r2, r1
 80081cc:	e7dd      	b.n	800818a <_printf_float+0x1b2>
 80081ce:	682a      	ldr	r2, [r5, #0]
 80081d0:	0553      	lsls	r3, r2, #21
 80081d2:	d408      	bmi.n	80081e6 <_printf_float+0x20e>
 80081d4:	692b      	ldr	r3, [r5, #16]
 80081d6:	003a      	movs	r2, r7
 80081d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80081de:	47a0      	blx	r4
 80081e0:	3001      	adds	r0, #1
 80081e2:	d129      	bne.n	8008238 <_printf_float+0x260>
 80081e4:	e754      	b.n	8008090 <_printf_float+0xb8>
 80081e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081e8:	2b65      	cmp	r3, #101	@ 0x65
 80081ea:	d800      	bhi.n	80081ee <_printf_float+0x216>
 80081ec:	e0db      	b.n	80083a6 <_printf_float+0x3ce>
 80081ee:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80081f0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80081f2:	2200      	movs	r2, #0
 80081f4:	2300      	movs	r3, #0
 80081f6:	f7f8 f927 	bl	8000448 <__aeabi_dcmpeq>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d033      	beq.n	8008266 <_printf_float+0x28e>
 80081fe:	2301      	movs	r3, #1
 8008200:	4a37      	ldr	r2, [pc, #220]	@ (80082e0 <_printf_float+0x308>)
 8008202:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008204:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008206:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008208:	47a0      	blx	r4
 800820a:	3001      	adds	r0, #1
 800820c:	d100      	bne.n	8008210 <_printf_float+0x238>
 800820e:	e73f      	b.n	8008090 <_printf_float+0xb8>
 8008210:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008212:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008214:	42b3      	cmp	r3, r6
 8008216:	db02      	blt.n	800821e <_printf_float+0x246>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	07db      	lsls	r3, r3, #31
 800821c:	d50c      	bpl.n	8008238 <_printf_float+0x260>
 800821e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008222:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008224:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008228:	47a0      	blx	r4
 800822a:	2400      	movs	r4, #0
 800822c:	3001      	adds	r0, #1
 800822e:	d100      	bne.n	8008232 <_printf_float+0x25a>
 8008230:	e72e      	b.n	8008090 <_printf_float+0xb8>
 8008232:	1e73      	subs	r3, r6, #1
 8008234:	42a3      	cmp	r3, r4
 8008236:	dc0a      	bgt.n	800824e <_printf_float+0x276>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	079b      	lsls	r3, r3, #30
 800823c:	d500      	bpl.n	8008240 <_printf_float+0x268>
 800823e:	e106      	b.n	800844e <_printf_float+0x476>
 8008240:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008242:	68e8      	ldr	r0, [r5, #12]
 8008244:	4298      	cmp	r0, r3
 8008246:	db00      	blt.n	800824a <_printf_float+0x272>
 8008248:	e724      	b.n	8008094 <_printf_float+0xbc>
 800824a:	0018      	movs	r0, r3
 800824c:	e722      	b.n	8008094 <_printf_float+0xbc>
 800824e:	002a      	movs	r2, r5
 8008250:	2301      	movs	r3, #1
 8008252:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008254:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008256:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008258:	321a      	adds	r2, #26
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	d100      	bne.n	8008262 <_printf_float+0x28a>
 8008260:	e716      	b.n	8008090 <_printf_float+0xb8>
 8008262:	3401      	adds	r4, #1
 8008264:	e7e5      	b.n	8008232 <_printf_float+0x25a>
 8008266:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008268:	2b00      	cmp	r3, #0
 800826a:	dc3b      	bgt.n	80082e4 <_printf_float+0x30c>
 800826c:	2301      	movs	r3, #1
 800826e:	4a1c      	ldr	r2, [pc, #112]	@ (80082e0 <_printf_float+0x308>)
 8008270:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008274:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008276:	47a0      	blx	r4
 8008278:	3001      	adds	r0, #1
 800827a:	d100      	bne.n	800827e <_printf_float+0x2a6>
 800827c:	e708      	b.n	8008090 <_printf_float+0xb8>
 800827e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008280:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008282:	4333      	orrs	r3, r6
 8008284:	d102      	bne.n	800828c <_printf_float+0x2b4>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	07db      	lsls	r3, r3, #31
 800828a:	d5d5      	bpl.n	8008238 <_printf_float+0x260>
 800828c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800828e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008290:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008294:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008296:	47a0      	blx	r4
 8008298:	2300      	movs	r3, #0
 800829a:	3001      	adds	r0, #1
 800829c:	d100      	bne.n	80082a0 <_printf_float+0x2c8>
 800829e:	e6f7      	b.n	8008090 <_printf_float+0xb8>
 80082a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80082a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082a6:	425b      	negs	r3, r3
 80082a8:	4293      	cmp	r3, r2
 80082aa:	dc01      	bgt.n	80082b0 <_printf_float+0x2d8>
 80082ac:	0033      	movs	r3, r6
 80082ae:	e792      	b.n	80081d6 <_printf_float+0x1fe>
 80082b0:	002a      	movs	r2, r5
 80082b2:	2301      	movs	r3, #1
 80082b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80082ba:	321a      	adds	r2, #26
 80082bc:	47a0      	blx	r4
 80082be:	3001      	adds	r0, #1
 80082c0:	d100      	bne.n	80082c4 <_printf_float+0x2ec>
 80082c2:	e6e5      	b.n	8008090 <_printf_float+0xb8>
 80082c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082c6:	3301      	adds	r3, #1
 80082c8:	e7ea      	b.n	80082a0 <_printf_float+0x2c8>
 80082ca:	46c0      	nop			@ (mov r8, r8)
 80082cc:	7fefffff 	.word	0x7fefffff
 80082d0:	0800b058 	.word	0x0800b058
 80082d4:	0800b054 	.word	0x0800b054
 80082d8:	0800b060 	.word	0x0800b060
 80082dc:	0800b05c 	.word	0x0800b05c
 80082e0:	0800b064 	.word	0x0800b064
 80082e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082e6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80082e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80082ea:	429e      	cmp	r6, r3
 80082ec:	dd00      	ble.n	80082f0 <_printf_float+0x318>
 80082ee:	001e      	movs	r6, r3
 80082f0:	2e00      	cmp	r6, #0
 80082f2:	dc31      	bgt.n	8008358 <_printf_float+0x380>
 80082f4:	43f3      	mvns	r3, r6
 80082f6:	2400      	movs	r4, #0
 80082f8:	17db      	asrs	r3, r3, #31
 80082fa:	4033      	ands	r3, r6
 80082fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80082fe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008300:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008302:	1af3      	subs	r3, r6, r3
 8008304:	42a3      	cmp	r3, r4
 8008306:	dc30      	bgt.n	800836a <_printf_float+0x392>
 8008308:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800830a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800830c:	429a      	cmp	r2, r3
 800830e:	dc38      	bgt.n	8008382 <_printf_float+0x3aa>
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	07db      	lsls	r3, r3, #31
 8008314:	d435      	bmi.n	8008382 <_printf_float+0x3aa>
 8008316:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800831a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800831c:	1b9b      	subs	r3, r3, r6
 800831e:	1b14      	subs	r4, r2, r4
 8008320:	429c      	cmp	r4, r3
 8008322:	dd00      	ble.n	8008326 <_printf_float+0x34e>
 8008324:	001c      	movs	r4, r3
 8008326:	2c00      	cmp	r4, #0
 8008328:	dc34      	bgt.n	8008394 <_printf_float+0x3bc>
 800832a:	43e3      	mvns	r3, r4
 800832c:	2600      	movs	r6, #0
 800832e:	17db      	asrs	r3, r3, #31
 8008330:	401c      	ands	r4, r3
 8008332:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008334:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	1b1b      	subs	r3, r3, r4
 800833a:	42b3      	cmp	r3, r6
 800833c:	dc00      	bgt.n	8008340 <_printf_float+0x368>
 800833e:	e77b      	b.n	8008238 <_printf_float+0x260>
 8008340:	002a      	movs	r2, r5
 8008342:	2301      	movs	r3, #1
 8008344:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008348:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800834a:	321a      	adds	r2, #26
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	d100      	bne.n	8008354 <_printf_float+0x37c>
 8008352:	e69d      	b.n	8008090 <_printf_float+0xb8>
 8008354:	3601      	adds	r6, #1
 8008356:	e7ec      	b.n	8008332 <_printf_float+0x35a>
 8008358:	0033      	movs	r3, r6
 800835a:	003a      	movs	r2, r7
 800835c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800835e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008360:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008362:	47a0      	blx	r4
 8008364:	3001      	adds	r0, #1
 8008366:	d1c5      	bne.n	80082f4 <_printf_float+0x31c>
 8008368:	e692      	b.n	8008090 <_printf_float+0xb8>
 800836a:	002a      	movs	r2, r5
 800836c:	2301      	movs	r3, #1
 800836e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008370:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008372:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008374:	321a      	adds	r2, #26
 8008376:	47b0      	blx	r6
 8008378:	3001      	adds	r0, #1
 800837a:	d100      	bne.n	800837e <_printf_float+0x3a6>
 800837c:	e688      	b.n	8008090 <_printf_float+0xb8>
 800837e:	3401      	adds	r4, #1
 8008380:	e7bd      	b.n	80082fe <_printf_float+0x326>
 8008382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008384:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008386:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008388:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800838a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800838c:	47a0      	blx	r4
 800838e:	3001      	adds	r0, #1
 8008390:	d1c1      	bne.n	8008316 <_printf_float+0x33e>
 8008392:	e67d      	b.n	8008090 <_printf_float+0xb8>
 8008394:	19ba      	adds	r2, r7, r6
 8008396:	0023      	movs	r3, r4
 8008398:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800839a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800839c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800839e:	47b0      	blx	r6
 80083a0:	3001      	adds	r0, #1
 80083a2:	d1c2      	bne.n	800832a <_printf_float+0x352>
 80083a4:	e674      	b.n	8008090 <_printf_float+0xb8>
 80083a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	dc02      	bgt.n	80083b4 <_printf_float+0x3dc>
 80083ae:	2301      	movs	r3, #1
 80083b0:	421a      	tst	r2, r3
 80083b2:	d039      	beq.n	8008428 <_printf_float+0x450>
 80083b4:	2301      	movs	r3, #1
 80083b6:	003a      	movs	r2, r7
 80083b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80083be:	47b0      	blx	r6
 80083c0:	3001      	adds	r0, #1
 80083c2:	d100      	bne.n	80083c6 <_printf_float+0x3ee>
 80083c4:	e664      	b.n	8008090 <_printf_float+0xb8>
 80083c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80083d0:	47b0      	blx	r6
 80083d2:	3001      	adds	r0, #1
 80083d4:	d100      	bne.n	80083d8 <_printf_float+0x400>
 80083d6:	e65b      	b.n	8008090 <_printf_float+0xb8>
 80083d8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80083da:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80083dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083de:	2200      	movs	r2, #0
 80083e0:	3b01      	subs	r3, #1
 80083e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80083e4:	2300      	movs	r3, #0
 80083e6:	f7f8 f82f 	bl	8000448 <__aeabi_dcmpeq>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d11a      	bne.n	8008424 <_printf_float+0x44c>
 80083ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083f0:	1c7a      	adds	r2, r7, #1
 80083f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80083f8:	47b0      	blx	r6
 80083fa:	3001      	adds	r0, #1
 80083fc:	d10e      	bne.n	800841c <_printf_float+0x444>
 80083fe:	e647      	b.n	8008090 <_printf_float+0xb8>
 8008400:	002a      	movs	r2, r5
 8008402:	2301      	movs	r3, #1
 8008404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008408:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800840a:	321a      	adds	r2, #26
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	d100      	bne.n	8008414 <_printf_float+0x43c>
 8008412:	e63d      	b.n	8008090 <_printf_float+0xb8>
 8008414:	3601      	adds	r6, #1
 8008416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008418:	429e      	cmp	r6, r3
 800841a:	dbf1      	blt.n	8008400 <_printf_float+0x428>
 800841c:	002a      	movs	r2, r5
 800841e:	0023      	movs	r3, r4
 8008420:	3250      	adds	r2, #80	@ 0x50
 8008422:	e6d9      	b.n	80081d8 <_printf_float+0x200>
 8008424:	2600      	movs	r6, #0
 8008426:	e7f6      	b.n	8008416 <_printf_float+0x43e>
 8008428:	003a      	movs	r2, r7
 800842a:	e7e2      	b.n	80083f2 <_printf_float+0x41a>
 800842c:	002a      	movs	r2, r5
 800842e:	2301      	movs	r3, #1
 8008430:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008434:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008436:	3219      	adds	r2, #25
 8008438:	47b0      	blx	r6
 800843a:	3001      	adds	r0, #1
 800843c:	d100      	bne.n	8008440 <_printf_float+0x468>
 800843e:	e627      	b.n	8008090 <_printf_float+0xb8>
 8008440:	3401      	adds	r4, #1
 8008442:	68eb      	ldr	r3, [r5, #12]
 8008444:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	42a3      	cmp	r3, r4
 800844a:	dcef      	bgt.n	800842c <_printf_float+0x454>
 800844c:	e6f8      	b.n	8008240 <_printf_float+0x268>
 800844e:	2400      	movs	r4, #0
 8008450:	e7f7      	b.n	8008442 <_printf_float+0x46a>
 8008452:	46c0      	nop			@ (mov r8, r8)

08008454 <_printf_common>:
 8008454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008456:	0016      	movs	r6, r2
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	688a      	ldr	r2, [r1, #8]
 800845c:	690b      	ldr	r3, [r1, #16]
 800845e:	000c      	movs	r4, r1
 8008460:	9000      	str	r0, [sp, #0]
 8008462:	4293      	cmp	r3, r2
 8008464:	da00      	bge.n	8008468 <_printf_common+0x14>
 8008466:	0013      	movs	r3, r2
 8008468:	0022      	movs	r2, r4
 800846a:	6033      	str	r3, [r6, #0]
 800846c:	3243      	adds	r2, #67	@ 0x43
 800846e:	7812      	ldrb	r2, [r2, #0]
 8008470:	2a00      	cmp	r2, #0
 8008472:	d001      	beq.n	8008478 <_printf_common+0x24>
 8008474:	3301      	adds	r3, #1
 8008476:	6033      	str	r3, [r6, #0]
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	069b      	lsls	r3, r3, #26
 800847c:	d502      	bpl.n	8008484 <_printf_common+0x30>
 800847e:	6833      	ldr	r3, [r6, #0]
 8008480:	3302      	adds	r3, #2
 8008482:	6033      	str	r3, [r6, #0]
 8008484:	6822      	ldr	r2, [r4, #0]
 8008486:	2306      	movs	r3, #6
 8008488:	0015      	movs	r5, r2
 800848a:	401d      	ands	r5, r3
 800848c:	421a      	tst	r2, r3
 800848e:	d027      	beq.n	80084e0 <_printf_common+0x8c>
 8008490:	0023      	movs	r3, r4
 8008492:	3343      	adds	r3, #67	@ 0x43
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	1e5a      	subs	r2, r3, #1
 8008498:	4193      	sbcs	r3, r2
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	0692      	lsls	r2, r2, #26
 800849e:	d430      	bmi.n	8008502 <_printf_common+0xae>
 80084a0:	0022      	movs	r2, r4
 80084a2:	9901      	ldr	r1, [sp, #4]
 80084a4:	9800      	ldr	r0, [sp, #0]
 80084a6:	9d08      	ldr	r5, [sp, #32]
 80084a8:	3243      	adds	r2, #67	@ 0x43
 80084aa:	47a8      	blx	r5
 80084ac:	3001      	adds	r0, #1
 80084ae:	d025      	beq.n	80084fc <_printf_common+0xa8>
 80084b0:	2206      	movs	r2, #6
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	2500      	movs	r5, #0
 80084b6:	4013      	ands	r3, r2
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d105      	bne.n	80084c8 <_printf_common+0x74>
 80084bc:	6833      	ldr	r3, [r6, #0]
 80084be:	68e5      	ldr	r5, [r4, #12]
 80084c0:	1aed      	subs	r5, r5, r3
 80084c2:	43eb      	mvns	r3, r5
 80084c4:	17db      	asrs	r3, r3, #31
 80084c6:	401d      	ands	r5, r3
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	6922      	ldr	r2, [r4, #16]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	dd01      	ble.n	80084d4 <_printf_common+0x80>
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	18ed      	adds	r5, r5, r3
 80084d4:	2600      	movs	r6, #0
 80084d6:	42b5      	cmp	r5, r6
 80084d8:	d120      	bne.n	800851c <_printf_common+0xc8>
 80084da:	2000      	movs	r0, #0
 80084dc:	e010      	b.n	8008500 <_printf_common+0xac>
 80084de:	3501      	adds	r5, #1
 80084e0:	68e3      	ldr	r3, [r4, #12]
 80084e2:	6832      	ldr	r2, [r6, #0]
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	42ab      	cmp	r3, r5
 80084e8:	ddd2      	ble.n	8008490 <_printf_common+0x3c>
 80084ea:	0022      	movs	r2, r4
 80084ec:	2301      	movs	r3, #1
 80084ee:	9901      	ldr	r1, [sp, #4]
 80084f0:	9800      	ldr	r0, [sp, #0]
 80084f2:	9f08      	ldr	r7, [sp, #32]
 80084f4:	3219      	adds	r2, #25
 80084f6:	47b8      	blx	r7
 80084f8:	3001      	adds	r0, #1
 80084fa:	d1f0      	bne.n	80084de <_printf_common+0x8a>
 80084fc:	2001      	movs	r0, #1
 80084fe:	4240      	negs	r0, r0
 8008500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008502:	2030      	movs	r0, #48	@ 0x30
 8008504:	18e1      	adds	r1, r4, r3
 8008506:	3143      	adds	r1, #67	@ 0x43
 8008508:	7008      	strb	r0, [r1, #0]
 800850a:	0021      	movs	r1, r4
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	3145      	adds	r1, #69	@ 0x45
 8008510:	7809      	ldrb	r1, [r1, #0]
 8008512:	18a2      	adds	r2, r4, r2
 8008514:	3243      	adds	r2, #67	@ 0x43
 8008516:	3302      	adds	r3, #2
 8008518:	7011      	strb	r1, [r2, #0]
 800851a:	e7c1      	b.n	80084a0 <_printf_common+0x4c>
 800851c:	0022      	movs	r2, r4
 800851e:	2301      	movs	r3, #1
 8008520:	9901      	ldr	r1, [sp, #4]
 8008522:	9800      	ldr	r0, [sp, #0]
 8008524:	9f08      	ldr	r7, [sp, #32]
 8008526:	321a      	adds	r2, #26
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	d0e6      	beq.n	80084fc <_printf_common+0xa8>
 800852e:	3601      	adds	r6, #1
 8008530:	e7d1      	b.n	80084d6 <_printf_common+0x82>
	...

08008534 <_printf_i>:
 8008534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008536:	b08b      	sub	sp, #44	@ 0x2c
 8008538:	9206      	str	r2, [sp, #24]
 800853a:	000a      	movs	r2, r1
 800853c:	3243      	adds	r2, #67	@ 0x43
 800853e:	9307      	str	r3, [sp, #28]
 8008540:	9005      	str	r0, [sp, #20]
 8008542:	9203      	str	r2, [sp, #12]
 8008544:	7e0a      	ldrb	r2, [r1, #24]
 8008546:	000c      	movs	r4, r1
 8008548:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800854a:	2a78      	cmp	r2, #120	@ 0x78
 800854c:	d809      	bhi.n	8008562 <_printf_i+0x2e>
 800854e:	2a62      	cmp	r2, #98	@ 0x62
 8008550:	d80b      	bhi.n	800856a <_printf_i+0x36>
 8008552:	2a00      	cmp	r2, #0
 8008554:	d100      	bne.n	8008558 <_printf_i+0x24>
 8008556:	e0ba      	b.n	80086ce <_printf_i+0x19a>
 8008558:	497a      	ldr	r1, [pc, #488]	@ (8008744 <_printf_i+0x210>)
 800855a:	9104      	str	r1, [sp, #16]
 800855c:	2a58      	cmp	r2, #88	@ 0x58
 800855e:	d100      	bne.n	8008562 <_printf_i+0x2e>
 8008560:	e08e      	b.n	8008680 <_printf_i+0x14c>
 8008562:	0025      	movs	r5, r4
 8008564:	3542      	adds	r5, #66	@ 0x42
 8008566:	702a      	strb	r2, [r5, #0]
 8008568:	e022      	b.n	80085b0 <_printf_i+0x7c>
 800856a:	0010      	movs	r0, r2
 800856c:	3863      	subs	r0, #99	@ 0x63
 800856e:	2815      	cmp	r0, #21
 8008570:	d8f7      	bhi.n	8008562 <_printf_i+0x2e>
 8008572:	f7f7 fdd9 	bl	8000128 <__gnu_thumb1_case_shi>
 8008576:	0016      	.short	0x0016
 8008578:	fff6001f 	.word	0xfff6001f
 800857c:	fff6fff6 	.word	0xfff6fff6
 8008580:	001ffff6 	.word	0x001ffff6
 8008584:	fff6fff6 	.word	0xfff6fff6
 8008588:	fff6fff6 	.word	0xfff6fff6
 800858c:	0036009f 	.word	0x0036009f
 8008590:	fff6007e 	.word	0xfff6007e
 8008594:	00b0fff6 	.word	0x00b0fff6
 8008598:	0036fff6 	.word	0x0036fff6
 800859c:	fff6fff6 	.word	0xfff6fff6
 80085a0:	0082      	.short	0x0082
 80085a2:	0025      	movs	r5, r4
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	3542      	adds	r5, #66	@ 0x42
 80085a8:	1d11      	adds	r1, r2, #4
 80085aa:	6019      	str	r1, [r3, #0]
 80085ac:	6813      	ldr	r3, [r2, #0]
 80085ae:	702b      	strb	r3, [r5, #0]
 80085b0:	2301      	movs	r3, #1
 80085b2:	e09e      	b.n	80086f2 <_printf_i+0x1be>
 80085b4:	6818      	ldr	r0, [r3, #0]
 80085b6:	6809      	ldr	r1, [r1, #0]
 80085b8:	1d02      	adds	r2, r0, #4
 80085ba:	060d      	lsls	r5, r1, #24
 80085bc:	d50b      	bpl.n	80085d6 <_printf_i+0xa2>
 80085be:	6806      	ldr	r6, [r0, #0]
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	2e00      	cmp	r6, #0
 80085c4:	da03      	bge.n	80085ce <_printf_i+0x9a>
 80085c6:	232d      	movs	r3, #45	@ 0x2d
 80085c8:	9a03      	ldr	r2, [sp, #12]
 80085ca:	4276      	negs	r6, r6
 80085cc:	7013      	strb	r3, [r2, #0]
 80085ce:	4b5d      	ldr	r3, [pc, #372]	@ (8008744 <_printf_i+0x210>)
 80085d0:	270a      	movs	r7, #10
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	e018      	b.n	8008608 <_printf_i+0xd4>
 80085d6:	6806      	ldr	r6, [r0, #0]
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	0649      	lsls	r1, r1, #25
 80085dc:	d5f1      	bpl.n	80085c2 <_printf_i+0x8e>
 80085de:	b236      	sxth	r6, r6
 80085e0:	e7ef      	b.n	80085c2 <_printf_i+0x8e>
 80085e2:	6808      	ldr	r0, [r1, #0]
 80085e4:	6819      	ldr	r1, [r3, #0]
 80085e6:	c940      	ldmia	r1!, {r6}
 80085e8:	0605      	lsls	r5, r0, #24
 80085ea:	d402      	bmi.n	80085f2 <_printf_i+0xbe>
 80085ec:	0640      	lsls	r0, r0, #25
 80085ee:	d500      	bpl.n	80085f2 <_printf_i+0xbe>
 80085f0:	b2b6      	uxth	r6, r6
 80085f2:	6019      	str	r1, [r3, #0]
 80085f4:	4b53      	ldr	r3, [pc, #332]	@ (8008744 <_printf_i+0x210>)
 80085f6:	270a      	movs	r7, #10
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80085fc:	d100      	bne.n	8008600 <_printf_i+0xcc>
 80085fe:	3f02      	subs	r7, #2
 8008600:	0023      	movs	r3, r4
 8008602:	2200      	movs	r2, #0
 8008604:	3343      	adds	r3, #67	@ 0x43
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	6863      	ldr	r3, [r4, #4]
 800860a:	60a3      	str	r3, [r4, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	db06      	blt.n	800861e <_printf_i+0xea>
 8008610:	2104      	movs	r1, #4
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	9d03      	ldr	r5, [sp, #12]
 8008616:	438a      	bics	r2, r1
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	4333      	orrs	r3, r6
 800861c:	d00c      	beq.n	8008638 <_printf_i+0x104>
 800861e:	9d03      	ldr	r5, [sp, #12]
 8008620:	0030      	movs	r0, r6
 8008622:	0039      	movs	r1, r7
 8008624:	f7f7 fe10 	bl	8000248 <__aeabi_uidivmod>
 8008628:	9b04      	ldr	r3, [sp, #16]
 800862a:	3d01      	subs	r5, #1
 800862c:	5c5b      	ldrb	r3, [r3, r1]
 800862e:	702b      	strb	r3, [r5, #0]
 8008630:	0033      	movs	r3, r6
 8008632:	0006      	movs	r6, r0
 8008634:	429f      	cmp	r7, r3
 8008636:	d9f3      	bls.n	8008620 <_printf_i+0xec>
 8008638:	2f08      	cmp	r7, #8
 800863a:	d109      	bne.n	8008650 <_printf_i+0x11c>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	07db      	lsls	r3, r3, #31
 8008640:	d506      	bpl.n	8008650 <_printf_i+0x11c>
 8008642:	6862      	ldr	r2, [r4, #4]
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	429a      	cmp	r2, r3
 8008648:	dc02      	bgt.n	8008650 <_printf_i+0x11c>
 800864a:	2330      	movs	r3, #48	@ 0x30
 800864c:	3d01      	subs	r5, #1
 800864e:	702b      	strb	r3, [r5, #0]
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	1b5b      	subs	r3, r3, r5
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	9b07      	ldr	r3, [sp, #28]
 8008658:	0021      	movs	r1, r4
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	9805      	ldr	r0, [sp, #20]
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	aa09      	add	r2, sp, #36	@ 0x24
 8008662:	f7ff fef7 	bl	8008454 <_printf_common>
 8008666:	3001      	adds	r0, #1
 8008668:	d148      	bne.n	80086fc <_printf_i+0x1c8>
 800866a:	2001      	movs	r0, #1
 800866c:	4240      	negs	r0, r0
 800866e:	b00b      	add	sp, #44	@ 0x2c
 8008670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008672:	2220      	movs	r2, #32
 8008674:	6809      	ldr	r1, [r1, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	6022      	str	r2, [r4, #0]
 800867a:	2278      	movs	r2, #120	@ 0x78
 800867c:	4932      	ldr	r1, [pc, #200]	@ (8008748 <_printf_i+0x214>)
 800867e:	9104      	str	r1, [sp, #16]
 8008680:	0021      	movs	r1, r4
 8008682:	3145      	adds	r1, #69	@ 0x45
 8008684:	700a      	strb	r2, [r1, #0]
 8008686:	6819      	ldr	r1, [r3, #0]
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	c940      	ldmia	r1!, {r6}
 800868c:	0610      	lsls	r0, r2, #24
 800868e:	d402      	bmi.n	8008696 <_printf_i+0x162>
 8008690:	0650      	lsls	r0, r2, #25
 8008692:	d500      	bpl.n	8008696 <_printf_i+0x162>
 8008694:	b2b6      	uxth	r6, r6
 8008696:	6019      	str	r1, [r3, #0]
 8008698:	07d3      	lsls	r3, r2, #31
 800869a:	d502      	bpl.n	80086a2 <_printf_i+0x16e>
 800869c:	2320      	movs	r3, #32
 800869e:	4313      	orrs	r3, r2
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	d001      	beq.n	80086aa <_printf_i+0x176>
 80086a6:	2710      	movs	r7, #16
 80086a8:	e7aa      	b.n	8008600 <_printf_i+0xcc>
 80086aa:	2220      	movs	r2, #32
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	4393      	bics	r3, r2
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	e7f8      	b.n	80086a6 <_printf_i+0x172>
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	680d      	ldr	r5, [r1, #0]
 80086b8:	1d10      	adds	r0, r2, #4
 80086ba:	6949      	ldr	r1, [r1, #20]
 80086bc:	6018      	str	r0, [r3, #0]
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	062e      	lsls	r6, r5, #24
 80086c2:	d501      	bpl.n	80086c8 <_printf_i+0x194>
 80086c4:	6019      	str	r1, [r3, #0]
 80086c6:	e002      	b.n	80086ce <_printf_i+0x19a>
 80086c8:	066d      	lsls	r5, r5, #25
 80086ca:	d5fb      	bpl.n	80086c4 <_printf_i+0x190>
 80086cc:	8019      	strh	r1, [r3, #0]
 80086ce:	2300      	movs	r3, #0
 80086d0:	9d03      	ldr	r5, [sp, #12]
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	e7bf      	b.n	8008656 <_printf_i+0x122>
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	1d11      	adds	r1, r2, #4
 80086da:	6019      	str	r1, [r3, #0]
 80086dc:	6815      	ldr	r5, [r2, #0]
 80086de:	2100      	movs	r1, #0
 80086e0:	0028      	movs	r0, r5
 80086e2:	6862      	ldr	r2, [r4, #4]
 80086e4:	f000 f9eb 	bl	8008abe <memchr>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d001      	beq.n	80086f0 <_printf_i+0x1bc>
 80086ec:	1b40      	subs	r0, r0, r5
 80086ee:	6060      	str	r0, [r4, #4]
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	6123      	str	r3, [r4, #16]
 80086f4:	2300      	movs	r3, #0
 80086f6:	9a03      	ldr	r2, [sp, #12]
 80086f8:	7013      	strb	r3, [r2, #0]
 80086fa:	e7ac      	b.n	8008656 <_printf_i+0x122>
 80086fc:	002a      	movs	r2, r5
 80086fe:	6923      	ldr	r3, [r4, #16]
 8008700:	9906      	ldr	r1, [sp, #24]
 8008702:	9805      	ldr	r0, [sp, #20]
 8008704:	9d07      	ldr	r5, [sp, #28]
 8008706:	47a8      	blx	r5
 8008708:	3001      	adds	r0, #1
 800870a:	d0ae      	beq.n	800866a <_printf_i+0x136>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	079b      	lsls	r3, r3, #30
 8008710:	d415      	bmi.n	800873e <_printf_i+0x20a>
 8008712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008714:	68e0      	ldr	r0, [r4, #12]
 8008716:	4298      	cmp	r0, r3
 8008718:	daa9      	bge.n	800866e <_printf_i+0x13a>
 800871a:	0018      	movs	r0, r3
 800871c:	e7a7      	b.n	800866e <_printf_i+0x13a>
 800871e:	0022      	movs	r2, r4
 8008720:	2301      	movs	r3, #1
 8008722:	9906      	ldr	r1, [sp, #24]
 8008724:	9805      	ldr	r0, [sp, #20]
 8008726:	9e07      	ldr	r6, [sp, #28]
 8008728:	3219      	adds	r2, #25
 800872a:	47b0      	blx	r6
 800872c:	3001      	adds	r0, #1
 800872e:	d09c      	beq.n	800866a <_printf_i+0x136>
 8008730:	3501      	adds	r5, #1
 8008732:	68e3      	ldr	r3, [r4, #12]
 8008734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	42ab      	cmp	r3, r5
 800873a:	dcf0      	bgt.n	800871e <_printf_i+0x1ea>
 800873c:	e7e9      	b.n	8008712 <_printf_i+0x1de>
 800873e:	2500      	movs	r5, #0
 8008740:	e7f7      	b.n	8008732 <_printf_i+0x1fe>
 8008742:	46c0      	nop			@ (mov r8, r8)
 8008744:	0800b066 	.word	0x0800b066
 8008748:	0800b077 	.word	0x0800b077

0800874c <std>:
 800874c:	2300      	movs	r3, #0
 800874e:	b510      	push	{r4, lr}
 8008750:	0004      	movs	r4, r0
 8008752:	6003      	str	r3, [r0, #0]
 8008754:	6043      	str	r3, [r0, #4]
 8008756:	6083      	str	r3, [r0, #8]
 8008758:	8181      	strh	r1, [r0, #12]
 800875a:	6643      	str	r3, [r0, #100]	@ 0x64
 800875c:	81c2      	strh	r2, [r0, #14]
 800875e:	6103      	str	r3, [r0, #16]
 8008760:	6143      	str	r3, [r0, #20]
 8008762:	6183      	str	r3, [r0, #24]
 8008764:	0019      	movs	r1, r3
 8008766:	2208      	movs	r2, #8
 8008768:	305c      	adds	r0, #92	@ 0x5c
 800876a:	f000 f921 	bl	80089b0 <memset>
 800876e:	4b0b      	ldr	r3, [pc, #44]	@ (800879c <std+0x50>)
 8008770:	6224      	str	r4, [r4, #32]
 8008772:	6263      	str	r3, [r4, #36]	@ 0x24
 8008774:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <std+0x54>)
 8008776:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008778:	4b0a      	ldr	r3, [pc, #40]	@ (80087a4 <std+0x58>)
 800877a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800877c:	4b0a      	ldr	r3, [pc, #40]	@ (80087a8 <std+0x5c>)
 800877e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008780:	4b0a      	ldr	r3, [pc, #40]	@ (80087ac <std+0x60>)
 8008782:	429c      	cmp	r4, r3
 8008784:	d005      	beq.n	8008792 <std+0x46>
 8008786:	4b0a      	ldr	r3, [pc, #40]	@ (80087b0 <std+0x64>)
 8008788:	429c      	cmp	r4, r3
 800878a:	d002      	beq.n	8008792 <std+0x46>
 800878c:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <std+0x68>)
 800878e:	429c      	cmp	r4, r3
 8008790:	d103      	bne.n	800879a <std+0x4e>
 8008792:	0020      	movs	r0, r4
 8008794:	3058      	adds	r0, #88	@ 0x58
 8008796:	f000 f98f 	bl	8008ab8 <__retarget_lock_init_recursive>
 800879a:	bd10      	pop	{r4, pc}
 800879c:	08008919 	.word	0x08008919
 80087a0:	08008941 	.word	0x08008941
 80087a4:	08008979 	.word	0x08008979
 80087a8:	080089a5 	.word	0x080089a5
 80087ac:	20001320 	.word	0x20001320
 80087b0:	20001388 	.word	0x20001388
 80087b4:	200013f0 	.word	0x200013f0

080087b8 <stdio_exit_handler>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	4a03      	ldr	r2, [pc, #12]	@ (80087c8 <stdio_exit_handler+0x10>)
 80087bc:	4903      	ldr	r1, [pc, #12]	@ (80087cc <stdio_exit_handler+0x14>)
 80087be:	4804      	ldr	r0, [pc, #16]	@ (80087d0 <stdio_exit_handler+0x18>)
 80087c0:	f000 f86c 	bl	800889c <_fwalk_sglue>
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	46c0      	nop			@ (mov r8, r8)
 80087c8:	2000000c 	.word	0x2000000c
 80087cc:	0800a4dd 	.word	0x0800a4dd
 80087d0:	2000001c 	.word	0x2000001c

080087d4 <cleanup_stdio>:
 80087d4:	6841      	ldr	r1, [r0, #4]
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <cleanup_stdio+0x30>)
 80087d8:	b510      	push	{r4, lr}
 80087da:	0004      	movs	r4, r0
 80087dc:	4299      	cmp	r1, r3
 80087de:	d001      	beq.n	80087e4 <cleanup_stdio+0x10>
 80087e0:	f001 fe7c 	bl	800a4dc <_fflush_r>
 80087e4:	68a1      	ldr	r1, [r4, #8]
 80087e6:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <cleanup_stdio+0x34>)
 80087e8:	4299      	cmp	r1, r3
 80087ea:	d002      	beq.n	80087f2 <cleanup_stdio+0x1e>
 80087ec:	0020      	movs	r0, r4
 80087ee:	f001 fe75 	bl	800a4dc <_fflush_r>
 80087f2:	68e1      	ldr	r1, [r4, #12]
 80087f4:	4b05      	ldr	r3, [pc, #20]	@ (800880c <cleanup_stdio+0x38>)
 80087f6:	4299      	cmp	r1, r3
 80087f8:	d002      	beq.n	8008800 <cleanup_stdio+0x2c>
 80087fa:	0020      	movs	r0, r4
 80087fc:	f001 fe6e 	bl	800a4dc <_fflush_r>
 8008800:	bd10      	pop	{r4, pc}
 8008802:	46c0      	nop			@ (mov r8, r8)
 8008804:	20001320 	.word	0x20001320
 8008808:	20001388 	.word	0x20001388
 800880c:	200013f0 	.word	0x200013f0

08008810 <global_stdio_init.part.0>:
 8008810:	b510      	push	{r4, lr}
 8008812:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <global_stdio_init.part.0+0x28>)
 8008814:	4a09      	ldr	r2, [pc, #36]	@ (800883c <global_stdio_init.part.0+0x2c>)
 8008816:	2104      	movs	r1, #4
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	4809      	ldr	r0, [pc, #36]	@ (8008840 <global_stdio_init.part.0+0x30>)
 800881c:	2200      	movs	r2, #0
 800881e:	f7ff ff95 	bl	800874c <std>
 8008822:	2201      	movs	r2, #1
 8008824:	2109      	movs	r1, #9
 8008826:	4807      	ldr	r0, [pc, #28]	@ (8008844 <global_stdio_init.part.0+0x34>)
 8008828:	f7ff ff90 	bl	800874c <std>
 800882c:	2202      	movs	r2, #2
 800882e:	2112      	movs	r1, #18
 8008830:	4805      	ldr	r0, [pc, #20]	@ (8008848 <global_stdio_init.part.0+0x38>)
 8008832:	f7ff ff8b 	bl	800874c <std>
 8008836:	bd10      	pop	{r4, pc}
 8008838:	20001458 	.word	0x20001458
 800883c:	080087b9 	.word	0x080087b9
 8008840:	20001320 	.word	0x20001320
 8008844:	20001388 	.word	0x20001388
 8008848:	200013f0 	.word	0x200013f0

0800884c <__sfp_lock_acquire>:
 800884c:	b510      	push	{r4, lr}
 800884e:	4802      	ldr	r0, [pc, #8]	@ (8008858 <__sfp_lock_acquire+0xc>)
 8008850:	f000 f933 	bl	8008aba <__retarget_lock_acquire_recursive>
 8008854:	bd10      	pop	{r4, pc}
 8008856:	46c0      	nop			@ (mov r8, r8)
 8008858:	20001461 	.word	0x20001461

0800885c <__sfp_lock_release>:
 800885c:	b510      	push	{r4, lr}
 800885e:	4802      	ldr	r0, [pc, #8]	@ (8008868 <__sfp_lock_release+0xc>)
 8008860:	f000 f92c 	bl	8008abc <__retarget_lock_release_recursive>
 8008864:	bd10      	pop	{r4, pc}
 8008866:	46c0      	nop			@ (mov r8, r8)
 8008868:	20001461 	.word	0x20001461

0800886c <__sinit>:
 800886c:	b510      	push	{r4, lr}
 800886e:	0004      	movs	r4, r0
 8008870:	f7ff ffec 	bl	800884c <__sfp_lock_acquire>
 8008874:	6a23      	ldr	r3, [r4, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <__sinit+0x14>
 800887a:	f7ff ffef 	bl	800885c <__sfp_lock_release>
 800887e:	bd10      	pop	{r4, pc}
 8008880:	4b04      	ldr	r3, [pc, #16]	@ (8008894 <__sinit+0x28>)
 8008882:	6223      	str	r3, [r4, #32]
 8008884:	4b04      	ldr	r3, [pc, #16]	@ (8008898 <__sinit+0x2c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1f6      	bne.n	800887a <__sinit+0xe>
 800888c:	f7ff ffc0 	bl	8008810 <global_stdio_init.part.0>
 8008890:	e7f3      	b.n	800887a <__sinit+0xe>
 8008892:	46c0      	nop			@ (mov r8, r8)
 8008894:	080087d5 	.word	0x080087d5
 8008898:	20001458 	.word	0x20001458

0800889c <_fwalk_sglue>:
 800889c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800889e:	0014      	movs	r4, r2
 80088a0:	2600      	movs	r6, #0
 80088a2:	9000      	str	r0, [sp, #0]
 80088a4:	9101      	str	r1, [sp, #4]
 80088a6:	68a5      	ldr	r5, [r4, #8]
 80088a8:	6867      	ldr	r7, [r4, #4]
 80088aa:	3f01      	subs	r7, #1
 80088ac:	d504      	bpl.n	80088b8 <_fwalk_sglue+0x1c>
 80088ae:	6824      	ldr	r4, [r4, #0]
 80088b0:	2c00      	cmp	r4, #0
 80088b2:	d1f8      	bne.n	80088a6 <_fwalk_sglue+0xa>
 80088b4:	0030      	movs	r0, r6
 80088b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088b8:	89ab      	ldrh	r3, [r5, #12]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d908      	bls.n	80088d0 <_fwalk_sglue+0x34>
 80088be:	220e      	movs	r2, #14
 80088c0:	5eab      	ldrsh	r3, [r5, r2]
 80088c2:	3301      	adds	r3, #1
 80088c4:	d004      	beq.n	80088d0 <_fwalk_sglue+0x34>
 80088c6:	0029      	movs	r1, r5
 80088c8:	9800      	ldr	r0, [sp, #0]
 80088ca:	9b01      	ldr	r3, [sp, #4]
 80088cc:	4798      	blx	r3
 80088ce:	4306      	orrs	r6, r0
 80088d0:	3568      	adds	r5, #104	@ 0x68
 80088d2:	e7ea      	b.n	80088aa <_fwalk_sglue+0xe>

080088d4 <siprintf>:
 80088d4:	b40e      	push	{r1, r2, r3}
 80088d6:	b510      	push	{r4, lr}
 80088d8:	2400      	movs	r4, #0
 80088da:	490c      	ldr	r1, [pc, #48]	@ (800890c <siprintf+0x38>)
 80088dc:	b09d      	sub	sp, #116	@ 0x74
 80088de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80088e0:	9002      	str	r0, [sp, #8]
 80088e2:	9006      	str	r0, [sp, #24]
 80088e4:	9107      	str	r1, [sp, #28]
 80088e6:	9104      	str	r1, [sp, #16]
 80088e8:	4809      	ldr	r0, [pc, #36]	@ (8008910 <siprintf+0x3c>)
 80088ea:	490a      	ldr	r1, [pc, #40]	@ (8008914 <siprintf+0x40>)
 80088ec:	cb04      	ldmia	r3!, {r2}
 80088ee:	9105      	str	r1, [sp, #20]
 80088f0:	6800      	ldr	r0, [r0, #0]
 80088f2:	a902      	add	r1, sp, #8
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80088f8:	f001 fc6c 	bl	800a1d4 <_svfiprintf_r>
 80088fc:	9b02      	ldr	r3, [sp, #8]
 80088fe:	701c      	strb	r4, [r3, #0]
 8008900:	b01d      	add	sp, #116	@ 0x74
 8008902:	bc10      	pop	{r4}
 8008904:	bc08      	pop	{r3}
 8008906:	b003      	add	sp, #12
 8008908:	4718      	bx	r3
 800890a:	46c0      	nop			@ (mov r8, r8)
 800890c:	7fffffff 	.word	0x7fffffff
 8008910:	20000018 	.word	0x20000018
 8008914:	ffff0208 	.word	0xffff0208

08008918 <__sread>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	000c      	movs	r4, r1
 800891c:	250e      	movs	r5, #14
 800891e:	5f49      	ldrsh	r1, [r1, r5]
 8008920:	f000 f878 	bl	8008a14 <_read_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	db03      	blt.n	8008930 <__sread+0x18>
 8008928:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800892a:	181b      	adds	r3, r3, r0
 800892c:	6563      	str	r3, [r4, #84]	@ 0x54
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	4a02      	ldr	r2, [pc, #8]	@ (800893c <__sread+0x24>)
 8008934:	4013      	ands	r3, r2
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	e7f9      	b.n	800892e <__sread+0x16>
 800893a:	46c0      	nop			@ (mov r8, r8)
 800893c:	ffffefff 	.word	0xffffefff

08008940 <__swrite>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	001f      	movs	r7, r3
 8008944:	898b      	ldrh	r3, [r1, #12]
 8008946:	0005      	movs	r5, r0
 8008948:	000c      	movs	r4, r1
 800894a:	0016      	movs	r6, r2
 800894c:	05db      	lsls	r3, r3, #23
 800894e:	d505      	bpl.n	800895c <__swrite+0x1c>
 8008950:	230e      	movs	r3, #14
 8008952:	5ec9      	ldrsh	r1, [r1, r3]
 8008954:	2200      	movs	r2, #0
 8008956:	2302      	movs	r3, #2
 8008958:	f000 f848 	bl	80089ec <_lseek_r>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	4a05      	ldr	r2, [pc, #20]	@ (8008974 <__swrite+0x34>)
 8008960:	0028      	movs	r0, r5
 8008962:	4013      	ands	r3, r2
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	0032      	movs	r2, r6
 8008968:	230e      	movs	r3, #14
 800896a:	5ee1      	ldrsh	r1, [r4, r3]
 800896c:	003b      	movs	r3, r7
 800896e:	f000 f865 	bl	8008a3c <_write_r>
 8008972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008974:	ffffefff 	.word	0xffffefff

08008978 <__sseek>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	000c      	movs	r4, r1
 800897c:	250e      	movs	r5, #14
 800897e:	5f49      	ldrsh	r1, [r1, r5]
 8008980:	f000 f834 	bl	80089ec <_lseek_r>
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	1c42      	adds	r2, r0, #1
 8008988:	d103      	bne.n	8008992 <__sseek+0x1a>
 800898a:	4a05      	ldr	r2, [pc, #20]	@ (80089a0 <__sseek+0x28>)
 800898c:	4013      	ands	r3, r2
 800898e:	81a3      	strh	r3, [r4, #12]
 8008990:	bd70      	pop	{r4, r5, r6, pc}
 8008992:	2280      	movs	r2, #128	@ 0x80
 8008994:	0152      	lsls	r2, r2, #5
 8008996:	4313      	orrs	r3, r2
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	6560      	str	r0, [r4, #84]	@ 0x54
 800899c:	e7f8      	b.n	8008990 <__sseek+0x18>
 800899e:	46c0      	nop			@ (mov r8, r8)
 80089a0:	ffffefff 	.word	0xffffefff

080089a4 <__sclose>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	230e      	movs	r3, #14
 80089a8:	5ec9      	ldrsh	r1, [r1, r3]
 80089aa:	f000 f80d 	bl	80089c8 <_close_r>
 80089ae:	bd10      	pop	{r4, pc}

080089b0 <memset>:
 80089b0:	0003      	movs	r3, r0
 80089b2:	1882      	adds	r2, r0, r2
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d100      	bne.n	80089ba <memset+0xa>
 80089b8:	4770      	bx	lr
 80089ba:	7019      	strb	r1, [r3, #0]
 80089bc:	3301      	adds	r3, #1
 80089be:	e7f9      	b.n	80089b4 <memset+0x4>

080089c0 <_localeconv_r>:
 80089c0:	4800      	ldr	r0, [pc, #0]	@ (80089c4 <_localeconv_r+0x4>)
 80089c2:	4770      	bx	lr
 80089c4:	20000158 	.word	0x20000158

080089c8 <_close_r>:
 80089c8:	2300      	movs	r3, #0
 80089ca:	b570      	push	{r4, r5, r6, lr}
 80089cc:	4d06      	ldr	r5, [pc, #24]	@ (80089e8 <_close_r+0x20>)
 80089ce:	0004      	movs	r4, r0
 80089d0:	0008      	movs	r0, r1
 80089d2:	602b      	str	r3, [r5, #0]
 80089d4:	f7fc fc53 	bl	800527e <_close>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d103      	bne.n	80089e4 <_close_r+0x1c>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d000      	beq.n	80089e4 <_close_r+0x1c>
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	bd70      	pop	{r4, r5, r6, pc}
 80089e6:	46c0      	nop			@ (mov r8, r8)
 80089e8:	2000145c 	.word	0x2000145c

080089ec <_lseek_r>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	0004      	movs	r4, r0
 80089f0:	0008      	movs	r0, r1
 80089f2:	0011      	movs	r1, r2
 80089f4:	001a      	movs	r2, r3
 80089f6:	2300      	movs	r3, #0
 80089f8:	4d05      	ldr	r5, [pc, #20]	@ (8008a10 <_lseek_r+0x24>)
 80089fa:	602b      	str	r3, [r5, #0]
 80089fc:	f7fc fc60 	bl	80052c0 <_lseek>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d103      	bne.n	8008a0c <_lseek_r+0x20>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d000      	beq.n	8008a0c <_lseek_r+0x20>
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	bd70      	pop	{r4, r5, r6, pc}
 8008a0e:	46c0      	nop			@ (mov r8, r8)
 8008a10:	2000145c 	.word	0x2000145c

08008a14 <_read_r>:
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	0004      	movs	r4, r0
 8008a18:	0008      	movs	r0, r1
 8008a1a:	0011      	movs	r1, r2
 8008a1c:	001a      	movs	r2, r3
 8008a1e:	2300      	movs	r3, #0
 8008a20:	4d05      	ldr	r5, [pc, #20]	@ (8008a38 <_read_r+0x24>)
 8008a22:	602b      	str	r3, [r5, #0]
 8008a24:	f7fc fbf2 	bl	800520c <_read>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d103      	bne.n	8008a34 <_read_r+0x20>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d000      	beq.n	8008a34 <_read_r+0x20>
 8008a32:	6023      	str	r3, [r4, #0]
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	46c0      	nop			@ (mov r8, r8)
 8008a38:	2000145c 	.word	0x2000145c

08008a3c <_write_r>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	0004      	movs	r4, r0
 8008a40:	0008      	movs	r0, r1
 8008a42:	0011      	movs	r1, r2
 8008a44:	001a      	movs	r2, r3
 8008a46:	2300      	movs	r3, #0
 8008a48:	4d05      	ldr	r5, [pc, #20]	@ (8008a60 <_write_r+0x24>)
 8008a4a:	602b      	str	r3, [r5, #0]
 8008a4c:	f7fc fbfb 	bl	8005246 <_write>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d103      	bne.n	8008a5c <_write_r+0x20>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d000      	beq.n	8008a5c <_write_r+0x20>
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	bd70      	pop	{r4, r5, r6, pc}
 8008a5e:	46c0      	nop			@ (mov r8, r8)
 8008a60:	2000145c 	.word	0x2000145c

08008a64 <__errno>:
 8008a64:	4b01      	ldr	r3, [pc, #4]	@ (8008a6c <__errno+0x8>)
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	4770      	bx	lr
 8008a6a:	46c0      	nop			@ (mov r8, r8)
 8008a6c:	20000018 	.word	0x20000018

08008a70 <__libc_init_array>:
 8008a70:	b570      	push	{r4, r5, r6, lr}
 8008a72:	2600      	movs	r6, #0
 8008a74:	4c0c      	ldr	r4, [pc, #48]	@ (8008aa8 <__libc_init_array+0x38>)
 8008a76:	4d0d      	ldr	r5, [pc, #52]	@ (8008aac <__libc_init_array+0x3c>)
 8008a78:	1b64      	subs	r4, r4, r5
 8008a7a:	10a4      	asrs	r4, r4, #2
 8008a7c:	42a6      	cmp	r6, r4
 8008a7e:	d109      	bne.n	8008a94 <__libc_init_array+0x24>
 8008a80:	2600      	movs	r6, #0
 8008a82:	f002 f8f1 	bl	800ac68 <_init>
 8008a86:	4c0a      	ldr	r4, [pc, #40]	@ (8008ab0 <__libc_init_array+0x40>)
 8008a88:	4d0a      	ldr	r5, [pc, #40]	@ (8008ab4 <__libc_init_array+0x44>)
 8008a8a:	1b64      	subs	r4, r4, r5
 8008a8c:	10a4      	asrs	r4, r4, #2
 8008a8e:	42a6      	cmp	r6, r4
 8008a90:	d105      	bne.n	8008a9e <__libc_init_array+0x2e>
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	00b3      	lsls	r3, r6, #2
 8008a96:	58eb      	ldr	r3, [r5, r3]
 8008a98:	4798      	blx	r3
 8008a9a:	3601      	adds	r6, #1
 8008a9c:	e7ee      	b.n	8008a7c <__libc_init_array+0xc>
 8008a9e:	00b3      	lsls	r3, r6, #2
 8008aa0:	58eb      	ldr	r3, [r5, r3]
 8008aa2:	4798      	blx	r3
 8008aa4:	3601      	adds	r6, #1
 8008aa6:	e7f2      	b.n	8008a8e <__libc_init_array+0x1e>
 8008aa8:	0800b3d4 	.word	0x0800b3d4
 8008aac:	0800b3d4 	.word	0x0800b3d4
 8008ab0:	0800b3d8 	.word	0x0800b3d8
 8008ab4:	0800b3d4 	.word	0x0800b3d4

08008ab8 <__retarget_lock_init_recursive>:
 8008ab8:	4770      	bx	lr

08008aba <__retarget_lock_acquire_recursive>:
 8008aba:	4770      	bx	lr

08008abc <__retarget_lock_release_recursive>:
 8008abc:	4770      	bx	lr

08008abe <memchr>:
 8008abe:	b2c9      	uxtb	r1, r1
 8008ac0:	1882      	adds	r2, r0, r2
 8008ac2:	4290      	cmp	r0, r2
 8008ac4:	d101      	bne.n	8008aca <memchr+0xc>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	4770      	bx	lr
 8008aca:	7803      	ldrb	r3, [r0, #0]
 8008acc:	428b      	cmp	r3, r1
 8008ace:	d0fb      	beq.n	8008ac8 <memchr+0xa>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	e7f6      	b.n	8008ac2 <memchr+0x4>

08008ad4 <memcpy>:
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d100      	bne.n	8008ade <memcpy+0xa>
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	5ccc      	ldrb	r4, [r1, r3]
 8008ae0:	54c4      	strb	r4, [r0, r3]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	e7f8      	b.n	8008ad8 <memcpy+0x4>

08008ae6 <quorem>:
 8008ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae8:	6903      	ldr	r3, [r0, #16]
 8008aea:	690c      	ldr	r4, [r1, #16]
 8008aec:	b089      	sub	sp, #36	@ 0x24
 8008aee:	9003      	str	r0, [sp, #12]
 8008af0:	9106      	str	r1, [sp, #24]
 8008af2:	2000      	movs	r0, #0
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	db63      	blt.n	8008bc0 <quorem+0xda>
 8008af8:	000b      	movs	r3, r1
 8008afa:	3c01      	subs	r4, #1
 8008afc:	3314      	adds	r3, #20
 8008afe:	00a5      	lsls	r5, r4, #2
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	195b      	adds	r3, r3, r5
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	9b03      	ldr	r3, [sp, #12]
 8008b08:	3314      	adds	r3, #20
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	195d      	adds	r5, r3, r5
 8008b0e:	9b05      	ldr	r3, [sp, #20]
 8008b10:	682f      	ldr	r7, [r5, #0]
 8008b12:	681e      	ldr	r6, [r3, #0]
 8008b14:	0038      	movs	r0, r7
 8008b16:	3601      	adds	r6, #1
 8008b18:	0031      	movs	r1, r6
 8008b1a:	f7f7 fb0f 	bl	800013c <__udivsi3>
 8008b1e:	9002      	str	r0, [sp, #8]
 8008b20:	42b7      	cmp	r7, r6
 8008b22:	d327      	bcc.n	8008b74 <quorem+0x8e>
 8008b24:	9b04      	ldr	r3, [sp, #16]
 8008b26:	2700      	movs	r7, #0
 8008b28:	469c      	mov	ip, r3
 8008b2a:	9e01      	ldr	r6, [sp, #4]
 8008b2c:	9707      	str	r7, [sp, #28]
 8008b2e:	4662      	mov	r2, ip
 8008b30:	ca08      	ldmia	r2!, {r3}
 8008b32:	6830      	ldr	r0, [r6, #0]
 8008b34:	4694      	mov	ip, r2
 8008b36:	9a02      	ldr	r2, [sp, #8]
 8008b38:	b299      	uxth	r1, r3
 8008b3a:	4351      	muls	r1, r2
 8008b3c:	0c1b      	lsrs	r3, r3, #16
 8008b3e:	4353      	muls	r3, r2
 8008b40:	19c9      	adds	r1, r1, r7
 8008b42:	0c0a      	lsrs	r2, r1, #16
 8008b44:	189b      	adds	r3, r3, r2
 8008b46:	b289      	uxth	r1, r1
 8008b48:	b282      	uxth	r2, r0
 8008b4a:	1a52      	subs	r2, r2, r1
 8008b4c:	9907      	ldr	r1, [sp, #28]
 8008b4e:	0c1f      	lsrs	r7, r3, #16
 8008b50:	1852      	adds	r2, r2, r1
 8008b52:	0c00      	lsrs	r0, r0, #16
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	1411      	asrs	r1, r2, #16
 8008b58:	1ac3      	subs	r3, r0, r3
 8008b5a:	185b      	adds	r3, r3, r1
 8008b5c:	1419      	asrs	r1, r3, #16
 8008b5e:	b292      	uxth	r2, r2
 8008b60:	041b      	lsls	r3, r3, #16
 8008b62:	431a      	orrs	r2, r3
 8008b64:	9b05      	ldr	r3, [sp, #20]
 8008b66:	9107      	str	r1, [sp, #28]
 8008b68:	c604      	stmia	r6!, {r2}
 8008b6a:	4563      	cmp	r3, ip
 8008b6c:	d2df      	bcs.n	8008b2e <quorem+0x48>
 8008b6e:	682b      	ldr	r3, [r5, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d02b      	beq.n	8008bcc <quorem+0xe6>
 8008b74:	9906      	ldr	r1, [sp, #24]
 8008b76:	9803      	ldr	r0, [sp, #12]
 8008b78:	f001 f9b6 	bl	8009ee8 <__mcmp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	db1e      	blt.n	8008bbe <quorem+0xd8>
 8008b80:	2600      	movs	r6, #0
 8008b82:	9d01      	ldr	r5, [sp, #4]
 8008b84:	9904      	ldr	r1, [sp, #16]
 8008b86:	c901      	ldmia	r1!, {r0}
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	b287      	uxth	r7, r0
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	1bd2      	subs	r2, r2, r7
 8008b90:	1992      	adds	r2, r2, r6
 8008b92:	0c00      	lsrs	r0, r0, #16
 8008b94:	0c1b      	lsrs	r3, r3, #16
 8008b96:	1a1b      	subs	r3, r3, r0
 8008b98:	1410      	asrs	r0, r2, #16
 8008b9a:	181b      	adds	r3, r3, r0
 8008b9c:	141e      	asrs	r6, r3, #16
 8008b9e:	b292      	uxth	r2, r2
 8008ba0:	041b      	lsls	r3, r3, #16
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	9b05      	ldr	r3, [sp, #20]
 8008ba6:	c504      	stmia	r5!, {r2}
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	d2ec      	bcs.n	8008b86 <quorem+0xa0>
 8008bac:	9a01      	ldr	r2, [sp, #4]
 8008bae:	00a3      	lsls	r3, r4, #2
 8008bb0:	18d3      	adds	r3, r2, r3
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	d014      	beq.n	8008be2 <quorem+0xfc>
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	9302      	str	r3, [sp, #8]
 8008bbe:	9802      	ldr	r0, [sp, #8]
 8008bc0:	b009      	add	sp, #36	@ 0x24
 8008bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d104      	bne.n	8008bd4 <quorem+0xee>
 8008bca:	3c01      	subs	r4, #1
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	3d04      	subs	r5, #4
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	d3f7      	bcc.n	8008bc4 <quorem+0xde>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	611c      	str	r4, [r3, #16]
 8008bd8:	e7cc      	b.n	8008b74 <quorem+0x8e>
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	2a00      	cmp	r2, #0
 8008bde:	d104      	bne.n	8008bea <quorem+0x104>
 8008be0:	3c01      	subs	r4, #1
 8008be2:	9a01      	ldr	r2, [sp, #4]
 8008be4:	3b04      	subs	r3, #4
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3f7      	bcc.n	8008bda <quorem+0xf4>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	611c      	str	r4, [r3, #16]
 8008bee:	e7e3      	b.n	8008bb8 <quorem+0xd2>

08008bf0 <_dtoa_r>:
 8008bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bf2:	0014      	movs	r4, r2
 8008bf4:	001d      	movs	r5, r3
 8008bf6:	69c6      	ldr	r6, [r0, #28]
 8008bf8:	b09d      	sub	sp, #116	@ 0x74
 8008bfa:	940a      	str	r4, [sp, #40]	@ 0x28
 8008bfc:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008bfe:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8008c00:	9003      	str	r0, [sp, #12]
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d10f      	bne.n	8008c26 <_dtoa_r+0x36>
 8008c06:	2010      	movs	r0, #16
 8008c08:	f000 fe2c 	bl	8009864 <malloc>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	1e02      	subs	r2, r0, #0
 8008c10:	61d8      	str	r0, [r3, #28]
 8008c12:	d104      	bne.n	8008c1e <_dtoa_r+0x2e>
 8008c14:	21ef      	movs	r1, #239	@ 0xef
 8008c16:	4bc7      	ldr	r3, [pc, #796]	@ (8008f34 <_dtoa_r+0x344>)
 8008c18:	48c7      	ldr	r0, [pc, #796]	@ (8008f38 <_dtoa_r+0x348>)
 8008c1a:	f001 fcaf 	bl	800a57c <__assert_func>
 8008c1e:	6046      	str	r6, [r0, #4]
 8008c20:	6086      	str	r6, [r0, #8]
 8008c22:	6006      	str	r6, [r0, #0]
 8008c24:	60c6      	str	r6, [r0, #12]
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	6819      	ldr	r1, [r3, #0]
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	d00b      	beq.n	8008c48 <_dtoa_r+0x58>
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	2301      	movs	r3, #1
 8008c34:	4093      	lsls	r3, r2
 8008c36:	604a      	str	r2, [r1, #4]
 8008c38:	608b      	str	r3, [r1, #8]
 8008c3a:	9803      	ldr	r0, [sp, #12]
 8008c3c:	f000 ff12 	bl	8009a64 <_Bfree>
 8008c40:	2200      	movs	r2, #0
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	2d00      	cmp	r5, #0
 8008c4a:	da1e      	bge.n	8008c8a <_dtoa_r+0x9a>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	006b      	lsls	r3, r5, #1
 8008c52:	085b      	lsrs	r3, r3, #1
 8008c54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c56:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008c58:	4bb8      	ldr	r3, [pc, #736]	@ (8008f3c <_dtoa_r+0x34c>)
 8008c5a:	4ab8      	ldr	r2, [pc, #736]	@ (8008f3c <_dtoa_r+0x34c>)
 8008c5c:	403b      	ands	r3, r7
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d116      	bne.n	8008c90 <_dtoa_r+0xa0>
 8008c62:	4bb7      	ldr	r3, [pc, #732]	@ (8008f40 <_dtoa_r+0x350>)
 8008c64:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	033b      	lsls	r3, r7, #12
 8008c6a:	0b1b      	lsrs	r3, r3, #12
 8008c6c:	4323      	orrs	r3, r4
 8008c6e:	d101      	bne.n	8008c74 <_dtoa_r+0x84>
 8008c70:	f000 fd80 	bl	8009774 <_dtoa_r+0xb84>
 8008c74:	4bb3      	ldr	r3, [pc, #716]	@ (8008f44 <_dtoa_r+0x354>)
 8008c76:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008c78:	9308      	str	r3, [sp, #32]
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	d002      	beq.n	8008c84 <_dtoa_r+0x94>
 8008c7e:	4bb2      	ldr	r3, [pc, #712]	@ (8008f48 <_dtoa_r+0x358>)
 8008c80:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	9808      	ldr	r0, [sp, #32]
 8008c86:	b01d      	add	sp, #116	@ 0x74
 8008c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	603b      	str	r3, [r7, #0]
 8008c8e:	e7e2      	b.n	8008c56 <_dtoa_r+0x66>
 8008c90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c94:	9212      	str	r2, [sp, #72]	@ 0x48
 8008c96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c98:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008c9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f7f7 fbd2 	bl	8000448 <__aeabi_dcmpeq>
 8008ca4:	1e06      	subs	r6, r0, #0
 8008ca6:	d00b      	beq.n	8008cc0 <_dtoa_r+0xd0>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <_dtoa_r+0xca>
 8008cb4:	4ba5      	ldr	r3, [pc, #660]	@ (8008f4c <_dtoa_r+0x35c>)
 8008cb6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008cb8:	6013      	str	r3, [r2, #0]
 8008cba:	4ba5      	ldr	r3, [pc, #660]	@ (8008f50 <_dtoa_r+0x360>)
 8008cbc:	9308      	str	r3, [sp, #32]
 8008cbe:	e7e1      	b.n	8008c84 <_dtoa_r+0x94>
 8008cc0:	ab1a      	add	r3, sp, #104	@ 0x68
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	9803      	ldr	r0, [sp, #12]
 8008cca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008ccc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cce:	f001 f9c1 	bl	800a054 <__d2b>
 8008cd2:	007a      	lsls	r2, r7, #1
 8008cd4:	9005      	str	r0, [sp, #20]
 8008cd6:	0d52      	lsrs	r2, r2, #21
 8008cd8:	d100      	bne.n	8008cdc <_dtoa_r+0xec>
 8008cda:	e07b      	b.n	8008dd4 <_dtoa_r+0x1e4>
 8008cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cde:	9618      	str	r6, [sp, #96]	@ 0x60
 8008ce0:	0319      	lsls	r1, r3, #12
 8008ce2:	4b9c      	ldr	r3, [pc, #624]	@ (8008f54 <_dtoa_r+0x364>)
 8008ce4:	0b09      	lsrs	r1, r1, #12
 8008ce6:	430b      	orrs	r3, r1
 8008ce8:	499b      	ldr	r1, [pc, #620]	@ (8008f58 <_dtoa_r+0x368>)
 8008cea:	1857      	adds	r7, r2, r1
 8008cec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008cee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008cf0:	0019      	movs	r1, r3
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	4b99      	ldr	r3, [pc, #612]	@ (8008f5c <_dtoa_r+0x36c>)
 8008cf6:	f7f8 ffc1 	bl	8001c7c <__aeabi_dsub>
 8008cfa:	4a99      	ldr	r2, [pc, #612]	@ (8008f60 <_dtoa_r+0x370>)
 8008cfc:	4b99      	ldr	r3, [pc, #612]	@ (8008f64 <_dtoa_r+0x374>)
 8008cfe:	f7f8 fcd7 	bl	80016b0 <__aeabi_dmul>
 8008d02:	4a99      	ldr	r2, [pc, #612]	@ (8008f68 <_dtoa_r+0x378>)
 8008d04:	4b99      	ldr	r3, [pc, #612]	@ (8008f6c <_dtoa_r+0x37c>)
 8008d06:	f7f7 fcd3 	bl	80006b0 <__aeabi_dadd>
 8008d0a:	0004      	movs	r4, r0
 8008d0c:	0038      	movs	r0, r7
 8008d0e:	000d      	movs	r5, r1
 8008d10:	f7f9 fc1c 	bl	800254c <__aeabi_i2d>
 8008d14:	4a96      	ldr	r2, [pc, #600]	@ (8008f70 <_dtoa_r+0x380>)
 8008d16:	4b97      	ldr	r3, [pc, #604]	@ (8008f74 <_dtoa_r+0x384>)
 8008d18:	f7f8 fcca 	bl	80016b0 <__aeabi_dmul>
 8008d1c:	0002      	movs	r2, r0
 8008d1e:	000b      	movs	r3, r1
 8008d20:	0020      	movs	r0, r4
 8008d22:	0029      	movs	r1, r5
 8008d24:	f7f7 fcc4 	bl	80006b0 <__aeabi_dadd>
 8008d28:	0004      	movs	r4, r0
 8008d2a:	000d      	movs	r5, r1
 8008d2c:	f7f9 fbd2 	bl	80024d4 <__aeabi_d2iz>
 8008d30:	2200      	movs	r2, #0
 8008d32:	9004      	str	r0, [sp, #16]
 8008d34:	2300      	movs	r3, #0
 8008d36:	0020      	movs	r0, r4
 8008d38:	0029      	movs	r1, r5
 8008d3a:	f7f7 fb8b 	bl	8000454 <__aeabi_dcmplt>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d00b      	beq.n	8008d5a <_dtoa_r+0x16a>
 8008d42:	9804      	ldr	r0, [sp, #16]
 8008d44:	f7f9 fc02 	bl	800254c <__aeabi_i2d>
 8008d48:	002b      	movs	r3, r5
 8008d4a:	0022      	movs	r2, r4
 8008d4c:	f7f7 fb7c 	bl	8000448 <__aeabi_dcmpeq>
 8008d50:	4243      	negs	r3, r0
 8008d52:	4158      	adcs	r0, r3
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	1a1b      	subs	r3, r3, r0
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d5e:	9b04      	ldr	r3, [sp, #16]
 8008d60:	2b16      	cmp	r3, #22
 8008d62:	d810      	bhi.n	8008d86 <_dtoa_r+0x196>
 8008d64:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008d66:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008d68:	9a04      	ldr	r2, [sp, #16]
 8008d6a:	4b83      	ldr	r3, [pc, #524]	@ (8008f78 <_dtoa_r+0x388>)
 8008d6c:	00d2      	lsls	r2, r2, #3
 8008d6e:	189b      	adds	r3, r3, r2
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f7f7 fb6e 	bl	8000454 <__aeabi_dcmplt>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d047      	beq.n	8008e0c <_dtoa_r+0x21c>
 8008d7c:	9b04      	ldr	r3, [sp, #16]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	2300      	movs	r3, #0
 8008d84:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d86:	2200      	movs	r2, #0
 8008d88:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008d8a:	9206      	str	r2, [sp, #24]
 8008d8c:	1bdb      	subs	r3, r3, r7
 8008d8e:	1e5a      	subs	r2, r3, #1
 8008d90:	d53e      	bpl.n	8008e10 <_dtoa_r+0x220>
 8008d92:	2201      	movs	r2, #1
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	9306      	str	r3, [sp, #24]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d9c:	9b04      	ldr	r3, [sp, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	db38      	blt.n	8008e14 <_dtoa_r+0x224>
 8008da2:	9a04      	ldr	r2, [sp, #16]
 8008da4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008da6:	4694      	mov	ip, r2
 8008da8:	4463      	add	r3, ip
 8008daa:	930d      	str	r3, [sp, #52]	@ 0x34
 8008dac:	2300      	movs	r3, #0
 8008dae:	9214      	str	r2, [sp, #80]	@ 0x50
 8008db0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008db2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008db4:	2401      	movs	r4, #1
 8008db6:	2b09      	cmp	r3, #9
 8008db8:	d862      	bhi.n	8008e80 <_dtoa_r+0x290>
 8008dba:	2b05      	cmp	r3, #5
 8008dbc:	dd02      	ble.n	8008dc4 <_dtoa_r+0x1d4>
 8008dbe:	2400      	movs	r4, #0
 8008dc0:	3b04      	subs	r3, #4
 8008dc2:	9322      	str	r3, [sp, #136]	@ 0x88
 8008dc4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008dc6:	1e98      	subs	r0, r3, #2
 8008dc8:	2803      	cmp	r0, #3
 8008dca:	d863      	bhi.n	8008e94 <_dtoa_r+0x2a4>
 8008dcc:	f7f7 f9a2 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008dd0:	2b385654 	.word	0x2b385654
 8008dd4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008dd6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008dd8:	18f6      	adds	r6, r6, r3
 8008dda:	4b68      	ldr	r3, [pc, #416]	@ (8008f7c <_dtoa_r+0x38c>)
 8008ddc:	18f2      	adds	r2, r6, r3
 8008dde:	2a20      	cmp	r2, #32
 8008de0:	dd0f      	ble.n	8008e02 <_dtoa_r+0x212>
 8008de2:	2340      	movs	r3, #64	@ 0x40
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	409f      	lsls	r7, r3
 8008de8:	4b65      	ldr	r3, [pc, #404]	@ (8008f80 <_dtoa_r+0x390>)
 8008dea:	0038      	movs	r0, r7
 8008dec:	18f3      	adds	r3, r6, r3
 8008dee:	40dc      	lsrs	r4, r3
 8008df0:	4320      	orrs	r0, r4
 8008df2:	f7f9 fbd9 	bl	80025a8 <__aeabi_ui2d>
 8008df6:	2201      	movs	r2, #1
 8008df8:	4b62      	ldr	r3, [pc, #392]	@ (8008f84 <_dtoa_r+0x394>)
 8008dfa:	1e77      	subs	r7, r6, #1
 8008dfc:	18cb      	adds	r3, r1, r3
 8008dfe:	9218      	str	r2, [sp, #96]	@ 0x60
 8008e00:	e776      	b.n	8008cf0 <_dtoa_r+0x100>
 8008e02:	2320      	movs	r3, #32
 8008e04:	0020      	movs	r0, r4
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	4098      	lsls	r0, r3
 8008e0a:	e7f2      	b.n	8008df2 <_dtoa_r+0x202>
 8008e0c:	9015      	str	r0, [sp, #84]	@ 0x54
 8008e0e:	e7ba      	b.n	8008d86 <_dtoa_r+0x196>
 8008e10:	920d      	str	r2, [sp, #52]	@ 0x34
 8008e12:	e7c3      	b.n	8008d9c <_dtoa_r+0x1ac>
 8008e14:	9b06      	ldr	r3, [sp, #24]
 8008e16:	9a04      	ldr	r2, [sp, #16]
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	9306      	str	r3, [sp, #24]
 8008e1c:	4253      	negs	r3, r2
 8008e1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e20:	2300      	movs	r3, #0
 8008e22:	9314      	str	r3, [sp, #80]	@ 0x50
 8008e24:	e7c5      	b.n	8008db2 <_dtoa_r+0x1c2>
 8008e26:	2301      	movs	r3, #1
 8008e28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e2c:	4694      	mov	ip, r2
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	4463      	add	r3, ip
 8008e32:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e34:	3301      	adds	r3, #1
 8008e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dc08      	bgt.n	8008e4e <_dtoa_r+0x25e>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e006      	b.n	8008e4e <_dtoa_r+0x25e>
 8008e40:	2301      	movs	r3, #1
 8008e42:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dd28      	ble.n	8008e9c <_dtoa_r+0x2ac>
 8008e4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e4e:	9a03      	ldr	r2, [sp, #12]
 8008e50:	2100      	movs	r1, #0
 8008e52:	69d0      	ldr	r0, [r2, #28]
 8008e54:	2204      	movs	r2, #4
 8008e56:	0015      	movs	r5, r2
 8008e58:	3514      	adds	r5, #20
 8008e5a:	429d      	cmp	r5, r3
 8008e5c:	d923      	bls.n	8008ea6 <_dtoa_r+0x2b6>
 8008e5e:	6041      	str	r1, [r0, #4]
 8008e60:	9803      	ldr	r0, [sp, #12]
 8008e62:	f000 fdbb 	bl	80099dc <_Balloc>
 8008e66:	9008      	str	r0, [sp, #32]
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d11f      	bne.n	8008eac <_dtoa_r+0x2bc>
 8008e6c:	21b0      	movs	r1, #176	@ 0xb0
 8008e6e:	4b46      	ldr	r3, [pc, #280]	@ (8008f88 <_dtoa_r+0x398>)
 8008e70:	4831      	ldr	r0, [pc, #196]	@ (8008f38 <_dtoa_r+0x348>)
 8008e72:	9a08      	ldr	r2, [sp, #32]
 8008e74:	31ff      	adds	r1, #255	@ 0xff
 8008e76:	e6d0      	b.n	8008c1a <_dtoa_r+0x2a>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e7e2      	b.n	8008e42 <_dtoa_r+0x252>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	e7d3      	b.n	8008e28 <_dtoa_r+0x238>
 8008e80:	2300      	movs	r3, #0
 8008e82:	9410      	str	r4, [sp, #64]	@ 0x40
 8008e84:	9322      	str	r3, [sp, #136]	@ 0x88
 8008e86:	3b01      	subs	r3, #1
 8008e88:	2200      	movs	r2, #0
 8008e8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e8e:	3313      	adds	r3, #19
 8008e90:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008e92:	e7dc      	b.n	8008e4e <_dtoa_r+0x25e>
 8008e94:	2301      	movs	r3, #1
 8008e96:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e98:	3b02      	subs	r3, #2
 8008e9a:	e7f5      	b.n	8008e88 <_dtoa_r+0x298>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	001a      	movs	r2, r3
 8008ea0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea4:	e7f4      	b.n	8008e90 <_dtoa_r+0x2a0>
 8008ea6:	3101      	adds	r1, #1
 8008ea8:	0052      	lsls	r2, r2, #1
 8008eaa:	e7d4      	b.n	8008e56 <_dtoa_r+0x266>
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	9a08      	ldr	r2, [sp, #32]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb6:	2b0e      	cmp	r3, #14
 8008eb8:	d900      	bls.n	8008ebc <_dtoa_r+0x2cc>
 8008eba:	e0d6      	b.n	800906a <_dtoa_r+0x47a>
 8008ebc:	2c00      	cmp	r4, #0
 8008ebe:	d100      	bne.n	8008ec2 <_dtoa_r+0x2d2>
 8008ec0:	e0d3      	b.n	800906a <_dtoa_r+0x47a>
 8008ec2:	9b04      	ldr	r3, [sp, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dd63      	ble.n	8008f90 <_dtoa_r+0x3a0>
 8008ec8:	210f      	movs	r1, #15
 8008eca:	9a04      	ldr	r2, [sp, #16]
 8008ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8008f78 <_dtoa_r+0x388>)
 8008ece:	400a      	ands	r2, r1
 8008ed0:	00d2      	lsls	r2, r2, #3
 8008ed2:	189b      	adds	r3, r3, r2
 8008ed4:	681e      	ldr	r6, [r3, #0]
 8008ed6:	685f      	ldr	r7, [r3, #4]
 8008ed8:	9b04      	ldr	r3, [sp, #16]
 8008eda:	2402      	movs	r4, #2
 8008edc:	111d      	asrs	r5, r3, #4
 8008ede:	05db      	lsls	r3, r3, #23
 8008ee0:	d50a      	bpl.n	8008ef8 <_dtoa_r+0x308>
 8008ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8008f8c <_dtoa_r+0x39c>)
 8008ee4:	400d      	ands	r5, r1
 8008ee6:	6a1a      	ldr	r2, [r3, #32]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008eec:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008eee:	f7f7 ffa5 	bl	8000e3c <__aeabi_ddiv>
 8008ef2:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ef4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ef6:	3401      	adds	r4, #1
 8008ef8:	4b24      	ldr	r3, [pc, #144]	@ (8008f8c <_dtoa_r+0x39c>)
 8008efa:	930c      	str	r3, [sp, #48]	@ 0x30
 8008efc:	2d00      	cmp	r5, #0
 8008efe:	d108      	bne.n	8008f12 <_dtoa_r+0x322>
 8008f00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f04:	0032      	movs	r2, r6
 8008f06:	003b      	movs	r3, r7
 8008f08:	f7f7 ff98 	bl	8000e3c <__aeabi_ddiv>
 8008f0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f10:	e059      	b.n	8008fc6 <_dtoa_r+0x3d6>
 8008f12:	2301      	movs	r3, #1
 8008f14:	421d      	tst	r5, r3
 8008f16:	d009      	beq.n	8008f2c <_dtoa_r+0x33c>
 8008f18:	18e4      	adds	r4, r4, r3
 8008f1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f1c:	0030      	movs	r0, r6
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	0039      	movs	r1, r7
 8008f24:	f7f8 fbc4 	bl	80016b0 <__aeabi_dmul>
 8008f28:	0006      	movs	r6, r0
 8008f2a:	000f      	movs	r7, r1
 8008f2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f2e:	106d      	asrs	r5, r5, #1
 8008f30:	3308      	adds	r3, #8
 8008f32:	e7e2      	b.n	8008efa <_dtoa_r+0x30a>
 8008f34:	0800b095 	.word	0x0800b095
 8008f38:	0800b0ac 	.word	0x0800b0ac
 8008f3c:	7ff00000 	.word	0x7ff00000
 8008f40:	0000270f 	.word	0x0000270f
 8008f44:	0800b091 	.word	0x0800b091
 8008f48:	0800b094 	.word	0x0800b094
 8008f4c:	0800b065 	.word	0x0800b065
 8008f50:	0800b064 	.word	0x0800b064
 8008f54:	3ff00000 	.word	0x3ff00000
 8008f58:	fffffc01 	.word	0xfffffc01
 8008f5c:	3ff80000 	.word	0x3ff80000
 8008f60:	636f4361 	.word	0x636f4361
 8008f64:	3fd287a7 	.word	0x3fd287a7
 8008f68:	8b60c8b3 	.word	0x8b60c8b3
 8008f6c:	3fc68a28 	.word	0x3fc68a28
 8008f70:	509f79fb 	.word	0x509f79fb
 8008f74:	3fd34413 	.word	0x3fd34413
 8008f78:	0800b200 	.word	0x0800b200
 8008f7c:	00000432 	.word	0x00000432
 8008f80:	00000412 	.word	0x00000412
 8008f84:	fe100000 	.word	0xfe100000
 8008f88:	0800b104 	.word	0x0800b104
 8008f8c:	0800b1d8 	.word	0x0800b1d8
 8008f90:	9b04      	ldr	r3, [sp, #16]
 8008f92:	2402      	movs	r4, #2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d016      	beq.n	8008fc6 <_dtoa_r+0x3d6>
 8008f98:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008f9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008f9c:	220f      	movs	r2, #15
 8008f9e:	425d      	negs	r5, r3
 8008fa0:	402a      	ands	r2, r5
 8008fa2:	4bd5      	ldr	r3, [pc, #852]	@ (80092f8 <_dtoa_r+0x708>)
 8008fa4:	00d2      	lsls	r2, r2, #3
 8008fa6:	189b      	adds	r3, r3, r2
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f7f8 fb80 	bl	80016b0 <__aeabi_dmul>
 8008fb0:	2701      	movs	r7, #1
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008fb8:	4ed0      	ldr	r6, [pc, #832]	@ (80092fc <_dtoa_r+0x70c>)
 8008fba:	112d      	asrs	r5, r5, #4
 8008fbc:	2d00      	cmp	r5, #0
 8008fbe:	d000      	beq.n	8008fc2 <_dtoa_r+0x3d2>
 8008fc0:	e095      	b.n	80090ee <_dtoa_r+0x4fe>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1a2      	bne.n	8008f0c <_dtoa_r+0x31c>
 8008fc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008fc8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008fca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d100      	bne.n	8008fd2 <_dtoa_r+0x3e2>
 8008fd0:	e098      	b.n	8009104 <_dtoa_r+0x514>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	0030      	movs	r0, r6
 8008fd6:	0039      	movs	r1, r7
 8008fd8:	4bc9      	ldr	r3, [pc, #804]	@ (8009300 <_dtoa_r+0x710>)
 8008fda:	f7f7 fa3b 	bl	8000454 <__aeabi_dcmplt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d100      	bne.n	8008fe4 <_dtoa_r+0x3f4>
 8008fe2:	e08f      	b.n	8009104 <_dtoa_r+0x514>
 8008fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d100      	bne.n	8008fec <_dtoa_r+0x3fc>
 8008fea:	e08b      	b.n	8009104 <_dtoa_r+0x514>
 8008fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dd37      	ble.n	8009062 <_dtoa_r+0x472>
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ffa:	0030      	movs	r0, r6
 8008ffc:	4bc1      	ldr	r3, [pc, #772]	@ (8009304 <_dtoa_r+0x714>)
 8008ffe:	0039      	movs	r1, r7
 8009000:	f7f8 fb56 	bl	80016b0 <__aeabi_dmul>
 8009004:	900a      	str	r0, [sp, #40]	@ 0x28
 8009006:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800900a:	3401      	adds	r4, #1
 800900c:	0020      	movs	r0, r4
 800900e:	9311      	str	r3, [sp, #68]	@ 0x44
 8009010:	f7f9 fa9c 	bl	800254c <__aeabi_i2d>
 8009014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009018:	f7f8 fb4a 	bl	80016b0 <__aeabi_dmul>
 800901c:	4bba      	ldr	r3, [pc, #744]	@ (8009308 <_dtoa_r+0x718>)
 800901e:	2200      	movs	r2, #0
 8009020:	f7f7 fb46 	bl	80006b0 <__aeabi_dadd>
 8009024:	4bb9      	ldr	r3, [pc, #740]	@ (800930c <_dtoa_r+0x71c>)
 8009026:	0006      	movs	r6, r0
 8009028:	18cf      	adds	r7, r1, r3
 800902a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800902c:	2b00      	cmp	r3, #0
 800902e:	d16d      	bne.n	800910c <_dtoa_r+0x51c>
 8009030:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009032:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009034:	2200      	movs	r2, #0
 8009036:	4bb6      	ldr	r3, [pc, #728]	@ (8009310 <_dtoa_r+0x720>)
 8009038:	f7f8 fe20 	bl	8001c7c <__aeabi_dsub>
 800903c:	0032      	movs	r2, r6
 800903e:	003b      	movs	r3, r7
 8009040:	0004      	movs	r4, r0
 8009042:	000d      	movs	r5, r1
 8009044:	f7f7 fa1a 	bl	800047c <__aeabi_dcmpgt>
 8009048:	2800      	cmp	r0, #0
 800904a:	d000      	beq.n	800904e <_dtoa_r+0x45e>
 800904c:	e2b6      	b.n	80095bc <_dtoa_r+0x9cc>
 800904e:	2180      	movs	r1, #128	@ 0x80
 8009050:	0609      	lsls	r1, r1, #24
 8009052:	187b      	adds	r3, r7, r1
 8009054:	0032      	movs	r2, r6
 8009056:	0020      	movs	r0, r4
 8009058:	0029      	movs	r1, r5
 800905a:	f7f7 f9fb 	bl	8000454 <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	d128      	bne.n	80090b4 <_dtoa_r+0x4c4>
 8009062:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009064:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009066:	930a      	str	r3, [sp, #40]	@ 0x28
 8009068:	940b      	str	r4, [sp, #44]	@ 0x2c
 800906a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800906c:	2b00      	cmp	r3, #0
 800906e:	da00      	bge.n	8009072 <_dtoa_r+0x482>
 8009070:	e174      	b.n	800935c <_dtoa_r+0x76c>
 8009072:	9a04      	ldr	r2, [sp, #16]
 8009074:	2a0e      	cmp	r2, #14
 8009076:	dd00      	ble.n	800907a <_dtoa_r+0x48a>
 8009078:	e170      	b.n	800935c <_dtoa_r+0x76c>
 800907a:	4b9f      	ldr	r3, [pc, #636]	@ (80092f8 <_dtoa_r+0x708>)
 800907c:	00d2      	lsls	r2, r2, #3
 800907e:	189b      	adds	r3, r3, r2
 8009080:	685c      	ldr	r4, [r3, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	9306      	str	r3, [sp, #24]
 8009086:	9407      	str	r4, [sp, #28]
 8009088:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800908a:	2b00      	cmp	r3, #0
 800908c:	db00      	blt.n	8009090 <_dtoa_r+0x4a0>
 800908e:	e0e7      	b.n	8009260 <_dtoa_r+0x670>
 8009090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009092:	2b00      	cmp	r3, #0
 8009094:	dd00      	ble.n	8009098 <_dtoa_r+0x4a8>
 8009096:	e0e3      	b.n	8009260 <_dtoa_r+0x670>
 8009098:	d10c      	bne.n	80090b4 <_dtoa_r+0x4c4>
 800909a:	9806      	ldr	r0, [sp, #24]
 800909c:	9907      	ldr	r1, [sp, #28]
 800909e:	2200      	movs	r2, #0
 80090a0:	4b9b      	ldr	r3, [pc, #620]	@ (8009310 <_dtoa_r+0x720>)
 80090a2:	f7f8 fb05 	bl	80016b0 <__aeabi_dmul>
 80090a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090aa:	f7f7 f9f1 	bl	8000490 <__aeabi_dcmpge>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d100      	bne.n	80090b4 <_dtoa_r+0x4c4>
 80090b2:	e286      	b.n	80095c2 <_dtoa_r+0x9d2>
 80090b4:	2600      	movs	r6, #0
 80090b6:	0037      	movs	r7, r6
 80090b8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090ba:	9c08      	ldr	r4, [sp, #32]
 80090bc:	43db      	mvns	r3, r3
 80090be:	930c      	str	r3, [sp, #48]	@ 0x30
 80090c0:	9704      	str	r7, [sp, #16]
 80090c2:	2700      	movs	r7, #0
 80090c4:	0031      	movs	r1, r6
 80090c6:	9803      	ldr	r0, [sp, #12]
 80090c8:	f000 fccc 	bl	8009a64 <_Bfree>
 80090cc:	9b04      	ldr	r3, [sp, #16]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d100      	bne.n	80090d4 <_dtoa_r+0x4e4>
 80090d2:	e0bb      	b.n	800924c <_dtoa_r+0x65c>
 80090d4:	2f00      	cmp	r7, #0
 80090d6:	d005      	beq.n	80090e4 <_dtoa_r+0x4f4>
 80090d8:	429f      	cmp	r7, r3
 80090da:	d003      	beq.n	80090e4 <_dtoa_r+0x4f4>
 80090dc:	0039      	movs	r1, r7
 80090de:	9803      	ldr	r0, [sp, #12]
 80090e0:	f000 fcc0 	bl	8009a64 <_Bfree>
 80090e4:	9904      	ldr	r1, [sp, #16]
 80090e6:	9803      	ldr	r0, [sp, #12]
 80090e8:	f000 fcbc 	bl	8009a64 <_Bfree>
 80090ec:	e0ae      	b.n	800924c <_dtoa_r+0x65c>
 80090ee:	423d      	tst	r5, r7
 80090f0:	d005      	beq.n	80090fe <_dtoa_r+0x50e>
 80090f2:	6832      	ldr	r2, [r6, #0]
 80090f4:	6873      	ldr	r3, [r6, #4]
 80090f6:	f7f8 fadb 	bl	80016b0 <__aeabi_dmul>
 80090fa:	003b      	movs	r3, r7
 80090fc:	3401      	adds	r4, #1
 80090fe:	106d      	asrs	r5, r5, #1
 8009100:	3608      	adds	r6, #8
 8009102:	e75b      	b.n	8008fbc <_dtoa_r+0x3cc>
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	930c      	str	r3, [sp, #48]	@ 0x30
 8009108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910a:	e77f      	b.n	800900c <_dtoa_r+0x41c>
 800910c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800910e:	4b7a      	ldr	r3, [pc, #488]	@ (80092f8 <_dtoa_r+0x708>)
 8009110:	3a01      	subs	r2, #1
 8009112:	00d2      	lsls	r2, r2, #3
 8009114:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009116:	189b      	adds	r3, r3, r2
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2900      	cmp	r1, #0
 800911e:	d04c      	beq.n	80091ba <_dtoa_r+0x5ca>
 8009120:	2000      	movs	r0, #0
 8009122:	497c      	ldr	r1, [pc, #496]	@ (8009314 <_dtoa_r+0x724>)
 8009124:	f7f7 fe8a 	bl	8000e3c <__aeabi_ddiv>
 8009128:	0032      	movs	r2, r6
 800912a:	003b      	movs	r3, r7
 800912c:	f7f8 fda6 	bl	8001c7c <__aeabi_dsub>
 8009130:	9a08      	ldr	r2, [sp, #32]
 8009132:	0006      	movs	r6, r0
 8009134:	4694      	mov	ip, r2
 8009136:	000f      	movs	r7, r1
 8009138:	9b08      	ldr	r3, [sp, #32]
 800913a:	9316      	str	r3, [sp, #88]	@ 0x58
 800913c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800913e:	4463      	add	r3, ip
 8009140:	9311      	str	r3, [sp, #68]	@ 0x44
 8009142:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009146:	f7f9 f9c5 	bl	80024d4 <__aeabi_d2iz>
 800914a:	0005      	movs	r5, r0
 800914c:	f7f9 f9fe 	bl	800254c <__aeabi_i2d>
 8009150:	0002      	movs	r2, r0
 8009152:	000b      	movs	r3, r1
 8009154:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009156:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009158:	f7f8 fd90 	bl	8001c7c <__aeabi_dsub>
 800915c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800915e:	3530      	adds	r5, #48	@ 0x30
 8009160:	1c5c      	adds	r4, r3, #1
 8009162:	701d      	strb	r5, [r3, #0]
 8009164:	0032      	movs	r2, r6
 8009166:	003b      	movs	r3, r7
 8009168:	900a      	str	r0, [sp, #40]	@ 0x28
 800916a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800916c:	f7f7 f972 	bl	8000454 <__aeabi_dcmplt>
 8009170:	2800      	cmp	r0, #0
 8009172:	d16b      	bne.n	800924c <_dtoa_r+0x65c>
 8009174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009178:	2000      	movs	r0, #0
 800917a:	4961      	ldr	r1, [pc, #388]	@ (8009300 <_dtoa_r+0x710>)
 800917c:	f7f8 fd7e 	bl	8001c7c <__aeabi_dsub>
 8009180:	0032      	movs	r2, r6
 8009182:	003b      	movs	r3, r7
 8009184:	f7f7 f966 	bl	8000454 <__aeabi_dcmplt>
 8009188:	2800      	cmp	r0, #0
 800918a:	d000      	beq.n	800918e <_dtoa_r+0x59e>
 800918c:	e0c6      	b.n	800931c <_dtoa_r+0x72c>
 800918e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009190:	42a3      	cmp	r3, r4
 8009192:	d100      	bne.n	8009196 <_dtoa_r+0x5a6>
 8009194:	e765      	b.n	8009062 <_dtoa_r+0x472>
 8009196:	2200      	movs	r2, #0
 8009198:	0030      	movs	r0, r6
 800919a:	0039      	movs	r1, r7
 800919c:	4b59      	ldr	r3, [pc, #356]	@ (8009304 <_dtoa_r+0x714>)
 800919e:	f7f8 fa87 	bl	80016b0 <__aeabi_dmul>
 80091a2:	2200      	movs	r2, #0
 80091a4:	0006      	movs	r6, r0
 80091a6:	000f      	movs	r7, r1
 80091a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091ac:	4b55      	ldr	r3, [pc, #340]	@ (8009304 <_dtoa_r+0x714>)
 80091ae:	f7f8 fa7f 	bl	80016b0 <__aeabi_dmul>
 80091b2:	9416      	str	r4, [sp, #88]	@ 0x58
 80091b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80091b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80091b8:	e7c3      	b.n	8009142 <_dtoa_r+0x552>
 80091ba:	0030      	movs	r0, r6
 80091bc:	0039      	movs	r1, r7
 80091be:	f7f8 fa77 	bl	80016b0 <__aeabi_dmul>
 80091c2:	9d08      	ldr	r5, [sp, #32]
 80091c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80091c6:	002b      	movs	r3, r5
 80091c8:	4694      	mov	ip, r2
 80091ca:	9016      	str	r0, [sp, #88]	@ 0x58
 80091cc:	9117      	str	r1, [sp, #92]	@ 0x5c
 80091ce:	4463      	add	r3, ip
 80091d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80091d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091d6:	f7f9 f97d 	bl	80024d4 <__aeabi_d2iz>
 80091da:	0004      	movs	r4, r0
 80091dc:	f7f9 f9b6 	bl	800254c <__aeabi_i2d>
 80091e0:	000b      	movs	r3, r1
 80091e2:	0002      	movs	r2, r0
 80091e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091e8:	f7f8 fd48 	bl	8001c7c <__aeabi_dsub>
 80091ec:	3430      	adds	r4, #48	@ 0x30
 80091ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091f0:	702c      	strb	r4, [r5, #0]
 80091f2:	3501      	adds	r5, #1
 80091f4:	0006      	movs	r6, r0
 80091f6:	000f      	movs	r7, r1
 80091f8:	42ab      	cmp	r3, r5
 80091fa:	d12a      	bne.n	8009252 <_dtoa_r+0x662>
 80091fc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80091fe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009200:	9b08      	ldr	r3, [sp, #32]
 8009202:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009204:	469c      	mov	ip, r3
 8009206:	2200      	movs	r2, #0
 8009208:	4b42      	ldr	r3, [pc, #264]	@ (8009314 <_dtoa_r+0x724>)
 800920a:	4464      	add	r4, ip
 800920c:	f7f7 fa50 	bl	80006b0 <__aeabi_dadd>
 8009210:	0002      	movs	r2, r0
 8009212:	000b      	movs	r3, r1
 8009214:	0030      	movs	r0, r6
 8009216:	0039      	movs	r1, r7
 8009218:	f7f7 f930 	bl	800047c <__aeabi_dcmpgt>
 800921c:	2800      	cmp	r0, #0
 800921e:	d000      	beq.n	8009222 <_dtoa_r+0x632>
 8009220:	e07c      	b.n	800931c <_dtoa_r+0x72c>
 8009222:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009224:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009226:	2000      	movs	r0, #0
 8009228:	493a      	ldr	r1, [pc, #232]	@ (8009314 <_dtoa_r+0x724>)
 800922a:	f7f8 fd27 	bl	8001c7c <__aeabi_dsub>
 800922e:	0002      	movs	r2, r0
 8009230:	000b      	movs	r3, r1
 8009232:	0030      	movs	r0, r6
 8009234:	0039      	movs	r1, r7
 8009236:	f7f7 f90d 	bl	8000454 <__aeabi_dcmplt>
 800923a:	2800      	cmp	r0, #0
 800923c:	d100      	bne.n	8009240 <_dtoa_r+0x650>
 800923e:	e710      	b.n	8009062 <_dtoa_r+0x472>
 8009240:	0023      	movs	r3, r4
 8009242:	3c01      	subs	r4, #1
 8009244:	7822      	ldrb	r2, [r4, #0]
 8009246:	2a30      	cmp	r2, #48	@ 0x30
 8009248:	d0fa      	beq.n	8009240 <_dtoa_r+0x650>
 800924a:	001c      	movs	r4, r3
 800924c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	e042      	b.n	80092d8 <_dtoa_r+0x6e8>
 8009252:	2200      	movs	r2, #0
 8009254:	4b2b      	ldr	r3, [pc, #172]	@ (8009304 <_dtoa_r+0x714>)
 8009256:	f7f8 fa2b 	bl	80016b0 <__aeabi_dmul>
 800925a:	900a      	str	r0, [sp, #40]	@ 0x28
 800925c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800925e:	e7b8      	b.n	80091d2 <_dtoa_r+0x5e2>
 8009260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009262:	9d08      	ldr	r5, [sp, #32]
 8009264:	3b01      	subs	r3, #1
 8009266:	195b      	adds	r3, r3, r5
 8009268:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800926a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800926c:	930a      	str	r3, [sp, #40]	@ 0x28
 800926e:	9a06      	ldr	r2, [sp, #24]
 8009270:	9b07      	ldr	r3, [sp, #28]
 8009272:	0030      	movs	r0, r6
 8009274:	0039      	movs	r1, r7
 8009276:	f7f7 fde1 	bl	8000e3c <__aeabi_ddiv>
 800927a:	f7f9 f92b 	bl	80024d4 <__aeabi_d2iz>
 800927e:	9009      	str	r0, [sp, #36]	@ 0x24
 8009280:	f7f9 f964 	bl	800254c <__aeabi_i2d>
 8009284:	9a06      	ldr	r2, [sp, #24]
 8009286:	9b07      	ldr	r3, [sp, #28]
 8009288:	f7f8 fa12 	bl	80016b0 <__aeabi_dmul>
 800928c:	0002      	movs	r2, r0
 800928e:	000b      	movs	r3, r1
 8009290:	0030      	movs	r0, r6
 8009292:	0039      	movs	r1, r7
 8009294:	f7f8 fcf2 	bl	8001c7c <__aeabi_dsub>
 8009298:	002b      	movs	r3, r5
 800929a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800929c:	3501      	adds	r5, #1
 800929e:	3230      	adds	r2, #48	@ 0x30
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092a4:	002c      	movs	r4, r5
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d14b      	bne.n	8009342 <_dtoa_r+0x752>
 80092aa:	0002      	movs	r2, r0
 80092ac:	000b      	movs	r3, r1
 80092ae:	f7f7 f9ff 	bl	80006b0 <__aeabi_dadd>
 80092b2:	9a06      	ldr	r2, [sp, #24]
 80092b4:	9b07      	ldr	r3, [sp, #28]
 80092b6:	0006      	movs	r6, r0
 80092b8:	000f      	movs	r7, r1
 80092ba:	f7f7 f8df 	bl	800047c <__aeabi_dcmpgt>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d12a      	bne.n	8009318 <_dtoa_r+0x728>
 80092c2:	9a06      	ldr	r2, [sp, #24]
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	0030      	movs	r0, r6
 80092c8:	0039      	movs	r1, r7
 80092ca:	f7f7 f8bd 	bl	8000448 <__aeabi_dcmpeq>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d002      	beq.n	80092d8 <_dtoa_r+0x6e8>
 80092d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d4:	07dd      	lsls	r5, r3, #31
 80092d6:	d41f      	bmi.n	8009318 <_dtoa_r+0x728>
 80092d8:	9905      	ldr	r1, [sp, #20]
 80092da:	9803      	ldr	r0, [sp, #12]
 80092dc:	f000 fbc2 	bl	8009a64 <_Bfree>
 80092e0:	2300      	movs	r3, #0
 80092e2:	7023      	strb	r3, [r4, #0]
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80092e8:	3301      	adds	r3, #1
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d100      	bne.n	80092f4 <_dtoa_r+0x704>
 80092f2:	e4c7      	b.n	8008c84 <_dtoa_r+0x94>
 80092f4:	601c      	str	r4, [r3, #0]
 80092f6:	e4c5      	b.n	8008c84 <_dtoa_r+0x94>
 80092f8:	0800b200 	.word	0x0800b200
 80092fc:	0800b1d8 	.word	0x0800b1d8
 8009300:	3ff00000 	.word	0x3ff00000
 8009304:	40240000 	.word	0x40240000
 8009308:	401c0000 	.word	0x401c0000
 800930c:	fcc00000 	.word	0xfcc00000
 8009310:	40140000 	.word	0x40140000
 8009314:	3fe00000 	.word	0x3fe00000
 8009318:	9b04      	ldr	r3, [sp, #16]
 800931a:	930c      	str	r3, [sp, #48]	@ 0x30
 800931c:	0023      	movs	r3, r4
 800931e:	001c      	movs	r4, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	781a      	ldrb	r2, [r3, #0]
 8009324:	2a39      	cmp	r2, #57	@ 0x39
 8009326:	d108      	bne.n	800933a <_dtoa_r+0x74a>
 8009328:	9a08      	ldr	r2, [sp, #32]
 800932a:	429a      	cmp	r2, r3
 800932c:	d1f7      	bne.n	800931e <_dtoa_r+0x72e>
 800932e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009330:	9908      	ldr	r1, [sp, #32]
 8009332:	3201      	adds	r2, #1
 8009334:	920c      	str	r2, [sp, #48]	@ 0x30
 8009336:	2230      	movs	r2, #48	@ 0x30
 8009338:	700a      	strb	r2, [r1, #0]
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	3201      	adds	r2, #1
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	e784      	b.n	800924c <_dtoa_r+0x65c>
 8009342:	2200      	movs	r2, #0
 8009344:	4bc6      	ldr	r3, [pc, #792]	@ (8009660 <_dtoa_r+0xa70>)
 8009346:	f7f8 f9b3 	bl	80016b0 <__aeabi_dmul>
 800934a:	2200      	movs	r2, #0
 800934c:	2300      	movs	r3, #0
 800934e:	0006      	movs	r6, r0
 8009350:	000f      	movs	r7, r1
 8009352:	f7f7 f879 	bl	8000448 <__aeabi_dcmpeq>
 8009356:	2800      	cmp	r0, #0
 8009358:	d089      	beq.n	800926e <_dtoa_r+0x67e>
 800935a:	e7bd      	b.n	80092d8 <_dtoa_r+0x6e8>
 800935c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800935e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009360:	9c06      	ldr	r4, [sp, #24]
 8009362:	2f00      	cmp	r7, #0
 8009364:	d014      	beq.n	8009390 <_dtoa_r+0x7a0>
 8009366:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009368:	2a01      	cmp	r2, #1
 800936a:	dd00      	ble.n	800936e <_dtoa_r+0x77e>
 800936c:	e0e4      	b.n	8009538 <_dtoa_r+0x948>
 800936e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009370:	2a00      	cmp	r2, #0
 8009372:	d100      	bne.n	8009376 <_dtoa_r+0x786>
 8009374:	e0da      	b.n	800952c <_dtoa_r+0x93c>
 8009376:	4abb      	ldr	r2, [pc, #748]	@ (8009664 <_dtoa_r+0xa74>)
 8009378:	189b      	adds	r3, r3, r2
 800937a:	9a06      	ldr	r2, [sp, #24]
 800937c:	2101      	movs	r1, #1
 800937e:	18d2      	adds	r2, r2, r3
 8009380:	9206      	str	r2, [sp, #24]
 8009382:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009384:	9803      	ldr	r0, [sp, #12]
 8009386:	18d3      	adds	r3, r2, r3
 8009388:	930d      	str	r3, [sp, #52]	@ 0x34
 800938a:	f000 fc23 	bl	8009bd4 <__i2b>
 800938e:	0007      	movs	r7, r0
 8009390:	2c00      	cmp	r4, #0
 8009392:	d00e      	beq.n	80093b2 <_dtoa_r+0x7c2>
 8009394:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009396:	2b00      	cmp	r3, #0
 8009398:	dd0b      	ble.n	80093b2 <_dtoa_r+0x7c2>
 800939a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800939c:	0023      	movs	r3, r4
 800939e:	4294      	cmp	r4, r2
 80093a0:	dd00      	ble.n	80093a4 <_dtoa_r+0x7b4>
 80093a2:	0013      	movs	r3, r2
 80093a4:	9a06      	ldr	r2, [sp, #24]
 80093a6:	1ae4      	subs	r4, r4, r3
 80093a8:	1ad2      	subs	r2, r2, r3
 80093aa:	9206      	str	r2, [sp, #24]
 80093ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	930d      	str	r3, [sp, #52]	@ 0x34
 80093b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d021      	beq.n	80093fc <_dtoa_r+0x80c>
 80093b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d100      	bne.n	80093c0 <_dtoa_r+0x7d0>
 80093be:	e0d3      	b.n	8009568 <_dtoa_r+0x978>
 80093c0:	9e05      	ldr	r6, [sp, #20]
 80093c2:	2d00      	cmp	r5, #0
 80093c4:	d014      	beq.n	80093f0 <_dtoa_r+0x800>
 80093c6:	0039      	movs	r1, r7
 80093c8:	002a      	movs	r2, r5
 80093ca:	9803      	ldr	r0, [sp, #12]
 80093cc:	f000 fcc4 	bl	8009d58 <__pow5mult>
 80093d0:	9a05      	ldr	r2, [sp, #20]
 80093d2:	0001      	movs	r1, r0
 80093d4:	0007      	movs	r7, r0
 80093d6:	9803      	ldr	r0, [sp, #12]
 80093d8:	f000 fc14 	bl	8009c04 <__multiply>
 80093dc:	0006      	movs	r6, r0
 80093de:	9905      	ldr	r1, [sp, #20]
 80093e0:	9803      	ldr	r0, [sp, #12]
 80093e2:	f000 fb3f 	bl	8009a64 <_Bfree>
 80093e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093e8:	9605      	str	r6, [sp, #20]
 80093ea:	1b5b      	subs	r3, r3, r5
 80093ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093ee:	d005      	beq.n	80093fc <_dtoa_r+0x80c>
 80093f0:	0031      	movs	r1, r6
 80093f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80093f4:	9803      	ldr	r0, [sp, #12]
 80093f6:	f000 fcaf 	bl	8009d58 <__pow5mult>
 80093fa:	9005      	str	r0, [sp, #20]
 80093fc:	2101      	movs	r1, #1
 80093fe:	9803      	ldr	r0, [sp, #12]
 8009400:	f000 fbe8 	bl	8009bd4 <__i2b>
 8009404:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009406:	0006      	movs	r6, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d100      	bne.n	800940e <_dtoa_r+0x81e>
 800940c:	e1bc      	b.n	8009788 <_dtoa_r+0xb98>
 800940e:	001a      	movs	r2, r3
 8009410:	0001      	movs	r1, r0
 8009412:	9803      	ldr	r0, [sp, #12]
 8009414:	f000 fca0 	bl	8009d58 <__pow5mult>
 8009418:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800941a:	0006      	movs	r6, r0
 800941c:	2500      	movs	r5, #0
 800941e:	2b01      	cmp	r3, #1
 8009420:	dc16      	bgt.n	8009450 <_dtoa_r+0x860>
 8009422:	2500      	movs	r5, #0
 8009424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009426:	42ab      	cmp	r3, r5
 8009428:	d10e      	bne.n	8009448 <_dtoa_r+0x858>
 800942a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800942c:	031b      	lsls	r3, r3, #12
 800942e:	42ab      	cmp	r3, r5
 8009430:	d10a      	bne.n	8009448 <_dtoa_r+0x858>
 8009432:	4b8d      	ldr	r3, [pc, #564]	@ (8009668 <_dtoa_r+0xa78>)
 8009434:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009436:	4213      	tst	r3, r2
 8009438:	d006      	beq.n	8009448 <_dtoa_r+0x858>
 800943a:	9b06      	ldr	r3, [sp, #24]
 800943c:	3501      	adds	r5, #1
 800943e:	3301      	adds	r3, #1
 8009440:	9306      	str	r3, [sp, #24]
 8009442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009444:	3301      	adds	r3, #1
 8009446:	930d      	str	r3, [sp, #52]	@ 0x34
 8009448:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800944a:	2001      	movs	r0, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d008      	beq.n	8009462 <_dtoa_r+0x872>
 8009450:	6933      	ldr	r3, [r6, #16]
 8009452:	3303      	adds	r3, #3
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	18f3      	adds	r3, r6, r3
 8009458:	6858      	ldr	r0, [r3, #4]
 800945a:	f000 fb6b 	bl	8009b34 <__hi0bits>
 800945e:	2320      	movs	r3, #32
 8009460:	1a18      	subs	r0, r3, r0
 8009462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009464:	1818      	adds	r0, r3, r0
 8009466:	0002      	movs	r2, r0
 8009468:	231f      	movs	r3, #31
 800946a:	401a      	ands	r2, r3
 800946c:	4218      	tst	r0, r3
 800946e:	d100      	bne.n	8009472 <_dtoa_r+0x882>
 8009470:	e081      	b.n	8009576 <_dtoa_r+0x986>
 8009472:	3301      	adds	r3, #1
 8009474:	1a9b      	subs	r3, r3, r2
 8009476:	2b04      	cmp	r3, #4
 8009478:	dd79      	ble.n	800956e <_dtoa_r+0x97e>
 800947a:	231c      	movs	r3, #28
 800947c:	1a9b      	subs	r3, r3, r2
 800947e:	9a06      	ldr	r2, [sp, #24]
 8009480:	18e4      	adds	r4, r4, r3
 8009482:	18d2      	adds	r2, r2, r3
 8009484:	9206      	str	r2, [sp, #24]
 8009486:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009488:	18d3      	adds	r3, r2, r3
 800948a:	930d      	str	r3, [sp, #52]	@ 0x34
 800948c:	9b06      	ldr	r3, [sp, #24]
 800948e:	2b00      	cmp	r3, #0
 8009490:	dd05      	ble.n	800949e <_dtoa_r+0x8ae>
 8009492:	001a      	movs	r2, r3
 8009494:	9905      	ldr	r1, [sp, #20]
 8009496:	9803      	ldr	r0, [sp, #12]
 8009498:	f000 fcba 	bl	8009e10 <__lshift>
 800949c:	9005      	str	r0, [sp, #20]
 800949e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dd05      	ble.n	80094b0 <_dtoa_r+0x8c0>
 80094a4:	0031      	movs	r1, r6
 80094a6:	001a      	movs	r2, r3
 80094a8:	9803      	ldr	r0, [sp, #12]
 80094aa:	f000 fcb1 	bl	8009e10 <__lshift>
 80094ae:	0006      	movs	r6, r0
 80094b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d061      	beq.n	800957a <_dtoa_r+0x98a>
 80094b6:	0031      	movs	r1, r6
 80094b8:	9805      	ldr	r0, [sp, #20]
 80094ba:	f000 fd15 	bl	8009ee8 <__mcmp>
 80094be:	2800      	cmp	r0, #0
 80094c0:	da5b      	bge.n	800957a <_dtoa_r+0x98a>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	220a      	movs	r2, #10
 80094c6:	3b01      	subs	r3, #1
 80094c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80094ca:	9905      	ldr	r1, [sp, #20]
 80094cc:	2300      	movs	r3, #0
 80094ce:	9803      	ldr	r0, [sp, #12]
 80094d0:	f000 faec 	bl	8009aac <__multadd>
 80094d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094d6:	9005      	str	r0, [sp, #20]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d100      	bne.n	80094de <_dtoa_r+0x8ee>
 80094dc:	e15b      	b.n	8009796 <_dtoa_r+0xba6>
 80094de:	2300      	movs	r3, #0
 80094e0:	0039      	movs	r1, r7
 80094e2:	220a      	movs	r2, #10
 80094e4:	9803      	ldr	r0, [sp, #12]
 80094e6:	f000 fae1 	bl	8009aac <__multadd>
 80094ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ec:	0007      	movs	r7, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dc4d      	bgt.n	800958e <_dtoa_r+0x99e>
 80094f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	dd46      	ble.n	8009586 <_dtoa_r+0x996>
 80094f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d000      	beq.n	8009500 <_dtoa_r+0x910>
 80094fe:	e5db      	b.n	80090b8 <_dtoa_r+0x4c8>
 8009500:	0031      	movs	r1, r6
 8009502:	2205      	movs	r2, #5
 8009504:	9803      	ldr	r0, [sp, #12]
 8009506:	f000 fad1 	bl	8009aac <__multadd>
 800950a:	0006      	movs	r6, r0
 800950c:	0001      	movs	r1, r0
 800950e:	9805      	ldr	r0, [sp, #20]
 8009510:	f000 fcea 	bl	8009ee8 <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	dc00      	bgt.n	800951a <_dtoa_r+0x92a>
 8009518:	e5ce      	b.n	80090b8 <_dtoa_r+0x4c8>
 800951a:	9b08      	ldr	r3, [sp, #32]
 800951c:	9a08      	ldr	r2, [sp, #32]
 800951e:	1c5c      	adds	r4, r3, #1
 8009520:	2331      	movs	r3, #49	@ 0x31
 8009522:	7013      	strb	r3, [r2, #0]
 8009524:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009526:	3301      	adds	r3, #1
 8009528:	930c      	str	r3, [sp, #48]	@ 0x30
 800952a:	e5c9      	b.n	80090c0 <_dtoa_r+0x4d0>
 800952c:	2336      	movs	r3, #54	@ 0x36
 800952e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009530:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009532:	1a9b      	subs	r3, r3, r2
 8009534:	9c06      	ldr	r4, [sp, #24]
 8009536:	e720      	b.n	800937a <_dtoa_r+0x78a>
 8009538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953a:	1e5d      	subs	r5, r3, #1
 800953c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953e:	42ab      	cmp	r3, r5
 8009540:	db08      	blt.n	8009554 <_dtoa_r+0x964>
 8009542:	1b5d      	subs	r5, r3, r5
 8009544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009546:	2b00      	cmp	r3, #0
 8009548:	daf4      	bge.n	8009534 <_dtoa_r+0x944>
 800954a:	9b06      	ldr	r3, [sp, #24]
 800954c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800954e:	1a9c      	subs	r4, r3, r2
 8009550:	2300      	movs	r3, #0
 8009552:	e712      	b.n	800937a <_dtoa_r+0x78a>
 8009554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009556:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009558:	1aeb      	subs	r3, r5, r3
 800955a:	18d3      	adds	r3, r2, r3
 800955c:	9314      	str	r3, [sp, #80]	@ 0x50
 800955e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009560:	9c06      	ldr	r4, [sp, #24]
 8009562:	2500      	movs	r5, #0
 8009564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009566:	e708      	b.n	800937a <_dtoa_r+0x78a>
 8009568:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800956a:	9905      	ldr	r1, [sp, #20]
 800956c:	e742      	b.n	80093f4 <_dtoa_r+0x804>
 800956e:	2b04      	cmp	r3, #4
 8009570:	d08c      	beq.n	800948c <_dtoa_r+0x89c>
 8009572:	331c      	adds	r3, #28
 8009574:	e783      	b.n	800947e <_dtoa_r+0x88e>
 8009576:	0013      	movs	r3, r2
 8009578:	e7fb      	b.n	8009572 <_dtoa_r+0x982>
 800957a:	9b04      	ldr	r3, [sp, #16]
 800957c:	930c      	str	r3, [sp, #48]	@ 0x30
 800957e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009580:	930e      	str	r3, [sp, #56]	@ 0x38
 8009582:	2b00      	cmp	r3, #0
 8009584:	ddb5      	ble.n	80094f2 <_dtoa_r+0x902>
 8009586:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009588:	2b00      	cmp	r3, #0
 800958a:	d100      	bne.n	800958e <_dtoa_r+0x99e>
 800958c:	e107      	b.n	800979e <_dtoa_r+0xbae>
 800958e:	2c00      	cmp	r4, #0
 8009590:	dd05      	ble.n	800959e <_dtoa_r+0x9ae>
 8009592:	0039      	movs	r1, r7
 8009594:	0022      	movs	r2, r4
 8009596:	9803      	ldr	r0, [sp, #12]
 8009598:	f000 fc3a 	bl	8009e10 <__lshift>
 800959c:	0007      	movs	r7, r0
 800959e:	9704      	str	r7, [sp, #16]
 80095a0:	2d00      	cmp	r5, #0
 80095a2:	d020      	beq.n	80095e6 <_dtoa_r+0x9f6>
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	9803      	ldr	r0, [sp, #12]
 80095a8:	f000 fa18 	bl	80099dc <_Balloc>
 80095ac:	1e04      	subs	r4, r0, #0
 80095ae:	d10c      	bne.n	80095ca <_dtoa_r+0x9da>
 80095b0:	0022      	movs	r2, r4
 80095b2:	4b2e      	ldr	r3, [pc, #184]	@ (800966c <_dtoa_r+0xa7c>)
 80095b4:	482e      	ldr	r0, [pc, #184]	@ (8009670 <_dtoa_r+0xa80>)
 80095b6:	492f      	ldr	r1, [pc, #188]	@ (8009674 <_dtoa_r+0xa84>)
 80095b8:	f7ff fb2f 	bl	8008c1a <_dtoa_r+0x2a>
 80095bc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80095be:	0037      	movs	r7, r6
 80095c0:	e7ab      	b.n	800951a <_dtoa_r+0x92a>
 80095c2:	9b04      	ldr	r3, [sp, #16]
 80095c4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80095c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80095c8:	e7f9      	b.n	80095be <_dtoa_r+0x9ce>
 80095ca:	0039      	movs	r1, r7
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	310c      	adds	r1, #12
 80095d0:	3202      	adds	r2, #2
 80095d2:	0092      	lsls	r2, r2, #2
 80095d4:	300c      	adds	r0, #12
 80095d6:	f7ff fa7d 	bl	8008ad4 <memcpy>
 80095da:	2201      	movs	r2, #1
 80095dc:	0021      	movs	r1, r4
 80095de:	9803      	ldr	r0, [sp, #12]
 80095e0:	f000 fc16 	bl	8009e10 <__lshift>
 80095e4:	9004      	str	r0, [sp, #16]
 80095e6:	9b08      	ldr	r3, [sp, #32]
 80095e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095ea:	9306      	str	r3, [sp, #24]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	189b      	adds	r3, r3, r2
 80095f0:	2201      	movs	r2, #1
 80095f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095f6:	4013      	ands	r3, r2
 80095f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80095fa:	0031      	movs	r1, r6
 80095fc:	9805      	ldr	r0, [sp, #20]
 80095fe:	f7ff fa72 	bl	8008ae6 <quorem>
 8009602:	0039      	movs	r1, r7
 8009604:	0005      	movs	r5, r0
 8009606:	900a      	str	r0, [sp, #40]	@ 0x28
 8009608:	9805      	ldr	r0, [sp, #20]
 800960a:	f000 fc6d 	bl	8009ee8 <__mcmp>
 800960e:	9a04      	ldr	r2, [sp, #16]
 8009610:	900d      	str	r0, [sp, #52]	@ 0x34
 8009612:	0031      	movs	r1, r6
 8009614:	9803      	ldr	r0, [sp, #12]
 8009616:	f000 fc83 	bl	8009f20 <__mdiff>
 800961a:	2201      	movs	r2, #1
 800961c:	68c3      	ldr	r3, [r0, #12]
 800961e:	0004      	movs	r4, r0
 8009620:	3530      	adds	r5, #48	@ 0x30
 8009622:	9209      	str	r2, [sp, #36]	@ 0x24
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <_dtoa_r+0xa42>
 8009628:	0001      	movs	r1, r0
 800962a:	9805      	ldr	r0, [sp, #20]
 800962c:	f000 fc5c 	bl	8009ee8 <__mcmp>
 8009630:	9009      	str	r0, [sp, #36]	@ 0x24
 8009632:	0021      	movs	r1, r4
 8009634:	9803      	ldr	r0, [sp, #12]
 8009636:	f000 fa15 	bl	8009a64 <_Bfree>
 800963a:	9b06      	ldr	r3, [sp, #24]
 800963c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800963e:	1c5c      	adds	r4, r3, #1
 8009640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009642:	4313      	orrs	r3, r2
 8009644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009646:	4313      	orrs	r3, r2
 8009648:	d116      	bne.n	8009678 <_dtoa_r+0xa88>
 800964a:	2d39      	cmp	r5, #57	@ 0x39
 800964c:	d02f      	beq.n	80096ae <_dtoa_r+0xabe>
 800964e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009650:	2b00      	cmp	r3, #0
 8009652:	dd01      	ble.n	8009658 <_dtoa_r+0xa68>
 8009654:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009656:	3531      	adds	r5, #49	@ 0x31
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	701d      	strb	r5, [r3, #0]
 800965c:	e532      	b.n	80090c4 <_dtoa_r+0x4d4>
 800965e:	46c0      	nop			@ (mov r8, r8)
 8009660:	40240000 	.word	0x40240000
 8009664:	00000433 	.word	0x00000433
 8009668:	7ff00000 	.word	0x7ff00000
 800966c:	0800b104 	.word	0x0800b104
 8009670:	0800b0ac 	.word	0x0800b0ac
 8009674:	000002ef 	.word	0x000002ef
 8009678:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800967a:	2b00      	cmp	r3, #0
 800967c:	db04      	blt.n	8009688 <_dtoa_r+0xa98>
 800967e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009680:	4313      	orrs	r3, r2
 8009682:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009684:	4313      	orrs	r3, r2
 8009686:	d11e      	bne.n	80096c6 <_dtoa_r+0xad6>
 8009688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968a:	2b00      	cmp	r3, #0
 800968c:	dde4      	ble.n	8009658 <_dtoa_r+0xa68>
 800968e:	9905      	ldr	r1, [sp, #20]
 8009690:	2201      	movs	r2, #1
 8009692:	9803      	ldr	r0, [sp, #12]
 8009694:	f000 fbbc 	bl	8009e10 <__lshift>
 8009698:	0031      	movs	r1, r6
 800969a:	9005      	str	r0, [sp, #20]
 800969c:	f000 fc24 	bl	8009ee8 <__mcmp>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	dc02      	bgt.n	80096aa <_dtoa_r+0xaba>
 80096a4:	d1d8      	bne.n	8009658 <_dtoa_r+0xa68>
 80096a6:	07eb      	lsls	r3, r5, #31
 80096a8:	d5d6      	bpl.n	8009658 <_dtoa_r+0xa68>
 80096aa:	2d39      	cmp	r5, #57	@ 0x39
 80096ac:	d1d2      	bne.n	8009654 <_dtoa_r+0xa64>
 80096ae:	2339      	movs	r3, #57	@ 0x39
 80096b0:	9a06      	ldr	r2, [sp, #24]
 80096b2:	7013      	strb	r3, [r2, #0]
 80096b4:	0023      	movs	r3, r4
 80096b6:	001c      	movs	r4, r3
 80096b8:	3b01      	subs	r3, #1
 80096ba:	781a      	ldrb	r2, [r3, #0]
 80096bc:	2a39      	cmp	r2, #57	@ 0x39
 80096be:	d050      	beq.n	8009762 <_dtoa_r+0xb72>
 80096c0:	3201      	adds	r2, #1
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	e4fe      	b.n	80090c4 <_dtoa_r+0x4d4>
 80096c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dd03      	ble.n	80096d4 <_dtoa_r+0xae4>
 80096cc:	2d39      	cmp	r5, #57	@ 0x39
 80096ce:	d0ee      	beq.n	80096ae <_dtoa_r+0xabe>
 80096d0:	3501      	adds	r5, #1
 80096d2:	e7c1      	b.n	8009658 <_dtoa_r+0xa68>
 80096d4:	9b06      	ldr	r3, [sp, #24]
 80096d6:	9a06      	ldr	r2, [sp, #24]
 80096d8:	701d      	strb	r5, [r3, #0]
 80096da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096dc:	4293      	cmp	r3, r2
 80096de:	d02b      	beq.n	8009738 <_dtoa_r+0xb48>
 80096e0:	2300      	movs	r3, #0
 80096e2:	220a      	movs	r2, #10
 80096e4:	9905      	ldr	r1, [sp, #20]
 80096e6:	9803      	ldr	r0, [sp, #12]
 80096e8:	f000 f9e0 	bl	8009aac <__multadd>
 80096ec:	9b04      	ldr	r3, [sp, #16]
 80096ee:	9005      	str	r0, [sp, #20]
 80096f0:	429f      	cmp	r7, r3
 80096f2:	d109      	bne.n	8009708 <_dtoa_r+0xb18>
 80096f4:	0039      	movs	r1, r7
 80096f6:	2300      	movs	r3, #0
 80096f8:	220a      	movs	r2, #10
 80096fa:	9803      	ldr	r0, [sp, #12]
 80096fc:	f000 f9d6 	bl	8009aac <__multadd>
 8009700:	0007      	movs	r7, r0
 8009702:	9004      	str	r0, [sp, #16]
 8009704:	9406      	str	r4, [sp, #24]
 8009706:	e778      	b.n	80095fa <_dtoa_r+0xa0a>
 8009708:	0039      	movs	r1, r7
 800970a:	2300      	movs	r3, #0
 800970c:	220a      	movs	r2, #10
 800970e:	9803      	ldr	r0, [sp, #12]
 8009710:	f000 f9cc 	bl	8009aac <__multadd>
 8009714:	2300      	movs	r3, #0
 8009716:	0007      	movs	r7, r0
 8009718:	220a      	movs	r2, #10
 800971a:	9904      	ldr	r1, [sp, #16]
 800971c:	9803      	ldr	r0, [sp, #12]
 800971e:	f000 f9c5 	bl	8009aac <__multadd>
 8009722:	9004      	str	r0, [sp, #16]
 8009724:	e7ee      	b.n	8009704 <_dtoa_r+0xb14>
 8009726:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009728:	2401      	movs	r4, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	dd00      	ble.n	8009730 <_dtoa_r+0xb40>
 800972e:	001c      	movs	r4, r3
 8009730:	9704      	str	r7, [sp, #16]
 8009732:	2700      	movs	r7, #0
 8009734:	9b08      	ldr	r3, [sp, #32]
 8009736:	191c      	adds	r4, r3, r4
 8009738:	9905      	ldr	r1, [sp, #20]
 800973a:	2201      	movs	r2, #1
 800973c:	9803      	ldr	r0, [sp, #12]
 800973e:	f000 fb67 	bl	8009e10 <__lshift>
 8009742:	0031      	movs	r1, r6
 8009744:	9005      	str	r0, [sp, #20]
 8009746:	f000 fbcf 	bl	8009ee8 <__mcmp>
 800974a:	2800      	cmp	r0, #0
 800974c:	dcb2      	bgt.n	80096b4 <_dtoa_r+0xac4>
 800974e:	d101      	bne.n	8009754 <_dtoa_r+0xb64>
 8009750:	07ed      	lsls	r5, r5, #31
 8009752:	d4af      	bmi.n	80096b4 <_dtoa_r+0xac4>
 8009754:	0023      	movs	r3, r4
 8009756:	001c      	movs	r4, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	781a      	ldrb	r2, [r3, #0]
 800975c:	2a30      	cmp	r2, #48	@ 0x30
 800975e:	d0fa      	beq.n	8009756 <_dtoa_r+0xb66>
 8009760:	e4b0      	b.n	80090c4 <_dtoa_r+0x4d4>
 8009762:	9a08      	ldr	r2, [sp, #32]
 8009764:	429a      	cmp	r2, r3
 8009766:	d1a6      	bne.n	80096b6 <_dtoa_r+0xac6>
 8009768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800976a:	3301      	adds	r3, #1
 800976c:	930c      	str	r3, [sp, #48]	@ 0x30
 800976e:	2331      	movs	r3, #49	@ 0x31
 8009770:	7013      	strb	r3, [r2, #0]
 8009772:	e4a7      	b.n	80090c4 <_dtoa_r+0x4d4>
 8009774:	4b14      	ldr	r3, [pc, #80]	@ (80097c8 <_dtoa_r+0xbd8>)
 8009776:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009778:	9308      	str	r3, [sp, #32]
 800977a:	4b14      	ldr	r3, [pc, #80]	@ (80097cc <_dtoa_r+0xbdc>)
 800977c:	2a00      	cmp	r2, #0
 800977e:	d001      	beq.n	8009784 <_dtoa_r+0xb94>
 8009780:	f7ff fa7e 	bl	8008c80 <_dtoa_r+0x90>
 8009784:	f7ff fa7e 	bl	8008c84 <_dtoa_r+0x94>
 8009788:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800978a:	2b01      	cmp	r3, #1
 800978c:	dc00      	bgt.n	8009790 <_dtoa_r+0xba0>
 800978e:	e648      	b.n	8009422 <_dtoa_r+0x832>
 8009790:	2001      	movs	r0, #1
 8009792:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009794:	e665      	b.n	8009462 <_dtoa_r+0x872>
 8009796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009798:	2b00      	cmp	r3, #0
 800979a:	dc00      	bgt.n	800979e <_dtoa_r+0xbae>
 800979c:	e6a9      	b.n	80094f2 <_dtoa_r+0x902>
 800979e:	2400      	movs	r4, #0
 80097a0:	0031      	movs	r1, r6
 80097a2:	9805      	ldr	r0, [sp, #20]
 80097a4:	f7ff f99f 	bl	8008ae6 <quorem>
 80097a8:	9b08      	ldr	r3, [sp, #32]
 80097aa:	3030      	adds	r0, #48	@ 0x30
 80097ac:	5518      	strb	r0, [r3, r4]
 80097ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097b0:	3401      	adds	r4, #1
 80097b2:	0005      	movs	r5, r0
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	ddb6      	ble.n	8009726 <_dtoa_r+0xb36>
 80097b8:	2300      	movs	r3, #0
 80097ba:	220a      	movs	r2, #10
 80097bc:	9905      	ldr	r1, [sp, #20]
 80097be:	9803      	ldr	r0, [sp, #12]
 80097c0:	f000 f974 	bl	8009aac <__multadd>
 80097c4:	9005      	str	r0, [sp, #20]
 80097c6:	e7eb      	b.n	80097a0 <_dtoa_r+0xbb0>
 80097c8:	0800b088 	.word	0x0800b088
 80097cc:	0800b090 	.word	0x0800b090

080097d0 <_free_r>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	0005      	movs	r5, r0
 80097d4:	1e0c      	subs	r4, r1, #0
 80097d6:	d010      	beq.n	80097fa <_free_r+0x2a>
 80097d8:	3c04      	subs	r4, #4
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	da00      	bge.n	80097e2 <_free_r+0x12>
 80097e0:	18e4      	adds	r4, r4, r3
 80097e2:	0028      	movs	r0, r5
 80097e4:	f000 f8ea 	bl	80099bc <__malloc_lock>
 80097e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009860 <_free_r+0x90>)
 80097ea:	6813      	ldr	r3, [r2, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d105      	bne.n	80097fc <_free_r+0x2c>
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	6014      	str	r4, [r2, #0]
 80097f4:	0028      	movs	r0, r5
 80097f6:	f000 f8e9 	bl	80099cc <__malloc_unlock>
 80097fa:	bd70      	pop	{r4, r5, r6, pc}
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	d908      	bls.n	8009812 <_free_r+0x42>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	1821      	adds	r1, r4, r0
 8009804:	428b      	cmp	r3, r1
 8009806:	d1f3      	bne.n	80097f0 <_free_r+0x20>
 8009808:	6819      	ldr	r1, [r3, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	1809      	adds	r1, r1, r0
 800980e:	6021      	str	r1, [r4, #0]
 8009810:	e7ee      	b.n	80097f0 <_free_r+0x20>
 8009812:	001a      	movs	r2, r3
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <_free_r+0x4e>
 800981a:	42a3      	cmp	r3, r4
 800981c:	d9f9      	bls.n	8009812 <_free_r+0x42>
 800981e:	6811      	ldr	r1, [r2, #0]
 8009820:	1850      	adds	r0, r2, r1
 8009822:	42a0      	cmp	r0, r4
 8009824:	d10b      	bne.n	800983e <_free_r+0x6e>
 8009826:	6820      	ldr	r0, [r4, #0]
 8009828:	1809      	adds	r1, r1, r0
 800982a:	1850      	adds	r0, r2, r1
 800982c:	6011      	str	r1, [r2, #0]
 800982e:	4283      	cmp	r3, r0
 8009830:	d1e0      	bne.n	80097f4 <_free_r+0x24>
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	1841      	adds	r1, r0, r1
 8009838:	6011      	str	r1, [r2, #0]
 800983a:	6053      	str	r3, [r2, #4]
 800983c:	e7da      	b.n	80097f4 <_free_r+0x24>
 800983e:	42a0      	cmp	r0, r4
 8009840:	d902      	bls.n	8009848 <_free_r+0x78>
 8009842:	230c      	movs	r3, #12
 8009844:	602b      	str	r3, [r5, #0]
 8009846:	e7d5      	b.n	80097f4 <_free_r+0x24>
 8009848:	6820      	ldr	r0, [r4, #0]
 800984a:	1821      	adds	r1, r4, r0
 800984c:	428b      	cmp	r3, r1
 800984e:	d103      	bne.n	8009858 <_free_r+0x88>
 8009850:	6819      	ldr	r1, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	1809      	adds	r1, r1, r0
 8009856:	6021      	str	r1, [r4, #0]
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	6054      	str	r4, [r2, #4]
 800985c:	e7ca      	b.n	80097f4 <_free_r+0x24>
 800985e:	46c0      	nop			@ (mov r8, r8)
 8009860:	20001468 	.word	0x20001468

08009864 <malloc>:
 8009864:	b510      	push	{r4, lr}
 8009866:	4b03      	ldr	r3, [pc, #12]	@ (8009874 <malloc+0x10>)
 8009868:	0001      	movs	r1, r0
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	f000 f826 	bl	80098bc <_malloc_r>
 8009870:	bd10      	pop	{r4, pc}
 8009872:	46c0      	nop			@ (mov r8, r8)
 8009874:	20000018 	.word	0x20000018

08009878 <sbrk_aligned>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	4e0f      	ldr	r6, [pc, #60]	@ (80098b8 <sbrk_aligned+0x40>)
 800987c:	000d      	movs	r5, r1
 800987e:	6831      	ldr	r1, [r6, #0]
 8009880:	0004      	movs	r4, r0
 8009882:	2900      	cmp	r1, #0
 8009884:	d102      	bne.n	800988c <sbrk_aligned+0x14>
 8009886:	f000 fe67 	bl	800a558 <_sbrk_r>
 800988a:	6030      	str	r0, [r6, #0]
 800988c:	0029      	movs	r1, r5
 800988e:	0020      	movs	r0, r4
 8009890:	f000 fe62 	bl	800a558 <_sbrk_r>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d103      	bne.n	80098a0 <sbrk_aligned+0x28>
 8009898:	2501      	movs	r5, #1
 800989a:	426d      	negs	r5, r5
 800989c:	0028      	movs	r0, r5
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	2303      	movs	r3, #3
 80098a2:	1cc5      	adds	r5, r0, #3
 80098a4:	439d      	bics	r5, r3
 80098a6:	42a8      	cmp	r0, r5
 80098a8:	d0f8      	beq.n	800989c <sbrk_aligned+0x24>
 80098aa:	1a29      	subs	r1, r5, r0
 80098ac:	0020      	movs	r0, r4
 80098ae:	f000 fe53 	bl	800a558 <_sbrk_r>
 80098b2:	3001      	adds	r0, #1
 80098b4:	d1f2      	bne.n	800989c <sbrk_aligned+0x24>
 80098b6:	e7ef      	b.n	8009898 <sbrk_aligned+0x20>
 80098b8:	20001464 	.word	0x20001464

080098bc <_malloc_r>:
 80098bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098be:	2203      	movs	r2, #3
 80098c0:	1ccb      	adds	r3, r1, #3
 80098c2:	4393      	bics	r3, r2
 80098c4:	3308      	adds	r3, #8
 80098c6:	0005      	movs	r5, r0
 80098c8:	001f      	movs	r7, r3
 80098ca:	2b0c      	cmp	r3, #12
 80098cc:	d234      	bcs.n	8009938 <_malloc_r+0x7c>
 80098ce:	270c      	movs	r7, #12
 80098d0:	42b9      	cmp	r1, r7
 80098d2:	d833      	bhi.n	800993c <_malloc_r+0x80>
 80098d4:	0028      	movs	r0, r5
 80098d6:	f000 f871 	bl	80099bc <__malloc_lock>
 80098da:	4e37      	ldr	r6, [pc, #220]	@ (80099b8 <_malloc_r+0xfc>)
 80098dc:	6833      	ldr	r3, [r6, #0]
 80098de:	001c      	movs	r4, r3
 80098e0:	2c00      	cmp	r4, #0
 80098e2:	d12f      	bne.n	8009944 <_malloc_r+0x88>
 80098e4:	0039      	movs	r1, r7
 80098e6:	0028      	movs	r0, r5
 80098e8:	f7ff ffc6 	bl	8009878 <sbrk_aligned>
 80098ec:	0004      	movs	r4, r0
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	d15f      	bne.n	80099b2 <_malloc_r+0xf6>
 80098f2:	6834      	ldr	r4, [r6, #0]
 80098f4:	9400      	str	r4, [sp, #0]
 80098f6:	9b00      	ldr	r3, [sp, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d14a      	bne.n	8009992 <_malloc_r+0xd6>
 80098fc:	2c00      	cmp	r4, #0
 80098fe:	d052      	beq.n	80099a6 <_malloc_r+0xea>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	0028      	movs	r0, r5
 8009904:	18e3      	adds	r3, r4, r3
 8009906:	9900      	ldr	r1, [sp, #0]
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	f000 fe25 	bl	800a558 <_sbrk_r>
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	4283      	cmp	r3, r0
 8009912:	d148      	bne.n	80099a6 <_malloc_r+0xea>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	0028      	movs	r0, r5
 8009918:	1aff      	subs	r7, r7, r3
 800991a:	0039      	movs	r1, r7
 800991c:	f7ff ffac 	bl	8009878 <sbrk_aligned>
 8009920:	3001      	adds	r0, #1
 8009922:	d040      	beq.n	80099a6 <_malloc_r+0xea>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	19db      	adds	r3, r3, r7
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	6833      	ldr	r3, [r6, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	2a00      	cmp	r2, #0
 8009930:	d133      	bne.n	800999a <_malloc_r+0xde>
 8009932:	9b00      	ldr	r3, [sp, #0]
 8009934:	6033      	str	r3, [r6, #0]
 8009936:	e019      	b.n	800996c <_malloc_r+0xb0>
 8009938:	2b00      	cmp	r3, #0
 800993a:	dac9      	bge.n	80098d0 <_malloc_r+0x14>
 800993c:	230c      	movs	r3, #12
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	2000      	movs	r0, #0
 8009942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009944:	6821      	ldr	r1, [r4, #0]
 8009946:	1bc9      	subs	r1, r1, r7
 8009948:	d420      	bmi.n	800998c <_malloc_r+0xd0>
 800994a:	290b      	cmp	r1, #11
 800994c:	d90a      	bls.n	8009964 <_malloc_r+0xa8>
 800994e:	19e2      	adds	r2, r4, r7
 8009950:	6027      	str	r7, [r4, #0]
 8009952:	42a3      	cmp	r3, r4
 8009954:	d104      	bne.n	8009960 <_malloc_r+0xa4>
 8009956:	6032      	str	r2, [r6, #0]
 8009958:	6863      	ldr	r3, [r4, #4]
 800995a:	6011      	str	r1, [r2, #0]
 800995c:	6053      	str	r3, [r2, #4]
 800995e:	e005      	b.n	800996c <_malloc_r+0xb0>
 8009960:	605a      	str	r2, [r3, #4]
 8009962:	e7f9      	b.n	8009958 <_malloc_r+0x9c>
 8009964:	6862      	ldr	r2, [r4, #4]
 8009966:	42a3      	cmp	r3, r4
 8009968:	d10e      	bne.n	8009988 <_malloc_r+0xcc>
 800996a:	6032      	str	r2, [r6, #0]
 800996c:	0028      	movs	r0, r5
 800996e:	f000 f82d 	bl	80099cc <__malloc_unlock>
 8009972:	0020      	movs	r0, r4
 8009974:	2207      	movs	r2, #7
 8009976:	300b      	adds	r0, #11
 8009978:	1d23      	adds	r3, r4, #4
 800997a:	4390      	bics	r0, r2
 800997c:	1ac2      	subs	r2, r0, r3
 800997e:	4298      	cmp	r0, r3
 8009980:	d0df      	beq.n	8009942 <_malloc_r+0x86>
 8009982:	1a1b      	subs	r3, r3, r0
 8009984:	50a3      	str	r3, [r4, r2]
 8009986:	e7dc      	b.n	8009942 <_malloc_r+0x86>
 8009988:	605a      	str	r2, [r3, #4]
 800998a:	e7ef      	b.n	800996c <_malloc_r+0xb0>
 800998c:	0023      	movs	r3, r4
 800998e:	6864      	ldr	r4, [r4, #4]
 8009990:	e7a6      	b.n	80098e0 <_malloc_r+0x24>
 8009992:	9c00      	ldr	r4, [sp, #0]
 8009994:	6863      	ldr	r3, [r4, #4]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	e7ad      	b.n	80098f6 <_malloc_r+0x3a>
 800999a:	001a      	movs	r2, r3
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	42a3      	cmp	r3, r4
 80099a0:	d1fb      	bne.n	800999a <_malloc_r+0xde>
 80099a2:	2300      	movs	r3, #0
 80099a4:	e7da      	b.n	800995c <_malloc_r+0xa0>
 80099a6:	230c      	movs	r3, #12
 80099a8:	0028      	movs	r0, r5
 80099aa:	602b      	str	r3, [r5, #0]
 80099ac:	f000 f80e 	bl	80099cc <__malloc_unlock>
 80099b0:	e7c6      	b.n	8009940 <_malloc_r+0x84>
 80099b2:	6007      	str	r7, [r0, #0]
 80099b4:	e7da      	b.n	800996c <_malloc_r+0xb0>
 80099b6:	46c0      	nop			@ (mov r8, r8)
 80099b8:	20001468 	.word	0x20001468

080099bc <__malloc_lock>:
 80099bc:	b510      	push	{r4, lr}
 80099be:	4802      	ldr	r0, [pc, #8]	@ (80099c8 <__malloc_lock+0xc>)
 80099c0:	f7ff f87b 	bl	8008aba <__retarget_lock_acquire_recursive>
 80099c4:	bd10      	pop	{r4, pc}
 80099c6:	46c0      	nop			@ (mov r8, r8)
 80099c8:	20001460 	.word	0x20001460

080099cc <__malloc_unlock>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4802      	ldr	r0, [pc, #8]	@ (80099d8 <__malloc_unlock+0xc>)
 80099d0:	f7ff f874 	bl	8008abc <__retarget_lock_release_recursive>
 80099d4:	bd10      	pop	{r4, pc}
 80099d6:	46c0      	nop			@ (mov r8, r8)
 80099d8:	20001460 	.word	0x20001460

080099dc <_Balloc>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	69c5      	ldr	r5, [r0, #28]
 80099e0:	0006      	movs	r6, r0
 80099e2:	000c      	movs	r4, r1
 80099e4:	2d00      	cmp	r5, #0
 80099e6:	d10e      	bne.n	8009a06 <_Balloc+0x2a>
 80099e8:	2010      	movs	r0, #16
 80099ea:	f7ff ff3b 	bl	8009864 <malloc>
 80099ee:	1e02      	subs	r2, r0, #0
 80099f0:	61f0      	str	r0, [r6, #28]
 80099f2:	d104      	bne.n	80099fe <_Balloc+0x22>
 80099f4:	216b      	movs	r1, #107	@ 0x6b
 80099f6:	4b19      	ldr	r3, [pc, #100]	@ (8009a5c <_Balloc+0x80>)
 80099f8:	4819      	ldr	r0, [pc, #100]	@ (8009a60 <_Balloc+0x84>)
 80099fa:	f000 fdbf 	bl	800a57c <__assert_func>
 80099fe:	6045      	str	r5, [r0, #4]
 8009a00:	6085      	str	r5, [r0, #8]
 8009a02:	6005      	str	r5, [r0, #0]
 8009a04:	60c5      	str	r5, [r0, #12]
 8009a06:	69f5      	ldr	r5, [r6, #28]
 8009a08:	68eb      	ldr	r3, [r5, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d013      	beq.n	8009a36 <_Balloc+0x5a>
 8009a0e:	69f3      	ldr	r3, [r6, #28]
 8009a10:	00a2      	lsls	r2, r4, #2
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	189b      	adds	r3, r3, r2
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d118      	bne.n	8009a4e <_Balloc+0x72>
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	000d      	movs	r5, r1
 8009a20:	40a5      	lsls	r5, r4
 8009a22:	1d6a      	adds	r2, r5, #5
 8009a24:	0030      	movs	r0, r6
 8009a26:	0092      	lsls	r2, r2, #2
 8009a28:	f000 fdc6 	bl	800a5b8 <_calloc_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d00c      	beq.n	8009a4a <_Balloc+0x6e>
 8009a30:	6044      	str	r4, [r0, #4]
 8009a32:	6085      	str	r5, [r0, #8]
 8009a34:	e00d      	b.n	8009a52 <_Balloc+0x76>
 8009a36:	2221      	movs	r2, #33	@ 0x21
 8009a38:	2104      	movs	r1, #4
 8009a3a:	0030      	movs	r0, r6
 8009a3c:	f000 fdbc 	bl	800a5b8 <_calloc_r>
 8009a40:	69f3      	ldr	r3, [r6, #28]
 8009a42:	60e8      	str	r0, [r5, #12]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1e1      	bne.n	8009a0e <_Balloc+0x32>
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
 8009a4e:	6802      	ldr	r2, [r0, #0]
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	2300      	movs	r3, #0
 8009a54:	6103      	str	r3, [r0, #16]
 8009a56:	60c3      	str	r3, [r0, #12]
 8009a58:	e7f8      	b.n	8009a4c <_Balloc+0x70>
 8009a5a:	46c0      	nop			@ (mov r8, r8)
 8009a5c:	0800b095 	.word	0x0800b095
 8009a60:	0800b115 	.word	0x0800b115

08009a64 <_Bfree>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	69c6      	ldr	r6, [r0, #28]
 8009a68:	0005      	movs	r5, r0
 8009a6a:	000c      	movs	r4, r1
 8009a6c:	2e00      	cmp	r6, #0
 8009a6e:	d10e      	bne.n	8009a8e <_Bfree+0x2a>
 8009a70:	2010      	movs	r0, #16
 8009a72:	f7ff fef7 	bl	8009864 <malloc>
 8009a76:	1e02      	subs	r2, r0, #0
 8009a78:	61e8      	str	r0, [r5, #28]
 8009a7a:	d104      	bne.n	8009a86 <_Bfree+0x22>
 8009a7c:	218f      	movs	r1, #143	@ 0x8f
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <_Bfree+0x40>)
 8009a80:	4809      	ldr	r0, [pc, #36]	@ (8009aa8 <_Bfree+0x44>)
 8009a82:	f000 fd7b 	bl	800a57c <__assert_func>
 8009a86:	6046      	str	r6, [r0, #4]
 8009a88:	6086      	str	r6, [r0, #8]
 8009a8a:	6006      	str	r6, [r0, #0]
 8009a8c:	60c6      	str	r6, [r0, #12]
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	d007      	beq.n	8009aa2 <_Bfree+0x3e>
 8009a92:	69eb      	ldr	r3, [r5, #28]
 8009a94:	6862      	ldr	r2, [r4, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	0092      	lsls	r2, r2, #2
 8009a9a:	189b      	adds	r3, r3, r2
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	6022      	str	r2, [r4, #0]
 8009aa0:	601c      	str	r4, [r3, #0]
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	0800b095 	.word	0x0800b095
 8009aa8:	0800b115 	.word	0x0800b115

08009aac <__multadd>:
 8009aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aae:	000f      	movs	r7, r1
 8009ab0:	9001      	str	r0, [sp, #4]
 8009ab2:	000c      	movs	r4, r1
 8009ab4:	001e      	movs	r6, r3
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	690d      	ldr	r5, [r1, #16]
 8009aba:	3714      	adds	r7, #20
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	3001      	adds	r0, #1
 8009ac0:	b299      	uxth	r1, r3
 8009ac2:	4351      	muls	r1, r2
 8009ac4:	0c1b      	lsrs	r3, r3, #16
 8009ac6:	4353      	muls	r3, r2
 8009ac8:	1989      	adds	r1, r1, r6
 8009aca:	0c0e      	lsrs	r6, r1, #16
 8009acc:	199b      	adds	r3, r3, r6
 8009ace:	0c1e      	lsrs	r6, r3, #16
 8009ad0:	b289      	uxth	r1, r1
 8009ad2:	041b      	lsls	r3, r3, #16
 8009ad4:	185b      	adds	r3, r3, r1
 8009ad6:	c708      	stmia	r7!, {r3}
 8009ad8:	4285      	cmp	r5, r0
 8009ada:	dcef      	bgt.n	8009abc <__multadd+0x10>
 8009adc:	2e00      	cmp	r6, #0
 8009ade:	d022      	beq.n	8009b26 <__multadd+0x7a>
 8009ae0:	68a3      	ldr	r3, [r4, #8]
 8009ae2:	42ab      	cmp	r3, r5
 8009ae4:	dc19      	bgt.n	8009b1a <__multadd+0x6e>
 8009ae6:	6861      	ldr	r1, [r4, #4]
 8009ae8:	9801      	ldr	r0, [sp, #4]
 8009aea:	3101      	adds	r1, #1
 8009aec:	f7ff ff76 	bl	80099dc <_Balloc>
 8009af0:	1e07      	subs	r7, r0, #0
 8009af2:	d105      	bne.n	8009b00 <__multadd+0x54>
 8009af4:	003a      	movs	r2, r7
 8009af6:	21ba      	movs	r1, #186	@ 0xba
 8009af8:	4b0c      	ldr	r3, [pc, #48]	@ (8009b2c <__multadd+0x80>)
 8009afa:	480d      	ldr	r0, [pc, #52]	@ (8009b30 <__multadd+0x84>)
 8009afc:	f000 fd3e 	bl	800a57c <__assert_func>
 8009b00:	0021      	movs	r1, r4
 8009b02:	6922      	ldr	r2, [r4, #16]
 8009b04:	310c      	adds	r1, #12
 8009b06:	3202      	adds	r2, #2
 8009b08:	0092      	lsls	r2, r2, #2
 8009b0a:	300c      	adds	r0, #12
 8009b0c:	f7fe ffe2 	bl	8008ad4 <memcpy>
 8009b10:	0021      	movs	r1, r4
 8009b12:	9801      	ldr	r0, [sp, #4]
 8009b14:	f7ff ffa6 	bl	8009a64 <_Bfree>
 8009b18:	003c      	movs	r4, r7
 8009b1a:	1d2b      	adds	r3, r5, #4
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	18e3      	adds	r3, r4, r3
 8009b20:	3501      	adds	r5, #1
 8009b22:	605e      	str	r6, [r3, #4]
 8009b24:	6125      	str	r5, [r4, #16]
 8009b26:	0020      	movs	r0, r4
 8009b28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b2a:	46c0      	nop			@ (mov r8, r8)
 8009b2c:	0800b104 	.word	0x0800b104
 8009b30:	0800b115 	.word	0x0800b115

08009b34 <__hi0bits>:
 8009b34:	2280      	movs	r2, #128	@ 0x80
 8009b36:	0003      	movs	r3, r0
 8009b38:	0252      	lsls	r2, r2, #9
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d201      	bcs.n	8009b44 <__hi0bits+0x10>
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	3010      	adds	r0, #16
 8009b44:	2280      	movs	r2, #128	@ 0x80
 8009b46:	0452      	lsls	r2, r2, #17
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d201      	bcs.n	8009b50 <__hi0bits+0x1c>
 8009b4c:	3008      	adds	r0, #8
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	2280      	movs	r2, #128	@ 0x80
 8009b52:	0552      	lsls	r2, r2, #21
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d201      	bcs.n	8009b5c <__hi0bits+0x28>
 8009b58:	3004      	adds	r0, #4
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	2280      	movs	r2, #128	@ 0x80
 8009b5e:	05d2      	lsls	r2, r2, #23
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d201      	bcs.n	8009b68 <__hi0bits+0x34>
 8009b64:	3002      	adds	r0, #2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	db03      	blt.n	8009b74 <__hi0bits+0x40>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	4213      	tst	r3, r2
 8009b70:	d100      	bne.n	8009b74 <__hi0bits+0x40>
 8009b72:	2020      	movs	r0, #32
 8009b74:	4770      	bx	lr

08009b76 <__lo0bits>:
 8009b76:	6803      	ldr	r3, [r0, #0]
 8009b78:	0001      	movs	r1, r0
 8009b7a:	2207      	movs	r2, #7
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	4010      	ands	r0, r2
 8009b80:	4213      	tst	r3, r2
 8009b82:	d00d      	beq.n	8009ba0 <__lo0bits+0x2a>
 8009b84:	3a06      	subs	r2, #6
 8009b86:	2000      	movs	r0, #0
 8009b88:	4213      	tst	r3, r2
 8009b8a:	d105      	bne.n	8009b98 <__lo0bits+0x22>
 8009b8c:	3002      	adds	r0, #2
 8009b8e:	4203      	tst	r3, r0
 8009b90:	d003      	beq.n	8009b9a <__lo0bits+0x24>
 8009b92:	40d3      	lsrs	r3, r2
 8009b94:	0010      	movs	r0, r2
 8009b96:	600b      	str	r3, [r1, #0]
 8009b98:	4770      	bx	lr
 8009b9a:	089b      	lsrs	r3, r3, #2
 8009b9c:	600b      	str	r3, [r1, #0]
 8009b9e:	e7fb      	b.n	8009b98 <__lo0bits+0x22>
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	2a00      	cmp	r2, #0
 8009ba4:	d101      	bne.n	8009baa <__lo0bits+0x34>
 8009ba6:	2010      	movs	r0, #16
 8009ba8:	0c1b      	lsrs	r3, r3, #16
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	d101      	bne.n	8009bb4 <__lo0bits+0x3e>
 8009bb0:	3008      	adds	r0, #8
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	071a      	lsls	r2, r3, #28
 8009bb6:	d101      	bne.n	8009bbc <__lo0bits+0x46>
 8009bb8:	3004      	adds	r0, #4
 8009bba:	091b      	lsrs	r3, r3, #4
 8009bbc:	079a      	lsls	r2, r3, #30
 8009bbe:	d101      	bne.n	8009bc4 <__lo0bits+0x4e>
 8009bc0:	3002      	adds	r0, #2
 8009bc2:	089b      	lsrs	r3, r3, #2
 8009bc4:	07da      	lsls	r2, r3, #31
 8009bc6:	d4e9      	bmi.n	8009b9c <__lo0bits+0x26>
 8009bc8:	3001      	adds	r0, #1
 8009bca:	085b      	lsrs	r3, r3, #1
 8009bcc:	d1e6      	bne.n	8009b9c <__lo0bits+0x26>
 8009bce:	2020      	movs	r0, #32
 8009bd0:	e7e2      	b.n	8009b98 <__lo0bits+0x22>
	...

08009bd4 <__i2b>:
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	000c      	movs	r4, r1
 8009bd8:	2101      	movs	r1, #1
 8009bda:	f7ff feff 	bl	80099dc <_Balloc>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d107      	bne.n	8009bf2 <__i2b+0x1e>
 8009be2:	2146      	movs	r1, #70	@ 0x46
 8009be4:	4c05      	ldr	r4, [pc, #20]	@ (8009bfc <__i2b+0x28>)
 8009be6:	0002      	movs	r2, r0
 8009be8:	4b05      	ldr	r3, [pc, #20]	@ (8009c00 <__i2b+0x2c>)
 8009bea:	0020      	movs	r0, r4
 8009bec:	31ff      	adds	r1, #255	@ 0xff
 8009bee:	f000 fcc5 	bl	800a57c <__assert_func>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	6144      	str	r4, [r0, #20]
 8009bf6:	6103      	str	r3, [r0, #16]
 8009bf8:	bd10      	pop	{r4, pc}
 8009bfa:	46c0      	nop			@ (mov r8, r8)
 8009bfc:	0800b115 	.word	0x0800b115
 8009c00:	0800b104 	.word	0x0800b104

08009c04 <__multiply>:
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	0014      	movs	r4, r2
 8009c08:	690a      	ldr	r2, [r1, #16]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	000d      	movs	r5, r1
 8009c0e:	b089      	sub	sp, #36	@ 0x24
 8009c10:	429a      	cmp	r2, r3
 8009c12:	db02      	blt.n	8009c1a <__multiply+0x16>
 8009c14:	0023      	movs	r3, r4
 8009c16:	000c      	movs	r4, r1
 8009c18:	001d      	movs	r5, r3
 8009c1a:	6927      	ldr	r7, [r4, #16]
 8009c1c:	692e      	ldr	r6, [r5, #16]
 8009c1e:	6861      	ldr	r1, [r4, #4]
 8009c20:	19bb      	adds	r3, r7, r6
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	68a3      	ldr	r3, [r4, #8]
 8009c26:	19ba      	adds	r2, r7, r6
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	da00      	bge.n	8009c2e <__multiply+0x2a>
 8009c2c:	3101      	adds	r1, #1
 8009c2e:	f7ff fed5 	bl	80099dc <_Balloc>
 8009c32:	4684      	mov	ip, r0
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d106      	bne.n	8009c46 <__multiply+0x42>
 8009c38:	21b1      	movs	r1, #177	@ 0xb1
 8009c3a:	4662      	mov	r2, ip
 8009c3c:	4b44      	ldr	r3, [pc, #272]	@ (8009d50 <__multiply+0x14c>)
 8009c3e:	4845      	ldr	r0, [pc, #276]	@ (8009d54 <__multiply+0x150>)
 8009c40:	0049      	lsls	r1, r1, #1
 8009c42:	f000 fc9b 	bl	800a57c <__assert_func>
 8009c46:	0002      	movs	r2, r0
 8009c48:	19bb      	adds	r3, r7, r6
 8009c4a:	3214      	adds	r2, #20
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	18d3      	adds	r3, r2, r3
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	2100      	movs	r1, #0
 8009c54:	0013      	movs	r3, r2
 8009c56:	9801      	ldr	r0, [sp, #4]
 8009c58:	4283      	cmp	r3, r0
 8009c5a:	d328      	bcc.n	8009cae <__multiply+0xaa>
 8009c5c:	0023      	movs	r3, r4
 8009c5e:	00bf      	lsls	r7, r7, #2
 8009c60:	3314      	adds	r3, #20
 8009c62:	9304      	str	r3, [sp, #16]
 8009c64:	3514      	adds	r5, #20
 8009c66:	19db      	adds	r3, r3, r7
 8009c68:	00b6      	lsls	r6, r6, #2
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	19ab      	adds	r3, r5, r6
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	2304      	movs	r3, #4
 8009c72:	9305      	str	r3, [sp, #20]
 8009c74:	0023      	movs	r3, r4
 8009c76:	9902      	ldr	r1, [sp, #8]
 8009c78:	3315      	adds	r3, #21
 8009c7a:	4299      	cmp	r1, r3
 8009c7c:	d305      	bcc.n	8009c8a <__multiply+0x86>
 8009c7e:	1b0c      	subs	r4, r1, r4
 8009c80:	3c15      	subs	r4, #21
 8009c82:	08a4      	lsrs	r4, r4, #2
 8009c84:	3401      	adds	r4, #1
 8009c86:	00a3      	lsls	r3, r4, #2
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	9b07      	ldr	r3, [sp, #28]
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	d310      	bcc.n	8009cb2 <__multiply+0xae>
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dd05      	ble.n	8009ca2 <__multiply+0x9e>
 8009c96:	9b01      	ldr	r3, [sp, #4]
 8009c98:	3b04      	subs	r3, #4
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d052      	beq.n	8009d48 <__multiply+0x144>
 8009ca2:	4663      	mov	r3, ip
 8009ca4:	4660      	mov	r0, ip
 8009ca6:	9a00      	ldr	r2, [sp, #0]
 8009ca8:	611a      	str	r2, [r3, #16]
 8009caa:	b009      	add	sp, #36	@ 0x24
 8009cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cae:	c302      	stmia	r3!, {r1}
 8009cb0:	e7d1      	b.n	8009c56 <__multiply+0x52>
 8009cb2:	682c      	ldr	r4, [r5, #0]
 8009cb4:	b2a4      	uxth	r4, r4
 8009cb6:	2c00      	cmp	r4, #0
 8009cb8:	d01f      	beq.n	8009cfa <__multiply+0xf6>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	0017      	movs	r7, r2
 8009cbe:	9e04      	ldr	r6, [sp, #16]
 8009cc0:	9303      	str	r3, [sp, #12]
 8009cc2:	ce08      	ldmia	r6!, {r3}
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	9306      	str	r3, [sp, #24]
 8009cc8:	466b      	mov	r3, sp
 8009cca:	8b1b      	ldrh	r3, [r3, #24]
 8009ccc:	b288      	uxth	r0, r1
 8009cce:	4363      	muls	r3, r4
 8009cd0:	181b      	adds	r3, r3, r0
 8009cd2:	9803      	ldr	r0, [sp, #12]
 8009cd4:	0c09      	lsrs	r1, r1, #16
 8009cd6:	181b      	adds	r3, r3, r0
 8009cd8:	9806      	ldr	r0, [sp, #24]
 8009cda:	0c00      	lsrs	r0, r0, #16
 8009cdc:	4360      	muls	r0, r4
 8009cde:	1840      	adds	r0, r0, r1
 8009ce0:	0c19      	lsrs	r1, r3, #16
 8009ce2:	1841      	adds	r1, r0, r1
 8009ce4:	0c08      	lsrs	r0, r1, #16
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	0409      	lsls	r1, r1, #16
 8009cea:	4319      	orrs	r1, r3
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	9003      	str	r0, [sp, #12]
 8009cf0:	c702      	stmia	r7!, {r1}
 8009cf2:	42b3      	cmp	r3, r6
 8009cf4:	d8e5      	bhi.n	8009cc2 <__multiply+0xbe>
 8009cf6:	9b05      	ldr	r3, [sp, #20]
 8009cf8:	50d0      	str	r0, [r2, r3]
 8009cfa:	682c      	ldr	r4, [r5, #0]
 8009cfc:	0c24      	lsrs	r4, r4, #16
 8009cfe:	d020      	beq.n	8009d42 <__multiply+0x13e>
 8009d00:	2100      	movs	r1, #0
 8009d02:	0010      	movs	r0, r2
 8009d04:	6813      	ldr	r3, [r2, #0]
 8009d06:	9e04      	ldr	r6, [sp, #16]
 8009d08:	9103      	str	r1, [sp, #12]
 8009d0a:	6831      	ldr	r1, [r6, #0]
 8009d0c:	6807      	ldr	r7, [r0, #0]
 8009d0e:	b289      	uxth	r1, r1
 8009d10:	4361      	muls	r1, r4
 8009d12:	0c3f      	lsrs	r7, r7, #16
 8009d14:	19c9      	adds	r1, r1, r7
 8009d16:	9f03      	ldr	r7, [sp, #12]
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	19c9      	adds	r1, r1, r7
 8009d1c:	040f      	lsls	r7, r1, #16
 8009d1e:	431f      	orrs	r7, r3
 8009d20:	6007      	str	r7, [r0, #0]
 8009d22:	ce80      	ldmia	r6!, {r7}
 8009d24:	6843      	ldr	r3, [r0, #4]
 8009d26:	0c3f      	lsrs	r7, r7, #16
 8009d28:	4367      	muls	r7, r4
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	0c09      	lsrs	r1, r1, #16
 8009d2e:	18fb      	adds	r3, r7, r3
 8009d30:	185b      	adds	r3, r3, r1
 8009d32:	0c19      	lsrs	r1, r3, #16
 8009d34:	9103      	str	r1, [sp, #12]
 8009d36:	9902      	ldr	r1, [sp, #8]
 8009d38:	3004      	adds	r0, #4
 8009d3a:	42b1      	cmp	r1, r6
 8009d3c:	d8e5      	bhi.n	8009d0a <__multiply+0x106>
 8009d3e:	9905      	ldr	r1, [sp, #20]
 8009d40:	5053      	str	r3, [r2, r1]
 8009d42:	3504      	adds	r5, #4
 8009d44:	3204      	adds	r2, #4
 8009d46:	e7a0      	b.n	8009c8a <__multiply+0x86>
 8009d48:	9b00      	ldr	r3, [sp, #0]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	e79f      	b.n	8009c90 <__multiply+0x8c>
 8009d50:	0800b104 	.word	0x0800b104
 8009d54:	0800b115 	.word	0x0800b115

08009d58 <__pow5mult>:
 8009d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	0015      	movs	r5, r2
 8009d5e:	0007      	movs	r7, r0
 8009d60:	000e      	movs	r6, r1
 8009d62:	401a      	ands	r2, r3
 8009d64:	421d      	tst	r5, r3
 8009d66:	d008      	beq.n	8009d7a <__pow5mult+0x22>
 8009d68:	4925      	ldr	r1, [pc, #148]	@ (8009e00 <__pow5mult+0xa8>)
 8009d6a:	3a01      	subs	r2, #1
 8009d6c:	0092      	lsls	r2, r2, #2
 8009d6e:	5852      	ldr	r2, [r2, r1]
 8009d70:	2300      	movs	r3, #0
 8009d72:	0031      	movs	r1, r6
 8009d74:	f7ff fe9a 	bl	8009aac <__multadd>
 8009d78:	0006      	movs	r6, r0
 8009d7a:	10ad      	asrs	r5, r5, #2
 8009d7c:	d03d      	beq.n	8009dfa <__pow5mult+0xa2>
 8009d7e:	69fc      	ldr	r4, [r7, #28]
 8009d80:	2c00      	cmp	r4, #0
 8009d82:	d10f      	bne.n	8009da4 <__pow5mult+0x4c>
 8009d84:	2010      	movs	r0, #16
 8009d86:	f7ff fd6d 	bl	8009864 <malloc>
 8009d8a:	1e02      	subs	r2, r0, #0
 8009d8c:	61f8      	str	r0, [r7, #28]
 8009d8e:	d105      	bne.n	8009d9c <__pow5mult+0x44>
 8009d90:	21b4      	movs	r1, #180	@ 0xb4
 8009d92:	4b1c      	ldr	r3, [pc, #112]	@ (8009e04 <__pow5mult+0xac>)
 8009d94:	481c      	ldr	r0, [pc, #112]	@ (8009e08 <__pow5mult+0xb0>)
 8009d96:	31ff      	adds	r1, #255	@ 0xff
 8009d98:	f000 fbf0 	bl	800a57c <__assert_func>
 8009d9c:	6044      	str	r4, [r0, #4]
 8009d9e:	6084      	str	r4, [r0, #8]
 8009da0:	6004      	str	r4, [r0, #0]
 8009da2:	60c4      	str	r4, [r0, #12]
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	689c      	ldr	r4, [r3, #8]
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	2c00      	cmp	r4, #0
 8009dac:	d108      	bne.n	8009dc0 <__pow5mult+0x68>
 8009dae:	0038      	movs	r0, r7
 8009db0:	4916      	ldr	r1, [pc, #88]	@ (8009e0c <__pow5mult+0xb4>)
 8009db2:	f7ff ff0f 	bl	8009bd4 <__i2b>
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	0004      	movs	r4, r0
 8009dba:	6098      	str	r0, [r3, #8]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	6003      	str	r3, [r0, #0]
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	421d      	tst	r5, r3
 8009dc4:	d00a      	beq.n	8009ddc <__pow5mult+0x84>
 8009dc6:	0031      	movs	r1, r6
 8009dc8:	0022      	movs	r2, r4
 8009dca:	0038      	movs	r0, r7
 8009dcc:	f7ff ff1a 	bl	8009c04 <__multiply>
 8009dd0:	0031      	movs	r1, r6
 8009dd2:	9001      	str	r0, [sp, #4]
 8009dd4:	0038      	movs	r0, r7
 8009dd6:	f7ff fe45 	bl	8009a64 <_Bfree>
 8009dda:	9e01      	ldr	r6, [sp, #4]
 8009ddc:	106d      	asrs	r5, r5, #1
 8009dde:	d00c      	beq.n	8009dfa <__pow5mult+0xa2>
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d107      	bne.n	8009df6 <__pow5mult+0x9e>
 8009de6:	0022      	movs	r2, r4
 8009de8:	0021      	movs	r1, r4
 8009dea:	0038      	movs	r0, r7
 8009dec:	f7ff ff0a 	bl	8009c04 <__multiply>
 8009df0:	2300      	movs	r3, #0
 8009df2:	6020      	str	r0, [r4, #0]
 8009df4:	6003      	str	r3, [r0, #0]
 8009df6:	0004      	movs	r4, r0
 8009df8:	e7e2      	b.n	8009dc0 <__pow5mult+0x68>
 8009dfa:	0030      	movs	r0, r6
 8009dfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009dfe:	46c0      	nop			@ (mov r8, r8)
 8009e00:	0800b1c8 	.word	0x0800b1c8
 8009e04:	0800b095 	.word	0x0800b095
 8009e08:	0800b115 	.word	0x0800b115
 8009e0c:	00000271 	.word	0x00000271

08009e10 <__lshift>:
 8009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e12:	000c      	movs	r4, r1
 8009e14:	0016      	movs	r6, r2
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	1157      	asrs	r7, r2, #5
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	18fb      	adds	r3, r7, r3
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	3301      	adds	r3, #1
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	6849      	ldr	r1, [r1, #4]
 8009e26:	68a3      	ldr	r3, [r4, #8]
 8009e28:	9002      	str	r0, [sp, #8]
 8009e2a:	9a00      	ldr	r2, [sp, #0]
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	db10      	blt.n	8009e52 <__lshift+0x42>
 8009e30:	9802      	ldr	r0, [sp, #8]
 8009e32:	f7ff fdd3 	bl	80099dc <_Balloc>
 8009e36:	2300      	movs	r3, #0
 8009e38:	0001      	movs	r1, r0
 8009e3a:	0005      	movs	r5, r0
 8009e3c:	001a      	movs	r2, r3
 8009e3e:	3114      	adds	r1, #20
 8009e40:	4298      	cmp	r0, r3
 8009e42:	d10c      	bne.n	8009e5e <__lshift+0x4e>
 8009e44:	21ef      	movs	r1, #239	@ 0xef
 8009e46:	002a      	movs	r2, r5
 8009e48:	4b25      	ldr	r3, [pc, #148]	@ (8009ee0 <__lshift+0xd0>)
 8009e4a:	4826      	ldr	r0, [pc, #152]	@ (8009ee4 <__lshift+0xd4>)
 8009e4c:	0049      	lsls	r1, r1, #1
 8009e4e:	f000 fb95 	bl	800a57c <__assert_func>
 8009e52:	3101      	adds	r1, #1
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	e7e8      	b.n	8009e2a <__lshift+0x1a>
 8009e58:	0098      	lsls	r0, r3, #2
 8009e5a:	500a      	str	r2, [r1, r0]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	42bb      	cmp	r3, r7
 8009e60:	dbfa      	blt.n	8009e58 <__lshift+0x48>
 8009e62:	43fb      	mvns	r3, r7
 8009e64:	17db      	asrs	r3, r3, #31
 8009e66:	401f      	ands	r7, r3
 8009e68:	00bf      	lsls	r7, r7, #2
 8009e6a:	0023      	movs	r3, r4
 8009e6c:	201f      	movs	r0, #31
 8009e6e:	19c9      	adds	r1, r1, r7
 8009e70:	0037      	movs	r7, r6
 8009e72:	6922      	ldr	r2, [r4, #16]
 8009e74:	3314      	adds	r3, #20
 8009e76:	0092      	lsls	r2, r2, #2
 8009e78:	189a      	adds	r2, r3, r2
 8009e7a:	4007      	ands	r7, r0
 8009e7c:	4206      	tst	r6, r0
 8009e7e:	d029      	beq.n	8009ed4 <__lshift+0xc4>
 8009e80:	3001      	adds	r0, #1
 8009e82:	1bc0      	subs	r0, r0, r7
 8009e84:	9003      	str	r0, [sp, #12]
 8009e86:	468c      	mov	ip, r1
 8009e88:	2000      	movs	r0, #0
 8009e8a:	681e      	ldr	r6, [r3, #0]
 8009e8c:	40be      	lsls	r6, r7
 8009e8e:	4306      	orrs	r6, r0
 8009e90:	4660      	mov	r0, ip
 8009e92:	c040      	stmia	r0!, {r6}
 8009e94:	4684      	mov	ip, r0
 8009e96:	9e03      	ldr	r6, [sp, #12]
 8009e98:	cb01      	ldmia	r3!, {r0}
 8009e9a:	40f0      	lsrs	r0, r6
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d8f4      	bhi.n	8009e8a <__lshift+0x7a>
 8009ea0:	0026      	movs	r6, r4
 8009ea2:	3615      	adds	r6, #21
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	42b2      	cmp	r2, r6
 8009ea8:	d304      	bcc.n	8009eb4 <__lshift+0xa4>
 8009eaa:	1b13      	subs	r3, r2, r4
 8009eac:	3b15      	subs	r3, #21
 8009eae:	089b      	lsrs	r3, r3, #2
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	50c8      	str	r0, [r1, r3]
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d002      	beq.n	8009ec0 <__lshift+0xb0>
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	3302      	adds	r3, #2
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	9b00      	ldr	r3, [sp, #0]
 8009ec2:	9802      	ldr	r0, [sp, #8]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	0021      	movs	r1, r4
 8009ec8:	612b      	str	r3, [r5, #16]
 8009eca:	f7ff fdcb 	bl	8009a64 <_Bfree>
 8009ece:	0028      	movs	r0, r5
 8009ed0:	b005      	add	sp, #20
 8009ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed4:	cb01      	ldmia	r3!, {r0}
 8009ed6:	c101      	stmia	r1!, {r0}
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d8fb      	bhi.n	8009ed4 <__lshift+0xc4>
 8009edc:	e7f0      	b.n	8009ec0 <__lshift+0xb0>
 8009ede:	46c0      	nop			@ (mov r8, r8)
 8009ee0:	0800b104 	.word	0x0800b104
 8009ee4:	0800b115 	.word	0x0800b115

08009ee8 <__mcmp>:
 8009ee8:	b530      	push	{r4, r5, lr}
 8009eea:	690b      	ldr	r3, [r1, #16]
 8009eec:	6904      	ldr	r4, [r0, #16]
 8009eee:	0002      	movs	r2, r0
 8009ef0:	1ae0      	subs	r0, r4, r3
 8009ef2:	429c      	cmp	r4, r3
 8009ef4:	d10f      	bne.n	8009f16 <__mcmp+0x2e>
 8009ef6:	3214      	adds	r2, #20
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	3114      	adds	r1, #20
 8009efc:	0014      	movs	r4, r2
 8009efe:	18c9      	adds	r1, r1, r3
 8009f00:	18d2      	adds	r2, r2, r3
 8009f02:	3a04      	subs	r2, #4
 8009f04:	3904      	subs	r1, #4
 8009f06:	6815      	ldr	r5, [r2, #0]
 8009f08:	680b      	ldr	r3, [r1, #0]
 8009f0a:	429d      	cmp	r5, r3
 8009f0c:	d004      	beq.n	8009f18 <__mcmp+0x30>
 8009f0e:	2001      	movs	r0, #1
 8009f10:	429d      	cmp	r5, r3
 8009f12:	d200      	bcs.n	8009f16 <__mcmp+0x2e>
 8009f14:	3802      	subs	r0, #2
 8009f16:	bd30      	pop	{r4, r5, pc}
 8009f18:	4294      	cmp	r4, r2
 8009f1a:	d3f2      	bcc.n	8009f02 <__mcmp+0x1a>
 8009f1c:	e7fb      	b.n	8009f16 <__mcmp+0x2e>
	...

08009f20 <__mdiff>:
 8009f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f22:	000c      	movs	r4, r1
 8009f24:	b087      	sub	sp, #28
 8009f26:	9000      	str	r0, [sp, #0]
 8009f28:	0011      	movs	r1, r2
 8009f2a:	0020      	movs	r0, r4
 8009f2c:	0017      	movs	r7, r2
 8009f2e:	f7ff ffdb 	bl	8009ee8 <__mcmp>
 8009f32:	1e05      	subs	r5, r0, #0
 8009f34:	d110      	bne.n	8009f58 <__mdiff+0x38>
 8009f36:	0001      	movs	r1, r0
 8009f38:	9800      	ldr	r0, [sp, #0]
 8009f3a:	f7ff fd4f 	bl	80099dc <_Balloc>
 8009f3e:	1e02      	subs	r2, r0, #0
 8009f40:	d104      	bne.n	8009f4c <__mdiff+0x2c>
 8009f42:	4b40      	ldr	r3, [pc, #256]	@ (800a044 <__mdiff+0x124>)
 8009f44:	4840      	ldr	r0, [pc, #256]	@ (800a048 <__mdiff+0x128>)
 8009f46:	4941      	ldr	r1, [pc, #260]	@ (800a04c <__mdiff+0x12c>)
 8009f48:	f000 fb18 	bl	800a57c <__assert_func>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	6145      	str	r5, [r0, #20]
 8009f50:	6103      	str	r3, [r0, #16]
 8009f52:	0010      	movs	r0, r2
 8009f54:	b007      	add	sp, #28
 8009f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f58:	2600      	movs	r6, #0
 8009f5a:	42b0      	cmp	r0, r6
 8009f5c:	da03      	bge.n	8009f66 <__mdiff+0x46>
 8009f5e:	0023      	movs	r3, r4
 8009f60:	003c      	movs	r4, r7
 8009f62:	001f      	movs	r7, r3
 8009f64:	3601      	adds	r6, #1
 8009f66:	6861      	ldr	r1, [r4, #4]
 8009f68:	9800      	ldr	r0, [sp, #0]
 8009f6a:	f7ff fd37 	bl	80099dc <_Balloc>
 8009f6e:	1e02      	subs	r2, r0, #0
 8009f70:	d103      	bne.n	8009f7a <__mdiff+0x5a>
 8009f72:	4b34      	ldr	r3, [pc, #208]	@ (800a044 <__mdiff+0x124>)
 8009f74:	4834      	ldr	r0, [pc, #208]	@ (800a048 <__mdiff+0x128>)
 8009f76:	4936      	ldr	r1, [pc, #216]	@ (800a050 <__mdiff+0x130>)
 8009f78:	e7e6      	b.n	8009f48 <__mdiff+0x28>
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	3414      	adds	r4, #20
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	18e3      	adds	r3, r4, r3
 8009f84:	0021      	movs	r1, r4
 8009f86:	9401      	str	r4, [sp, #4]
 8009f88:	003c      	movs	r4, r7
 8009f8a:	9302      	str	r3, [sp, #8]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	3414      	adds	r4, #20
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	18e3      	adds	r3, r4, r3
 8009f94:	9303      	str	r3, [sp, #12]
 8009f96:	0003      	movs	r3, r0
 8009f98:	60c6      	str	r6, [r0, #12]
 8009f9a:	468c      	mov	ip, r1
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	3314      	adds	r3, #20
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	4663      	mov	r3, ip
 8009fa6:	cb20      	ldmia	r3!, {r5}
 8009fa8:	b2a9      	uxth	r1, r5
 8009faa:	000e      	movs	r6, r1
 8009fac:	469c      	mov	ip, r3
 8009fae:	cc08      	ldmia	r4!, {r3}
 8009fb0:	0c2d      	lsrs	r5, r5, #16
 8009fb2:	b299      	uxth	r1, r3
 8009fb4:	1a71      	subs	r1, r6, r1
 8009fb6:	1809      	adds	r1, r1, r0
 8009fb8:	0c1b      	lsrs	r3, r3, #16
 8009fba:	1408      	asrs	r0, r1, #16
 8009fbc:	1aeb      	subs	r3, r5, r3
 8009fbe:	181b      	adds	r3, r3, r0
 8009fc0:	1418      	asrs	r0, r3, #16
 8009fc2:	b289      	uxth	r1, r1
 8009fc4:	041b      	lsls	r3, r3, #16
 8009fc6:	4319      	orrs	r1, r3
 8009fc8:	9b05      	ldr	r3, [sp, #20]
 8009fca:	c302      	stmia	r3!, {r1}
 8009fcc:	9305      	str	r3, [sp, #20]
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	d8e7      	bhi.n	8009fa4 <__mdiff+0x84>
 8009fd4:	0039      	movs	r1, r7
 8009fd6:	9c03      	ldr	r4, [sp, #12]
 8009fd8:	3115      	adds	r1, #21
 8009fda:	2304      	movs	r3, #4
 8009fdc:	428c      	cmp	r4, r1
 8009fde:	d304      	bcc.n	8009fea <__mdiff+0xca>
 8009fe0:	1be3      	subs	r3, r4, r7
 8009fe2:	3b15      	subs	r3, #21
 8009fe4:	089b      	lsrs	r3, r3, #2
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	9901      	ldr	r1, [sp, #4]
 8009fec:	18cd      	adds	r5, r1, r3
 8009fee:	9904      	ldr	r1, [sp, #16]
 8009ff0:	002e      	movs	r6, r5
 8009ff2:	18cb      	adds	r3, r1, r3
 8009ff4:	001f      	movs	r7, r3
 8009ff6:	9902      	ldr	r1, [sp, #8]
 8009ff8:	428e      	cmp	r6, r1
 8009ffa:	d311      	bcc.n	800a020 <__mdiff+0x100>
 8009ffc:	9c02      	ldr	r4, [sp, #8]
 8009ffe:	1ee9      	subs	r1, r5, #3
 800a000:	2000      	movs	r0, #0
 800a002:	428c      	cmp	r4, r1
 800a004:	d304      	bcc.n	800a010 <__mdiff+0xf0>
 800a006:	0021      	movs	r1, r4
 800a008:	3103      	adds	r1, #3
 800a00a:	1b49      	subs	r1, r1, r5
 800a00c:	0889      	lsrs	r1, r1, #2
 800a00e:	0088      	lsls	r0, r1, #2
 800a010:	181b      	adds	r3, r3, r0
 800a012:	3b04      	subs	r3, #4
 800a014:	6819      	ldr	r1, [r3, #0]
 800a016:	2900      	cmp	r1, #0
 800a018:	d010      	beq.n	800a03c <__mdiff+0x11c>
 800a01a:	9b00      	ldr	r3, [sp, #0]
 800a01c:	6113      	str	r3, [r2, #16]
 800a01e:	e798      	b.n	8009f52 <__mdiff+0x32>
 800a020:	4684      	mov	ip, r0
 800a022:	ce02      	ldmia	r6!, {r1}
 800a024:	b288      	uxth	r0, r1
 800a026:	4460      	add	r0, ip
 800a028:	1400      	asrs	r0, r0, #16
 800a02a:	0c0c      	lsrs	r4, r1, #16
 800a02c:	1904      	adds	r4, r0, r4
 800a02e:	4461      	add	r1, ip
 800a030:	1420      	asrs	r0, r4, #16
 800a032:	b289      	uxth	r1, r1
 800a034:	0424      	lsls	r4, r4, #16
 800a036:	4321      	orrs	r1, r4
 800a038:	c702      	stmia	r7!, {r1}
 800a03a:	e7dc      	b.n	8009ff6 <__mdiff+0xd6>
 800a03c:	9900      	ldr	r1, [sp, #0]
 800a03e:	3901      	subs	r1, #1
 800a040:	9100      	str	r1, [sp, #0]
 800a042:	e7e6      	b.n	800a012 <__mdiff+0xf2>
 800a044:	0800b104 	.word	0x0800b104
 800a048:	0800b115 	.word	0x0800b115
 800a04c:	00000237 	.word	0x00000237
 800a050:	00000245 	.word	0x00000245

0800a054 <__d2b>:
 800a054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a056:	2101      	movs	r1, #1
 800a058:	0016      	movs	r6, r2
 800a05a:	001f      	movs	r7, r3
 800a05c:	f7ff fcbe 	bl	80099dc <_Balloc>
 800a060:	1e04      	subs	r4, r0, #0
 800a062:	d105      	bne.n	800a070 <__d2b+0x1c>
 800a064:	0022      	movs	r2, r4
 800a066:	4b25      	ldr	r3, [pc, #148]	@ (800a0fc <__d2b+0xa8>)
 800a068:	4825      	ldr	r0, [pc, #148]	@ (800a100 <__d2b+0xac>)
 800a06a:	4926      	ldr	r1, [pc, #152]	@ (800a104 <__d2b+0xb0>)
 800a06c:	f000 fa86 	bl	800a57c <__assert_func>
 800a070:	033b      	lsls	r3, r7, #12
 800a072:	007d      	lsls	r5, r7, #1
 800a074:	0b1b      	lsrs	r3, r3, #12
 800a076:	0d6d      	lsrs	r5, r5, #21
 800a078:	d002      	beq.n	800a080 <__d2b+0x2c>
 800a07a:	2280      	movs	r2, #128	@ 0x80
 800a07c:	0352      	lsls	r2, r2, #13
 800a07e:	4313      	orrs	r3, r2
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	2e00      	cmp	r6, #0
 800a084:	d025      	beq.n	800a0d2 <__d2b+0x7e>
 800a086:	4668      	mov	r0, sp
 800a088:	9600      	str	r6, [sp, #0]
 800a08a:	f7ff fd74 	bl	8009b76 <__lo0bits>
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	9900      	ldr	r1, [sp, #0]
 800a092:	2800      	cmp	r0, #0
 800a094:	d01b      	beq.n	800a0ce <__d2b+0x7a>
 800a096:	2220      	movs	r2, #32
 800a098:	001e      	movs	r6, r3
 800a09a:	1a12      	subs	r2, r2, r0
 800a09c:	4096      	lsls	r6, r2
 800a09e:	0032      	movs	r2, r6
 800a0a0:	40c3      	lsrs	r3, r0
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	6162      	str	r2, [r4, #20]
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	9e01      	ldr	r6, [sp, #4]
 800a0aa:	61a6      	str	r6, [r4, #24]
 800a0ac:	1e73      	subs	r3, r6, #1
 800a0ae:	419e      	sbcs	r6, r3
 800a0b0:	3601      	adds	r6, #1
 800a0b2:	6126      	str	r6, [r4, #16]
 800a0b4:	2d00      	cmp	r5, #0
 800a0b6:	d014      	beq.n	800a0e2 <__d2b+0x8e>
 800a0b8:	2635      	movs	r6, #53	@ 0x35
 800a0ba:	4b13      	ldr	r3, [pc, #76]	@ (800a108 <__d2b+0xb4>)
 800a0bc:	18ed      	adds	r5, r5, r3
 800a0be:	9b08      	ldr	r3, [sp, #32]
 800a0c0:	182d      	adds	r5, r5, r0
 800a0c2:	601d      	str	r5, [r3, #0]
 800a0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c6:	1a36      	subs	r6, r6, r0
 800a0c8:	601e      	str	r6, [r3, #0]
 800a0ca:	0020      	movs	r0, r4
 800a0cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0ce:	6161      	str	r1, [r4, #20]
 800a0d0:	e7ea      	b.n	800a0a8 <__d2b+0x54>
 800a0d2:	a801      	add	r0, sp, #4
 800a0d4:	f7ff fd4f 	bl	8009b76 <__lo0bits>
 800a0d8:	9b01      	ldr	r3, [sp, #4]
 800a0da:	2601      	movs	r6, #1
 800a0dc:	6163      	str	r3, [r4, #20]
 800a0de:	3020      	adds	r0, #32
 800a0e0:	e7e7      	b.n	800a0b2 <__d2b+0x5e>
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a10c <__d2b+0xb8>)
 800a0e4:	18c0      	adds	r0, r0, r3
 800a0e6:	9b08      	ldr	r3, [sp, #32]
 800a0e8:	6018      	str	r0, [r3, #0]
 800a0ea:	4b09      	ldr	r3, [pc, #36]	@ (800a110 <__d2b+0xbc>)
 800a0ec:	18f3      	adds	r3, r6, r3
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	18e3      	adds	r3, r4, r3
 800a0f2:	6958      	ldr	r0, [r3, #20]
 800a0f4:	f7ff fd1e 	bl	8009b34 <__hi0bits>
 800a0f8:	0176      	lsls	r6, r6, #5
 800a0fa:	e7e3      	b.n	800a0c4 <__d2b+0x70>
 800a0fc:	0800b104 	.word	0x0800b104
 800a100:	0800b115 	.word	0x0800b115
 800a104:	0000030f 	.word	0x0000030f
 800a108:	fffffbcd 	.word	0xfffffbcd
 800a10c:	fffffbce 	.word	0xfffffbce
 800a110:	3fffffff 	.word	0x3fffffff

0800a114 <__ssputs_r>:
 800a114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a116:	688e      	ldr	r6, [r1, #8]
 800a118:	b085      	sub	sp, #20
 800a11a:	001f      	movs	r7, r3
 800a11c:	000c      	movs	r4, r1
 800a11e:	680b      	ldr	r3, [r1, #0]
 800a120:	9002      	str	r0, [sp, #8]
 800a122:	9203      	str	r2, [sp, #12]
 800a124:	42be      	cmp	r6, r7
 800a126:	d830      	bhi.n	800a18a <__ssputs_r+0x76>
 800a128:	210c      	movs	r1, #12
 800a12a:	5e62      	ldrsh	r2, [r4, r1]
 800a12c:	2190      	movs	r1, #144	@ 0x90
 800a12e:	00c9      	lsls	r1, r1, #3
 800a130:	420a      	tst	r2, r1
 800a132:	d028      	beq.n	800a186 <__ssputs_r+0x72>
 800a134:	2003      	movs	r0, #3
 800a136:	6921      	ldr	r1, [r4, #16]
 800a138:	1a5b      	subs	r3, r3, r1
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	6963      	ldr	r3, [r4, #20]
 800a13e:	4343      	muls	r3, r0
 800a140:	9801      	ldr	r0, [sp, #4]
 800a142:	0fdd      	lsrs	r5, r3, #31
 800a144:	18ed      	adds	r5, r5, r3
 800a146:	1c7b      	adds	r3, r7, #1
 800a148:	181b      	adds	r3, r3, r0
 800a14a:	106d      	asrs	r5, r5, #1
 800a14c:	42ab      	cmp	r3, r5
 800a14e:	d900      	bls.n	800a152 <__ssputs_r+0x3e>
 800a150:	001d      	movs	r5, r3
 800a152:	0552      	lsls	r2, r2, #21
 800a154:	d528      	bpl.n	800a1a8 <__ssputs_r+0x94>
 800a156:	0029      	movs	r1, r5
 800a158:	9802      	ldr	r0, [sp, #8]
 800a15a:	f7ff fbaf 	bl	80098bc <_malloc_r>
 800a15e:	1e06      	subs	r6, r0, #0
 800a160:	d02c      	beq.n	800a1bc <__ssputs_r+0xa8>
 800a162:	9a01      	ldr	r2, [sp, #4]
 800a164:	6921      	ldr	r1, [r4, #16]
 800a166:	f7fe fcb5 	bl	8008ad4 <memcpy>
 800a16a:	89a2      	ldrh	r2, [r4, #12]
 800a16c:	4b18      	ldr	r3, [pc, #96]	@ (800a1d0 <__ssputs_r+0xbc>)
 800a16e:	401a      	ands	r2, r3
 800a170:	2380      	movs	r3, #128	@ 0x80
 800a172:	4313      	orrs	r3, r2
 800a174:	81a3      	strh	r3, [r4, #12]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	6126      	str	r6, [r4, #16]
 800a17a:	18f6      	adds	r6, r6, r3
 800a17c:	6026      	str	r6, [r4, #0]
 800a17e:	003e      	movs	r6, r7
 800a180:	6165      	str	r5, [r4, #20]
 800a182:	1aed      	subs	r5, r5, r3
 800a184:	60a5      	str	r5, [r4, #8]
 800a186:	42be      	cmp	r6, r7
 800a188:	d900      	bls.n	800a18c <__ssputs_r+0x78>
 800a18a:	003e      	movs	r6, r7
 800a18c:	0032      	movs	r2, r6
 800a18e:	9903      	ldr	r1, [sp, #12]
 800a190:	6820      	ldr	r0, [r4, #0]
 800a192:	f000 f9ce 	bl	800a532 <memmove>
 800a196:	2000      	movs	r0, #0
 800a198:	68a3      	ldr	r3, [r4, #8]
 800a19a:	1b9b      	subs	r3, r3, r6
 800a19c:	60a3      	str	r3, [r4, #8]
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	199b      	adds	r3, r3, r6
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	b005      	add	sp, #20
 800a1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a8:	002a      	movs	r2, r5
 800a1aa:	9802      	ldr	r0, [sp, #8]
 800a1ac:	f000 fa43 	bl	800a636 <_realloc_r>
 800a1b0:	1e06      	subs	r6, r0, #0
 800a1b2:	d1e0      	bne.n	800a176 <__ssputs_r+0x62>
 800a1b4:	6921      	ldr	r1, [r4, #16]
 800a1b6:	9802      	ldr	r0, [sp, #8]
 800a1b8:	f7ff fb0a 	bl	80097d0 <_free_r>
 800a1bc:	230c      	movs	r3, #12
 800a1be:	2001      	movs	r0, #1
 800a1c0:	9a02      	ldr	r2, [sp, #8]
 800a1c2:	4240      	negs	r0, r0
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	89a2      	ldrh	r2, [r4, #12]
 800a1c8:	3334      	adds	r3, #52	@ 0x34
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	e7e9      	b.n	800a1a4 <__ssputs_r+0x90>
 800a1d0:	fffffb7f 	.word	0xfffffb7f

0800a1d4 <_svfiprintf_r>:
 800a1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1d6:	b0a1      	sub	sp, #132	@ 0x84
 800a1d8:	9003      	str	r0, [sp, #12]
 800a1da:	001d      	movs	r5, r3
 800a1dc:	898b      	ldrh	r3, [r1, #12]
 800a1de:	000f      	movs	r7, r1
 800a1e0:	0016      	movs	r6, r2
 800a1e2:	061b      	lsls	r3, r3, #24
 800a1e4:	d511      	bpl.n	800a20a <_svfiprintf_r+0x36>
 800a1e6:	690b      	ldr	r3, [r1, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10e      	bne.n	800a20a <_svfiprintf_r+0x36>
 800a1ec:	2140      	movs	r1, #64	@ 0x40
 800a1ee:	f7ff fb65 	bl	80098bc <_malloc_r>
 800a1f2:	6038      	str	r0, [r7, #0]
 800a1f4:	6138      	str	r0, [r7, #16]
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d105      	bne.n	800a206 <_svfiprintf_r+0x32>
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	9a03      	ldr	r2, [sp, #12]
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	2001      	movs	r0, #1
 800a202:	4240      	negs	r0, r0
 800a204:	e0cf      	b.n	800a3a6 <_svfiprintf_r+0x1d2>
 800a206:	2340      	movs	r3, #64	@ 0x40
 800a208:	617b      	str	r3, [r7, #20]
 800a20a:	2300      	movs	r3, #0
 800a20c:	ac08      	add	r4, sp, #32
 800a20e:	6163      	str	r3, [r4, #20]
 800a210:	3320      	adds	r3, #32
 800a212:	7663      	strb	r3, [r4, #25]
 800a214:	3310      	adds	r3, #16
 800a216:	76a3      	strb	r3, [r4, #26]
 800a218:	9507      	str	r5, [sp, #28]
 800a21a:	0035      	movs	r5, r6
 800a21c:	782b      	ldrb	r3, [r5, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <_svfiprintf_r+0x52>
 800a222:	2b25      	cmp	r3, #37	@ 0x25
 800a224:	d148      	bne.n	800a2b8 <_svfiprintf_r+0xe4>
 800a226:	1bab      	subs	r3, r5, r6
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	42b5      	cmp	r5, r6
 800a22c:	d00b      	beq.n	800a246 <_svfiprintf_r+0x72>
 800a22e:	0032      	movs	r2, r6
 800a230:	0039      	movs	r1, r7
 800a232:	9803      	ldr	r0, [sp, #12]
 800a234:	f7ff ff6e 	bl	800a114 <__ssputs_r>
 800a238:	3001      	adds	r0, #1
 800a23a:	d100      	bne.n	800a23e <_svfiprintf_r+0x6a>
 800a23c:	e0ae      	b.n	800a39c <_svfiprintf_r+0x1c8>
 800a23e:	6963      	ldr	r3, [r4, #20]
 800a240:	9a05      	ldr	r2, [sp, #20]
 800a242:	189b      	adds	r3, r3, r2
 800a244:	6163      	str	r3, [r4, #20]
 800a246:	782b      	ldrb	r3, [r5, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d100      	bne.n	800a24e <_svfiprintf_r+0x7a>
 800a24c:	e0a6      	b.n	800a39c <_svfiprintf_r+0x1c8>
 800a24e:	2201      	movs	r2, #1
 800a250:	2300      	movs	r3, #0
 800a252:	4252      	negs	r2, r2
 800a254:	6062      	str	r2, [r4, #4]
 800a256:	a904      	add	r1, sp, #16
 800a258:	3254      	adds	r2, #84	@ 0x54
 800a25a:	1852      	adds	r2, r2, r1
 800a25c:	1c6e      	adds	r6, r5, #1
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	60e3      	str	r3, [r4, #12]
 800a262:	60a3      	str	r3, [r4, #8]
 800a264:	7013      	strb	r3, [r2, #0]
 800a266:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a268:	4b54      	ldr	r3, [pc, #336]	@ (800a3bc <_svfiprintf_r+0x1e8>)
 800a26a:	2205      	movs	r2, #5
 800a26c:	0018      	movs	r0, r3
 800a26e:	7831      	ldrb	r1, [r6, #0]
 800a270:	9305      	str	r3, [sp, #20]
 800a272:	f7fe fc24 	bl	8008abe <memchr>
 800a276:	1c75      	adds	r5, r6, #1
 800a278:	2800      	cmp	r0, #0
 800a27a:	d11f      	bne.n	800a2bc <_svfiprintf_r+0xe8>
 800a27c:	6822      	ldr	r2, [r4, #0]
 800a27e:	06d3      	lsls	r3, r2, #27
 800a280:	d504      	bpl.n	800a28c <_svfiprintf_r+0xb8>
 800a282:	2353      	movs	r3, #83	@ 0x53
 800a284:	a904      	add	r1, sp, #16
 800a286:	185b      	adds	r3, r3, r1
 800a288:	2120      	movs	r1, #32
 800a28a:	7019      	strb	r1, [r3, #0]
 800a28c:	0713      	lsls	r3, r2, #28
 800a28e:	d504      	bpl.n	800a29a <_svfiprintf_r+0xc6>
 800a290:	2353      	movs	r3, #83	@ 0x53
 800a292:	a904      	add	r1, sp, #16
 800a294:	185b      	adds	r3, r3, r1
 800a296:	212b      	movs	r1, #43	@ 0x2b
 800a298:	7019      	strb	r1, [r3, #0]
 800a29a:	7833      	ldrb	r3, [r6, #0]
 800a29c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a29e:	d016      	beq.n	800a2ce <_svfiprintf_r+0xfa>
 800a2a0:	0035      	movs	r5, r6
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	200a      	movs	r0, #10
 800a2a6:	68e3      	ldr	r3, [r4, #12]
 800a2a8:	782a      	ldrb	r2, [r5, #0]
 800a2aa:	1c6e      	adds	r6, r5, #1
 800a2ac:	3a30      	subs	r2, #48	@ 0x30
 800a2ae:	2a09      	cmp	r2, #9
 800a2b0:	d950      	bls.n	800a354 <_svfiprintf_r+0x180>
 800a2b2:	2900      	cmp	r1, #0
 800a2b4:	d111      	bne.n	800a2da <_svfiprintf_r+0x106>
 800a2b6:	e017      	b.n	800a2e8 <_svfiprintf_r+0x114>
 800a2b8:	3501      	adds	r5, #1
 800a2ba:	e7af      	b.n	800a21c <_svfiprintf_r+0x48>
 800a2bc:	9b05      	ldr	r3, [sp, #20]
 800a2be:	6822      	ldr	r2, [r4, #0]
 800a2c0:	1ac0      	subs	r0, r0, r3
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4083      	lsls	r3, r0
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	002e      	movs	r6, r5
 800a2ca:	6023      	str	r3, [r4, #0]
 800a2cc:	e7cc      	b.n	800a268 <_svfiprintf_r+0x94>
 800a2ce:	9b07      	ldr	r3, [sp, #28]
 800a2d0:	1d19      	adds	r1, r3, #4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	9107      	str	r1, [sp, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	db01      	blt.n	800a2de <_svfiprintf_r+0x10a>
 800a2da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2dc:	e004      	b.n	800a2e8 <_svfiprintf_r+0x114>
 800a2de:	425b      	negs	r3, r3
 800a2e0:	60e3      	str	r3, [r4, #12]
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	6023      	str	r3, [r4, #0]
 800a2e8:	782b      	ldrb	r3, [r5, #0]
 800a2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2ec:	d10c      	bne.n	800a308 <_svfiprintf_r+0x134>
 800a2ee:	786b      	ldrb	r3, [r5, #1]
 800a2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2f2:	d134      	bne.n	800a35e <_svfiprintf_r+0x18a>
 800a2f4:	9b07      	ldr	r3, [sp, #28]
 800a2f6:	3502      	adds	r5, #2
 800a2f8:	1d1a      	adds	r2, r3, #4
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	9207      	str	r2, [sp, #28]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	da01      	bge.n	800a306 <_svfiprintf_r+0x132>
 800a302:	2301      	movs	r3, #1
 800a304:	425b      	negs	r3, r3
 800a306:	9309      	str	r3, [sp, #36]	@ 0x24
 800a308:	4e2d      	ldr	r6, [pc, #180]	@ (800a3c0 <_svfiprintf_r+0x1ec>)
 800a30a:	2203      	movs	r2, #3
 800a30c:	0030      	movs	r0, r6
 800a30e:	7829      	ldrb	r1, [r5, #0]
 800a310:	f7fe fbd5 	bl	8008abe <memchr>
 800a314:	2800      	cmp	r0, #0
 800a316:	d006      	beq.n	800a326 <_svfiprintf_r+0x152>
 800a318:	2340      	movs	r3, #64	@ 0x40
 800a31a:	1b80      	subs	r0, r0, r6
 800a31c:	4083      	lsls	r3, r0
 800a31e:	6822      	ldr	r2, [r4, #0]
 800a320:	3501      	adds	r5, #1
 800a322:	4313      	orrs	r3, r2
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	7829      	ldrb	r1, [r5, #0]
 800a328:	2206      	movs	r2, #6
 800a32a:	4826      	ldr	r0, [pc, #152]	@ (800a3c4 <_svfiprintf_r+0x1f0>)
 800a32c:	1c6e      	adds	r6, r5, #1
 800a32e:	7621      	strb	r1, [r4, #24]
 800a330:	f7fe fbc5 	bl	8008abe <memchr>
 800a334:	2800      	cmp	r0, #0
 800a336:	d038      	beq.n	800a3aa <_svfiprintf_r+0x1d6>
 800a338:	4b23      	ldr	r3, [pc, #140]	@ (800a3c8 <_svfiprintf_r+0x1f4>)
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d122      	bne.n	800a384 <_svfiprintf_r+0x1b0>
 800a33e:	2207      	movs	r2, #7
 800a340:	9b07      	ldr	r3, [sp, #28]
 800a342:	3307      	adds	r3, #7
 800a344:	4393      	bics	r3, r2
 800a346:	3308      	adds	r3, #8
 800a348:	9307      	str	r3, [sp, #28]
 800a34a:	6963      	ldr	r3, [r4, #20]
 800a34c:	9a04      	ldr	r2, [sp, #16]
 800a34e:	189b      	adds	r3, r3, r2
 800a350:	6163      	str	r3, [r4, #20]
 800a352:	e762      	b.n	800a21a <_svfiprintf_r+0x46>
 800a354:	4343      	muls	r3, r0
 800a356:	0035      	movs	r5, r6
 800a358:	2101      	movs	r1, #1
 800a35a:	189b      	adds	r3, r3, r2
 800a35c:	e7a4      	b.n	800a2a8 <_svfiprintf_r+0xd4>
 800a35e:	2300      	movs	r3, #0
 800a360:	200a      	movs	r0, #10
 800a362:	0019      	movs	r1, r3
 800a364:	3501      	adds	r5, #1
 800a366:	6063      	str	r3, [r4, #4]
 800a368:	782a      	ldrb	r2, [r5, #0]
 800a36a:	1c6e      	adds	r6, r5, #1
 800a36c:	3a30      	subs	r2, #48	@ 0x30
 800a36e:	2a09      	cmp	r2, #9
 800a370:	d903      	bls.n	800a37a <_svfiprintf_r+0x1a6>
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0c8      	beq.n	800a308 <_svfiprintf_r+0x134>
 800a376:	9109      	str	r1, [sp, #36]	@ 0x24
 800a378:	e7c6      	b.n	800a308 <_svfiprintf_r+0x134>
 800a37a:	4341      	muls	r1, r0
 800a37c:	0035      	movs	r5, r6
 800a37e:	2301      	movs	r3, #1
 800a380:	1889      	adds	r1, r1, r2
 800a382:	e7f1      	b.n	800a368 <_svfiprintf_r+0x194>
 800a384:	aa07      	add	r2, sp, #28
 800a386:	9200      	str	r2, [sp, #0]
 800a388:	0021      	movs	r1, r4
 800a38a:	003a      	movs	r2, r7
 800a38c:	4b0f      	ldr	r3, [pc, #60]	@ (800a3cc <_svfiprintf_r+0x1f8>)
 800a38e:	9803      	ldr	r0, [sp, #12]
 800a390:	f7fd fe22 	bl	8007fd8 <_printf_float>
 800a394:	9004      	str	r0, [sp, #16]
 800a396:	9b04      	ldr	r3, [sp, #16]
 800a398:	3301      	adds	r3, #1
 800a39a:	d1d6      	bne.n	800a34a <_svfiprintf_r+0x176>
 800a39c:	89bb      	ldrh	r3, [r7, #12]
 800a39e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a3a0:	065b      	lsls	r3, r3, #25
 800a3a2:	d500      	bpl.n	800a3a6 <_svfiprintf_r+0x1d2>
 800a3a4:	e72c      	b.n	800a200 <_svfiprintf_r+0x2c>
 800a3a6:	b021      	add	sp, #132	@ 0x84
 800a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3aa:	aa07      	add	r2, sp, #28
 800a3ac:	9200      	str	r2, [sp, #0]
 800a3ae:	0021      	movs	r1, r4
 800a3b0:	003a      	movs	r2, r7
 800a3b2:	4b06      	ldr	r3, [pc, #24]	@ (800a3cc <_svfiprintf_r+0x1f8>)
 800a3b4:	9803      	ldr	r0, [sp, #12]
 800a3b6:	f7fe f8bd 	bl	8008534 <_printf_i>
 800a3ba:	e7eb      	b.n	800a394 <_svfiprintf_r+0x1c0>
 800a3bc:	0800b16e 	.word	0x0800b16e
 800a3c0:	0800b174 	.word	0x0800b174
 800a3c4:	0800b178 	.word	0x0800b178
 800a3c8:	08007fd9 	.word	0x08007fd9
 800a3cc:	0800a115 	.word	0x0800a115

0800a3d0 <__sflush_r>:
 800a3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3d2:	220c      	movs	r2, #12
 800a3d4:	5e8b      	ldrsh	r3, [r1, r2]
 800a3d6:	0005      	movs	r5, r0
 800a3d8:	000c      	movs	r4, r1
 800a3da:	071a      	lsls	r2, r3, #28
 800a3dc:	d456      	bmi.n	800a48c <__sflush_r+0xbc>
 800a3de:	684a      	ldr	r2, [r1, #4]
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	dc02      	bgt.n	800a3ea <__sflush_r+0x1a>
 800a3e4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	dd4e      	ble.n	800a488 <__sflush_r+0xb8>
 800a3ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a3ec:	2f00      	cmp	r7, #0
 800a3ee:	d04b      	beq.n	800a488 <__sflush_r+0xb8>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2080      	movs	r0, #128	@ 0x80
 800a3f4:	682e      	ldr	r6, [r5, #0]
 800a3f6:	602a      	str	r2, [r5, #0]
 800a3f8:	001a      	movs	r2, r3
 800a3fa:	0140      	lsls	r0, r0, #5
 800a3fc:	6a21      	ldr	r1, [r4, #32]
 800a3fe:	4002      	ands	r2, r0
 800a400:	4203      	tst	r3, r0
 800a402:	d033      	beq.n	800a46c <__sflush_r+0x9c>
 800a404:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	075b      	lsls	r3, r3, #29
 800a40a:	d506      	bpl.n	800a41a <__sflush_r+0x4a>
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	1ad2      	subs	r2, r2, r3
 800a410:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <__sflush_r+0x4a>
 800a416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a418:	1ad2      	subs	r2, r2, r3
 800a41a:	2300      	movs	r3, #0
 800a41c:	0028      	movs	r0, r5
 800a41e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a420:	6a21      	ldr	r1, [r4, #32]
 800a422:	47b8      	blx	r7
 800a424:	89a2      	ldrh	r2, [r4, #12]
 800a426:	1c43      	adds	r3, r0, #1
 800a428:	d106      	bne.n	800a438 <__sflush_r+0x68>
 800a42a:	6829      	ldr	r1, [r5, #0]
 800a42c:	291d      	cmp	r1, #29
 800a42e:	d846      	bhi.n	800a4be <__sflush_r+0xee>
 800a430:	4b29      	ldr	r3, [pc, #164]	@ (800a4d8 <__sflush_r+0x108>)
 800a432:	40cb      	lsrs	r3, r1
 800a434:	07db      	lsls	r3, r3, #31
 800a436:	d542      	bpl.n	800a4be <__sflush_r+0xee>
 800a438:	2300      	movs	r3, #0
 800a43a:	6063      	str	r3, [r4, #4]
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	6023      	str	r3, [r4, #0]
 800a440:	04d2      	lsls	r2, r2, #19
 800a442:	d505      	bpl.n	800a450 <__sflush_r+0x80>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <__sflush_r+0x7e>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d100      	bne.n	800a450 <__sflush_r+0x80>
 800a44e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a452:	602e      	str	r6, [r5, #0]
 800a454:	2900      	cmp	r1, #0
 800a456:	d017      	beq.n	800a488 <__sflush_r+0xb8>
 800a458:	0023      	movs	r3, r4
 800a45a:	3344      	adds	r3, #68	@ 0x44
 800a45c:	4299      	cmp	r1, r3
 800a45e:	d002      	beq.n	800a466 <__sflush_r+0x96>
 800a460:	0028      	movs	r0, r5
 800a462:	f7ff f9b5 	bl	80097d0 <_free_r>
 800a466:	2300      	movs	r3, #0
 800a468:	6363      	str	r3, [r4, #52]	@ 0x34
 800a46a:	e00d      	b.n	800a488 <__sflush_r+0xb8>
 800a46c:	2301      	movs	r3, #1
 800a46e:	0028      	movs	r0, r5
 800a470:	47b8      	blx	r7
 800a472:	0002      	movs	r2, r0
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d1c6      	bne.n	800a406 <__sflush_r+0x36>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0c3      	beq.n	800a406 <__sflush_r+0x36>
 800a47e:	2b1d      	cmp	r3, #29
 800a480:	d001      	beq.n	800a486 <__sflush_r+0xb6>
 800a482:	2b16      	cmp	r3, #22
 800a484:	d11a      	bne.n	800a4bc <__sflush_r+0xec>
 800a486:	602e      	str	r6, [r5, #0]
 800a488:	2000      	movs	r0, #0
 800a48a:	e01e      	b.n	800a4ca <__sflush_r+0xfa>
 800a48c:	690e      	ldr	r6, [r1, #16]
 800a48e:	2e00      	cmp	r6, #0
 800a490:	d0fa      	beq.n	800a488 <__sflush_r+0xb8>
 800a492:	680f      	ldr	r7, [r1, #0]
 800a494:	600e      	str	r6, [r1, #0]
 800a496:	1bba      	subs	r2, r7, r6
 800a498:	9201      	str	r2, [sp, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	079b      	lsls	r3, r3, #30
 800a49e:	d100      	bne.n	800a4a2 <__sflush_r+0xd2>
 800a4a0:	694a      	ldr	r2, [r1, #20]
 800a4a2:	60a2      	str	r2, [r4, #8]
 800a4a4:	9b01      	ldr	r3, [sp, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	ddee      	ble.n	800a488 <__sflush_r+0xb8>
 800a4aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a4ac:	0032      	movs	r2, r6
 800a4ae:	001f      	movs	r7, r3
 800a4b0:	0028      	movs	r0, r5
 800a4b2:	9b01      	ldr	r3, [sp, #4]
 800a4b4:	6a21      	ldr	r1, [r4, #32]
 800a4b6:	47b8      	blx	r7
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	dc07      	bgt.n	800a4cc <__sflush_r+0xfc>
 800a4bc:	89a2      	ldrh	r2, [r4, #12]
 800a4be:	2340      	movs	r3, #64	@ 0x40
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b21b      	sxth	r3, r3
 800a4c6:	81a3      	strh	r3, [r4, #12]
 800a4c8:	4240      	negs	r0, r0
 800a4ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4cc:	9b01      	ldr	r3, [sp, #4]
 800a4ce:	1836      	adds	r6, r6, r0
 800a4d0:	1a1b      	subs	r3, r3, r0
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	e7e6      	b.n	800a4a4 <__sflush_r+0xd4>
 800a4d6:	46c0      	nop			@ (mov r8, r8)
 800a4d8:	20400001 	.word	0x20400001

0800a4dc <_fflush_r>:
 800a4dc:	690b      	ldr	r3, [r1, #16]
 800a4de:	b570      	push	{r4, r5, r6, lr}
 800a4e0:	0005      	movs	r5, r0
 800a4e2:	000c      	movs	r4, r1
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <_fflush_r+0x12>
 800a4e8:	2500      	movs	r5, #0
 800a4ea:	0028      	movs	r0, r5
 800a4ec:	bd70      	pop	{r4, r5, r6, pc}
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d004      	beq.n	800a4fc <_fflush_r+0x20>
 800a4f2:	6a03      	ldr	r3, [r0, #32]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <_fflush_r+0x20>
 800a4f8:	f7fe f9b8 	bl	800886c <__sinit>
 800a4fc:	220c      	movs	r2, #12
 800a4fe:	5ea3      	ldrsh	r3, [r4, r2]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0f1      	beq.n	800a4e8 <_fflush_r+0xc>
 800a504:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a506:	07d2      	lsls	r2, r2, #31
 800a508:	d404      	bmi.n	800a514 <_fflush_r+0x38>
 800a50a:	059b      	lsls	r3, r3, #22
 800a50c:	d402      	bmi.n	800a514 <_fflush_r+0x38>
 800a50e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a510:	f7fe fad3 	bl	8008aba <__retarget_lock_acquire_recursive>
 800a514:	0028      	movs	r0, r5
 800a516:	0021      	movs	r1, r4
 800a518:	f7ff ff5a 	bl	800a3d0 <__sflush_r>
 800a51c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a51e:	0005      	movs	r5, r0
 800a520:	07db      	lsls	r3, r3, #31
 800a522:	d4e2      	bmi.n	800a4ea <_fflush_r+0xe>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	059b      	lsls	r3, r3, #22
 800a528:	d4df      	bmi.n	800a4ea <_fflush_r+0xe>
 800a52a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a52c:	f7fe fac6 	bl	8008abc <__retarget_lock_release_recursive>
 800a530:	e7db      	b.n	800a4ea <_fflush_r+0xe>

0800a532 <memmove>:
 800a532:	b510      	push	{r4, lr}
 800a534:	4288      	cmp	r0, r1
 800a536:	d902      	bls.n	800a53e <memmove+0xc>
 800a538:	188b      	adds	r3, r1, r2
 800a53a:	4298      	cmp	r0, r3
 800a53c:	d308      	bcc.n	800a550 <memmove+0x1e>
 800a53e:	2300      	movs	r3, #0
 800a540:	429a      	cmp	r2, r3
 800a542:	d007      	beq.n	800a554 <memmove+0x22>
 800a544:	5ccc      	ldrb	r4, [r1, r3]
 800a546:	54c4      	strb	r4, [r0, r3]
 800a548:	3301      	adds	r3, #1
 800a54a:	e7f9      	b.n	800a540 <memmove+0xe>
 800a54c:	5c8b      	ldrb	r3, [r1, r2]
 800a54e:	5483      	strb	r3, [r0, r2]
 800a550:	3a01      	subs	r2, #1
 800a552:	d2fb      	bcs.n	800a54c <memmove+0x1a>
 800a554:	bd10      	pop	{r4, pc}
	...

0800a558 <_sbrk_r>:
 800a558:	2300      	movs	r3, #0
 800a55a:	b570      	push	{r4, r5, r6, lr}
 800a55c:	4d06      	ldr	r5, [pc, #24]	@ (800a578 <_sbrk_r+0x20>)
 800a55e:	0004      	movs	r4, r0
 800a560:	0008      	movs	r0, r1
 800a562:	602b      	str	r3, [r5, #0]
 800a564:	f7fa feb8 	bl	80052d8 <_sbrk>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d103      	bne.n	800a574 <_sbrk_r+0x1c>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d000      	beq.n	800a574 <_sbrk_r+0x1c>
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	46c0      	nop			@ (mov r8, r8)
 800a578:	2000145c 	.word	0x2000145c

0800a57c <__assert_func>:
 800a57c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a57e:	0014      	movs	r4, r2
 800a580:	001a      	movs	r2, r3
 800a582:	4b09      	ldr	r3, [pc, #36]	@ (800a5a8 <__assert_func+0x2c>)
 800a584:	0005      	movs	r5, r0
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	000e      	movs	r6, r1
 800a58a:	68d8      	ldr	r0, [r3, #12]
 800a58c:	4b07      	ldr	r3, [pc, #28]	@ (800a5ac <__assert_func+0x30>)
 800a58e:	2c00      	cmp	r4, #0
 800a590:	d101      	bne.n	800a596 <__assert_func+0x1a>
 800a592:	4b07      	ldr	r3, [pc, #28]	@ (800a5b0 <__assert_func+0x34>)
 800a594:	001c      	movs	r4, r3
 800a596:	4907      	ldr	r1, [pc, #28]	@ (800a5b4 <__assert_func+0x38>)
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	9402      	str	r4, [sp, #8]
 800a59c:	002b      	movs	r3, r5
 800a59e:	9600      	str	r6, [sp, #0]
 800a5a0:	f000 f886 	bl	800a6b0 <fiprintf>
 800a5a4:	f000 f894 	bl	800a6d0 <abort>
 800a5a8:	20000018 	.word	0x20000018
 800a5ac:	0800b189 	.word	0x0800b189
 800a5b0:	0800b1c4 	.word	0x0800b1c4
 800a5b4:	0800b196 	.word	0x0800b196

0800a5b8 <_calloc_r>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	0c0b      	lsrs	r3, r1, #16
 800a5bc:	0c15      	lsrs	r5, r2, #16
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d11e      	bne.n	800a600 <_calloc_r+0x48>
 800a5c2:	2d00      	cmp	r5, #0
 800a5c4:	d10c      	bne.n	800a5e0 <_calloc_r+0x28>
 800a5c6:	b289      	uxth	r1, r1
 800a5c8:	b294      	uxth	r4, r2
 800a5ca:	434c      	muls	r4, r1
 800a5cc:	0021      	movs	r1, r4
 800a5ce:	f7ff f975 	bl	80098bc <_malloc_r>
 800a5d2:	1e05      	subs	r5, r0, #0
 800a5d4:	d01b      	beq.n	800a60e <_calloc_r+0x56>
 800a5d6:	0022      	movs	r2, r4
 800a5d8:	2100      	movs	r1, #0
 800a5da:	f7fe f9e9 	bl	80089b0 <memset>
 800a5de:	e016      	b.n	800a60e <_calloc_r+0x56>
 800a5e0:	1c2b      	adds	r3, r5, #0
 800a5e2:	1c0c      	adds	r4, r1, #0
 800a5e4:	b289      	uxth	r1, r1
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	434a      	muls	r2, r1
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	b2a1      	uxth	r1, r4
 800a5ee:	4359      	muls	r1, r3
 800a5f0:	0c14      	lsrs	r4, r2, #16
 800a5f2:	190c      	adds	r4, r1, r4
 800a5f4:	0c23      	lsrs	r3, r4, #16
 800a5f6:	d107      	bne.n	800a608 <_calloc_r+0x50>
 800a5f8:	0424      	lsls	r4, r4, #16
 800a5fa:	b292      	uxth	r2, r2
 800a5fc:	4314      	orrs	r4, r2
 800a5fe:	e7e5      	b.n	800a5cc <_calloc_r+0x14>
 800a600:	2d00      	cmp	r5, #0
 800a602:	d101      	bne.n	800a608 <_calloc_r+0x50>
 800a604:	1c14      	adds	r4, r2, #0
 800a606:	e7ed      	b.n	800a5e4 <_calloc_r+0x2c>
 800a608:	230c      	movs	r3, #12
 800a60a:	2500      	movs	r5, #0
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	0028      	movs	r0, r5
 800a610:	bd70      	pop	{r4, r5, r6, pc}

0800a612 <__ascii_mbtowc>:
 800a612:	b082      	sub	sp, #8
 800a614:	2900      	cmp	r1, #0
 800a616:	d100      	bne.n	800a61a <__ascii_mbtowc+0x8>
 800a618:	a901      	add	r1, sp, #4
 800a61a:	1e10      	subs	r0, r2, #0
 800a61c:	d006      	beq.n	800a62c <__ascii_mbtowc+0x1a>
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d006      	beq.n	800a630 <__ascii_mbtowc+0x1e>
 800a622:	7813      	ldrb	r3, [r2, #0]
 800a624:	600b      	str	r3, [r1, #0]
 800a626:	7810      	ldrb	r0, [r2, #0]
 800a628:	1e43      	subs	r3, r0, #1
 800a62a:	4198      	sbcs	r0, r3
 800a62c:	b002      	add	sp, #8
 800a62e:	4770      	bx	lr
 800a630:	2002      	movs	r0, #2
 800a632:	4240      	negs	r0, r0
 800a634:	e7fa      	b.n	800a62c <__ascii_mbtowc+0x1a>

0800a636 <_realloc_r>:
 800a636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a638:	0006      	movs	r6, r0
 800a63a:	000c      	movs	r4, r1
 800a63c:	0015      	movs	r5, r2
 800a63e:	2900      	cmp	r1, #0
 800a640:	d105      	bne.n	800a64e <_realloc_r+0x18>
 800a642:	0011      	movs	r1, r2
 800a644:	f7ff f93a 	bl	80098bc <_malloc_r>
 800a648:	0004      	movs	r4, r0
 800a64a:	0020      	movs	r0, r4
 800a64c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a64e:	2a00      	cmp	r2, #0
 800a650:	d103      	bne.n	800a65a <_realloc_r+0x24>
 800a652:	f7ff f8bd 	bl	80097d0 <_free_r>
 800a656:	002c      	movs	r4, r5
 800a658:	e7f7      	b.n	800a64a <_realloc_r+0x14>
 800a65a:	f000 f840 	bl	800a6de <_malloc_usable_size_r>
 800a65e:	0007      	movs	r7, r0
 800a660:	4285      	cmp	r5, r0
 800a662:	d802      	bhi.n	800a66a <_realloc_r+0x34>
 800a664:	0843      	lsrs	r3, r0, #1
 800a666:	42ab      	cmp	r3, r5
 800a668:	d3ef      	bcc.n	800a64a <_realloc_r+0x14>
 800a66a:	0029      	movs	r1, r5
 800a66c:	0030      	movs	r0, r6
 800a66e:	f7ff f925 	bl	80098bc <_malloc_r>
 800a672:	9001      	str	r0, [sp, #4]
 800a674:	2800      	cmp	r0, #0
 800a676:	d101      	bne.n	800a67c <_realloc_r+0x46>
 800a678:	9c01      	ldr	r4, [sp, #4]
 800a67a:	e7e6      	b.n	800a64a <_realloc_r+0x14>
 800a67c:	002a      	movs	r2, r5
 800a67e:	42bd      	cmp	r5, r7
 800a680:	d900      	bls.n	800a684 <_realloc_r+0x4e>
 800a682:	003a      	movs	r2, r7
 800a684:	0021      	movs	r1, r4
 800a686:	9801      	ldr	r0, [sp, #4]
 800a688:	f7fe fa24 	bl	8008ad4 <memcpy>
 800a68c:	0021      	movs	r1, r4
 800a68e:	0030      	movs	r0, r6
 800a690:	f7ff f89e 	bl	80097d0 <_free_r>
 800a694:	e7f0      	b.n	800a678 <_realloc_r+0x42>

0800a696 <__ascii_wctomb>:
 800a696:	0003      	movs	r3, r0
 800a698:	1e08      	subs	r0, r1, #0
 800a69a:	d005      	beq.n	800a6a8 <__ascii_wctomb+0x12>
 800a69c:	2aff      	cmp	r2, #255	@ 0xff
 800a69e:	d904      	bls.n	800a6aa <__ascii_wctomb+0x14>
 800a6a0:	228a      	movs	r2, #138	@ 0x8a
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	601a      	str	r2, [r3, #0]
 800a6a6:	4240      	negs	r0, r0
 800a6a8:	4770      	bx	lr
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	700a      	strb	r2, [r1, #0]
 800a6ae:	e7fb      	b.n	800a6a8 <__ascii_wctomb+0x12>

0800a6b0 <fiprintf>:
 800a6b0:	b40e      	push	{r1, r2, r3}
 800a6b2:	b517      	push	{r0, r1, r2, r4, lr}
 800a6b4:	4c05      	ldr	r4, [pc, #20]	@ (800a6cc <fiprintf+0x1c>)
 800a6b6:	ab05      	add	r3, sp, #20
 800a6b8:	cb04      	ldmia	r3!, {r2}
 800a6ba:	0001      	movs	r1, r0
 800a6bc:	6820      	ldr	r0, [r4, #0]
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	f000 f83c 	bl	800a73c <_vfiprintf_r>
 800a6c4:	bc1e      	pop	{r1, r2, r3, r4}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	b003      	add	sp, #12
 800a6ca:	4718      	bx	r3
 800a6cc:	20000018 	.word	0x20000018

0800a6d0 <abort>:
 800a6d0:	2006      	movs	r0, #6
 800a6d2:	b510      	push	{r4, lr}
 800a6d4:	f000 fa18 	bl	800ab08 <raise>
 800a6d8:	2001      	movs	r0, #1
 800a6da:	f7fa fd8a 	bl	80051f2 <_exit>

0800a6de <_malloc_usable_size_r>:
 800a6de:	1f0b      	subs	r3, r1, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	1f18      	subs	r0, r3, #4
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	da01      	bge.n	800a6ec <_malloc_usable_size_r+0xe>
 800a6e8:	580b      	ldr	r3, [r1, r0]
 800a6ea:	18c0      	adds	r0, r0, r3
 800a6ec:	4770      	bx	lr

0800a6ee <__sfputc_r>:
 800a6ee:	6893      	ldr	r3, [r2, #8]
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	6093      	str	r3, [r2, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	da04      	bge.n	800a704 <__sfputc_r+0x16>
 800a6fa:	6994      	ldr	r4, [r2, #24]
 800a6fc:	42a3      	cmp	r3, r4
 800a6fe:	db07      	blt.n	800a710 <__sfputc_r+0x22>
 800a700:	290a      	cmp	r1, #10
 800a702:	d005      	beq.n	800a710 <__sfputc_r+0x22>
 800a704:	6813      	ldr	r3, [r2, #0]
 800a706:	1c58      	adds	r0, r3, #1
 800a708:	6010      	str	r0, [r2, #0]
 800a70a:	7019      	strb	r1, [r3, #0]
 800a70c:	0008      	movs	r0, r1
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	f000 f930 	bl	800a974 <__swbuf_r>
 800a714:	0001      	movs	r1, r0
 800a716:	e7f9      	b.n	800a70c <__sfputc_r+0x1e>

0800a718 <__sfputs_r>:
 800a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71a:	0006      	movs	r6, r0
 800a71c:	000f      	movs	r7, r1
 800a71e:	0014      	movs	r4, r2
 800a720:	18d5      	adds	r5, r2, r3
 800a722:	42ac      	cmp	r4, r5
 800a724:	d101      	bne.n	800a72a <__sfputs_r+0x12>
 800a726:	2000      	movs	r0, #0
 800a728:	e007      	b.n	800a73a <__sfputs_r+0x22>
 800a72a:	7821      	ldrb	r1, [r4, #0]
 800a72c:	003a      	movs	r2, r7
 800a72e:	0030      	movs	r0, r6
 800a730:	f7ff ffdd 	bl	800a6ee <__sfputc_r>
 800a734:	3401      	adds	r4, #1
 800a736:	1c43      	adds	r3, r0, #1
 800a738:	d1f3      	bne.n	800a722 <__sfputs_r+0xa>
 800a73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a73c <_vfiprintf_r>:
 800a73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73e:	b0a1      	sub	sp, #132	@ 0x84
 800a740:	000f      	movs	r7, r1
 800a742:	0015      	movs	r5, r2
 800a744:	001e      	movs	r6, r3
 800a746:	9003      	str	r0, [sp, #12]
 800a748:	2800      	cmp	r0, #0
 800a74a:	d004      	beq.n	800a756 <_vfiprintf_r+0x1a>
 800a74c:	6a03      	ldr	r3, [r0, #32]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <_vfiprintf_r+0x1a>
 800a752:	f7fe f88b 	bl	800886c <__sinit>
 800a756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a758:	07db      	lsls	r3, r3, #31
 800a75a:	d405      	bmi.n	800a768 <_vfiprintf_r+0x2c>
 800a75c:	89bb      	ldrh	r3, [r7, #12]
 800a75e:	059b      	lsls	r3, r3, #22
 800a760:	d402      	bmi.n	800a768 <_vfiprintf_r+0x2c>
 800a762:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a764:	f7fe f9a9 	bl	8008aba <__retarget_lock_acquire_recursive>
 800a768:	89bb      	ldrh	r3, [r7, #12]
 800a76a:	071b      	lsls	r3, r3, #28
 800a76c:	d502      	bpl.n	800a774 <_vfiprintf_r+0x38>
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d113      	bne.n	800a79c <_vfiprintf_r+0x60>
 800a774:	0039      	movs	r1, r7
 800a776:	9803      	ldr	r0, [sp, #12]
 800a778:	f000 f93e 	bl	800a9f8 <__swsetup_r>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d00d      	beq.n	800a79c <_vfiprintf_r+0x60>
 800a780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a782:	07db      	lsls	r3, r3, #31
 800a784:	d503      	bpl.n	800a78e <_vfiprintf_r+0x52>
 800a786:	2001      	movs	r0, #1
 800a788:	4240      	negs	r0, r0
 800a78a:	b021      	add	sp, #132	@ 0x84
 800a78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a78e:	89bb      	ldrh	r3, [r7, #12]
 800a790:	059b      	lsls	r3, r3, #22
 800a792:	d4f8      	bmi.n	800a786 <_vfiprintf_r+0x4a>
 800a794:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a796:	f7fe f991 	bl	8008abc <__retarget_lock_release_recursive>
 800a79a:	e7f4      	b.n	800a786 <_vfiprintf_r+0x4a>
 800a79c:	2300      	movs	r3, #0
 800a79e:	ac08      	add	r4, sp, #32
 800a7a0:	6163      	str	r3, [r4, #20]
 800a7a2:	3320      	adds	r3, #32
 800a7a4:	7663      	strb	r3, [r4, #25]
 800a7a6:	3310      	adds	r3, #16
 800a7a8:	76a3      	strb	r3, [r4, #26]
 800a7aa:	9607      	str	r6, [sp, #28]
 800a7ac:	002e      	movs	r6, r5
 800a7ae:	7833      	ldrb	r3, [r6, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <_vfiprintf_r+0x7c>
 800a7b4:	2b25      	cmp	r3, #37	@ 0x25
 800a7b6:	d148      	bne.n	800a84a <_vfiprintf_r+0x10e>
 800a7b8:	1b73      	subs	r3, r6, r5
 800a7ba:	9305      	str	r3, [sp, #20]
 800a7bc:	42ae      	cmp	r6, r5
 800a7be:	d00b      	beq.n	800a7d8 <_vfiprintf_r+0x9c>
 800a7c0:	002a      	movs	r2, r5
 800a7c2:	0039      	movs	r1, r7
 800a7c4:	9803      	ldr	r0, [sp, #12]
 800a7c6:	f7ff ffa7 	bl	800a718 <__sfputs_r>
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	d100      	bne.n	800a7d0 <_vfiprintf_r+0x94>
 800a7ce:	e0ae      	b.n	800a92e <_vfiprintf_r+0x1f2>
 800a7d0:	6963      	ldr	r3, [r4, #20]
 800a7d2:	9a05      	ldr	r2, [sp, #20]
 800a7d4:	189b      	adds	r3, r3, r2
 800a7d6:	6163      	str	r3, [r4, #20]
 800a7d8:	7833      	ldrb	r3, [r6, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d100      	bne.n	800a7e0 <_vfiprintf_r+0xa4>
 800a7de:	e0a6      	b.n	800a92e <_vfiprintf_r+0x1f2>
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4252      	negs	r2, r2
 800a7e6:	6062      	str	r2, [r4, #4]
 800a7e8:	a904      	add	r1, sp, #16
 800a7ea:	3254      	adds	r2, #84	@ 0x54
 800a7ec:	1852      	adds	r2, r2, r1
 800a7ee:	1c75      	adds	r5, r6, #1
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	60e3      	str	r3, [r4, #12]
 800a7f4:	60a3      	str	r3, [r4, #8]
 800a7f6:	7013      	strb	r3, [r2, #0]
 800a7f8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a7fa:	4b59      	ldr	r3, [pc, #356]	@ (800a960 <_vfiprintf_r+0x224>)
 800a7fc:	2205      	movs	r2, #5
 800a7fe:	0018      	movs	r0, r3
 800a800:	7829      	ldrb	r1, [r5, #0]
 800a802:	9305      	str	r3, [sp, #20]
 800a804:	f7fe f95b 	bl	8008abe <memchr>
 800a808:	1c6e      	adds	r6, r5, #1
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d11f      	bne.n	800a84e <_vfiprintf_r+0x112>
 800a80e:	6822      	ldr	r2, [r4, #0]
 800a810:	06d3      	lsls	r3, r2, #27
 800a812:	d504      	bpl.n	800a81e <_vfiprintf_r+0xe2>
 800a814:	2353      	movs	r3, #83	@ 0x53
 800a816:	a904      	add	r1, sp, #16
 800a818:	185b      	adds	r3, r3, r1
 800a81a:	2120      	movs	r1, #32
 800a81c:	7019      	strb	r1, [r3, #0]
 800a81e:	0713      	lsls	r3, r2, #28
 800a820:	d504      	bpl.n	800a82c <_vfiprintf_r+0xf0>
 800a822:	2353      	movs	r3, #83	@ 0x53
 800a824:	a904      	add	r1, sp, #16
 800a826:	185b      	adds	r3, r3, r1
 800a828:	212b      	movs	r1, #43	@ 0x2b
 800a82a:	7019      	strb	r1, [r3, #0]
 800a82c:	782b      	ldrb	r3, [r5, #0]
 800a82e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a830:	d016      	beq.n	800a860 <_vfiprintf_r+0x124>
 800a832:	002e      	movs	r6, r5
 800a834:	2100      	movs	r1, #0
 800a836:	200a      	movs	r0, #10
 800a838:	68e3      	ldr	r3, [r4, #12]
 800a83a:	7832      	ldrb	r2, [r6, #0]
 800a83c:	1c75      	adds	r5, r6, #1
 800a83e:	3a30      	subs	r2, #48	@ 0x30
 800a840:	2a09      	cmp	r2, #9
 800a842:	d950      	bls.n	800a8e6 <_vfiprintf_r+0x1aa>
 800a844:	2900      	cmp	r1, #0
 800a846:	d111      	bne.n	800a86c <_vfiprintf_r+0x130>
 800a848:	e017      	b.n	800a87a <_vfiprintf_r+0x13e>
 800a84a:	3601      	adds	r6, #1
 800a84c:	e7af      	b.n	800a7ae <_vfiprintf_r+0x72>
 800a84e:	9b05      	ldr	r3, [sp, #20]
 800a850:	6822      	ldr	r2, [r4, #0]
 800a852:	1ac0      	subs	r0, r0, r3
 800a854:	2301      	movs	r3, #1
 800a856:	4083      	lsls	r3, r0
 800a858:	4313      	orrs	r3, r2
 800a85a:	0035      	movs	r5, r6
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	e7cc      	b.n	800a7fa <_vfiprintf_r+0xbe>
 800a860:	9b07      	ldr	r3, [sp, #28]
 800a862:	1d19      	adds	r1, r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	9107      	str	r1, [sp, #28]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	db01      	blt.n	800a870 <_vfiprintf_r+0x134>
 800a86c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a86e:	e004      	b.n	800a87a <_vfiprintf_r+0x13e>
 800a870:	425b      	negs	r3, r3
 800a872:	60e3      	str	r3, [r4, #12]
 800a874:	2302      	movs	r3, #2
 800a876:	4313      	orrs	r3, r2
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	7833      	ldrb	r3, [r6, #0]
 800a87c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a87e:	d10c      	bne.n	800a89a <_vfiprintf_r+0x15e>
 800a880:	7873      	ldrb	r3, [r6, #1]
 800a882:	2b2a      	cmp	r3, #42	@ 0x2a
 800a884:	d134      	bne.n	800a8f0 <_vfiprintf_r+0x1b4>
 800a886:	9b07      	ldr	r3, [sp, #28]
 800a888:	3602      	adds	r6, #2
 800a88a:	1d1a      	adds	r2, r3, #4
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	9207      	str	r2, [sp, #28]
 800a890:	2b00      	cmp	r3, #0
 800a892:	da01      	bge.n	800a898 <_vfiprintf_r+0x15c>
 800a894:	2301      	movs	r3, #1
 800a896:	425b      	negs	r3, r3
 800a898:	9309      	str	r3, [sp, #36]	@ 0x24
 800a89a:	4d32      	ldr	r5, [pc, #200]	@ (800a964 <_vfiprintf_r+0x228>)
 800a89c:	2203      	movs	r2, #3
 800a89e:	0028      	movs	r0, r5
 800a8a0:	7831      	ldrb	r1, [r6, #0]
 800a8a2:	f7fe f90c 	bl	8008abe <memchr>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d006      	beq.n	800a8b8 <_vfiprintf_r+0x17c>
 800a8aa:	2340      	movs	r3, #64	@ 0x40
 800a8ac:	1b40      	subs	r0, r0, r5
 800a8ae:	4083      	lsls	r3, r0
 800a8b0:	6822      	ldr	r2, [r4, #0]
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	7831      	ldrb	r1, [r6, #0]
 800a8ba:	2206      	movs	r2, #6
 800a8bc:	482a      	ldr	r0, [pc, #168]	@ (800a968 <_vfiprintf_r+0x22c>)
 800a8be:	1c75      	adds	r5, r6, #1
 800a8c0:	7621      	strb	r1, [r4, #24]
 800a8c2:	f7fe f8fc 	bl	8008abe <memchr>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d040      	beq.n	800a94c <_vfiprintf_r+0x210>
 800a8ca:	4b28      	ldr	r3, [pc, #160]	@ (800a96c <_vfiprintf_r+0x230>)
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d122      	bne.n	800a916 <_vfiprintf_r+0x1da>
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	9b07      	ldr	r3, [sp, #28]
 800a8d4:	3307      	adds	r3, #7
 800a8d6:	4393      	bics	r3, r2
 800a8d8:	3308      	adds	r3, #8
 800a8da:	9307      	str	r3, [sp, #28]
 800a8dc:	6963      	ldr	r3, [r4, #20]
 800a8de:	9a04      	ldr	r2, [sp, #16]
 800a8e0:	189b      	adds	r3, r3, r2
 800a8e2:	6163      	str	r3, [r4, #20]
 800a8e4:	e762      	b.n	800a7ac <_vfiprintf_r+0x70>
 800a8e6:	4343      	muls	r3, r0
 800a8e8:	002e      	movs	r6, r5
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	189b      	adds	r3, r3, r2
 800a8ee:	e7a4      	b.n	800a83a <_vfiprintf_r+0xfe>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	200a      	movs	r0, #10
 800a8f4:	0019      	movs	r1, r3
 800a8f6:	3601      	adds	r6, #1
 800a8f8:	6063      	str	r3, [r4, #4]
 800a8fa:	7832      	ldrb	r2, [r6, #0]
 800a8fc:	1c75      	adds	r5, r6, #1
 800a8fe:	3a30      	subs	r2, #48	@ 0x30
 800a900:	2a09      	cmp	r2, #9
 800a902:	d903      	bls.n	800a90c <_vfiprintf_r+0x1d0>
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0c8      	beq.n	800a89a <_vfiprintf_r+0x15e>
 800a908:	9109      	str	r1, [sp, #36]	@ 0x24
 800a90a:	e7c6      	b.n	800a89a <_vfiprintf_r+0x15e>
 800a90c:	4341      	muls	r1, r0
 800a90e:	002e      	movs	r6, r5
 800a910:	2301      	movs	r3, #1
 800a912:	1889      	adds	r1, r1, r2
 800a914:	e7f1      	b.n	800a8fa <_vfiprintf_r+0x1be>
 800a916:	aa07      	add	r2, sp, #28
 800a918:	9200      	str	r2, [sp, #0]
 800a91a:	0021      	movs	r1, r4
 800a91c:	003a      	movs	r2, r7
 800a91e:	4b14      	ldr	r3, [pc, #80]	@ (800a970 <_vfiprintf_r+0x234>)
 800a920:	9803      	ldr	r0, [sp, #12]
 800a922:	f7fd fb59 	bl	8007fd8 <_printf_float>
 800a926:	9004      	str	r0, [sp, #16]
 800a928:	9b04      	ldr	r3, [sp, #16]
 800a92a:	3301      	adds	r3, #1
 800a92c:	d1d6      	bne.n	800a8dc <_vfiprintf_r+0x1a0>
 800a92e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a930:	07db      	lsls	r3, r3, #31
 800a932:	d405      	bmi.n	800a940 <_vfiprintf_r+0x204>
 800a934:	89bb      	ldrh	r3, [r7, #12]
 800a936:	059b      	lsls	r3, r3, #22
 800a938:	d402      	bmi.n	800a940 <_vfiprintf_r+0x204>
 800a93a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a93c:	f7fe f8be 	bl	8008abc <__retarget_lock_release_recursive>
 800a940:	89bb      	ldrh	r3, [r7, #12]
 800a942:	065b      	lsls	r3, r3, #25
 800a944:	d500      	bpl.n	800a948 <_vfiprintf_r+0x20c>
 800a946:	e71e      	b.n	800a786 <_vfiprintf_r+0x4a>
 800a948:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a94a:	e71e      	b.n	800a78a <_vfiprintf_r+0x4e>
 800a94c:	aa07      	add	r2, sp, #28
 800a94e:	9200      	str	r2, [sp, #0]
 800a950:	0021      	movs	r1, r4
 800a952:	003a      	movs	r2, r7
 800a954:	4b06      	ldr	r3, [pc, #24]	@ (800a970 <_vfiprintf_r+0x234>)
 800a956:	9803      	ldr	r0, [sp, #12]
 800a958:	f7fd fdec 	bl	8008534 <_printf_i>
 800a95c:	e7e3      	b.n	800a926 <_vfiprintf_r+0x1ea>
 800a95e:	46c0      	nop			@ (mov r8, r8)
 800a960:	0800b16e 	.word	0x0800b16e
 800a964:	0800b174 	.word	0x0800b174
 800a968:	0800b178 	.word	0x0800b178
 800a96c:	08007fd9 	.word	0x08007fd9
 800a970:	0800a719 	.word	0x0800a719

0800a974 <__swbuf_r>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	0006      	movs	r6, r0
 800a978:	000d      	movs	r5, r1
 800a97a:	0014      	movs	r4, r2
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d004      	beq.n	800a98a <__swbuf_r+0x16>
 800a980:	6a03      	ldr	r3, [r0, #32]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <__swbuf_r+0x16>
 800a986:	f7fd ff71 	bl	800886c <__sinit>
 800a98a:	69a3      	ldr	r3, [r4, #24]
 800a98c:	60a3      	str	r3, [r4, #8]
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	071b      	lsls	r3, r3, #28
 800a992:	d502      	bpl.n	800a99a <__swbuf_r+0x26>
 800a994:	6923      	ldr	r3, [r4, #16]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d109      	bne.n	800a9ae <__swbuf_r+0x3a>
 800a99a:	0021      	movs	r1, r4
 800a99c:	0030      	movs	r0, r6
 800a99e:	f000 f82b 	bl	800a9f8 <__swsetup_r>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d003      	beq.n	800a9ae <__swbuf_r+0x3a>
 800a9a6:	2501      	movs	r5, #1
 800a9a8:	426d      	negs	r5, r5
 800a9aa:	0028      	movs	r0, r5
 800a9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ae:	6923      	ldr	r3, [r4, #16]
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	b2ef      	uxtb	r7, r5
 800a9b4:	1ac0      	subs	r0, r0, r3
 800a9b6:	6963      	ldr	r3, [r4, #20]
 800a9b8:	b2ed      	uxtb	r5, r5
 800a9ba:	4283      	cmp	r3, r0
 800a9bc:	dc05      	bgt.n	800a9ca <__swbuf_r+0x56>
 800a9be:	0021      	movs	r1, r4
 800a9c0:	0030      	movs	r0, r6
 800a9c2:	f7ff fd8b 	bl	800a4dc <_fflush_r>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d1ed      	bne.n	800a9a6 <__swbuf_r+0x32>
 800a9ca:	68a3      	ldr	r3, [r4, #8]
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	60a3      	str	r3, [r4, #8]
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	6022      	str	r2, [r4, #0]
 800a9d8:	701f      	strb	r7, [r3, #0]
 800a9da:	6963      	ldr	r3, [r4, #20]
 800a9dc:	4283      	cmp	r3, r0
 800a9de:	d004      	beq.n	800a9ea <__swbuf_r+0x76>
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	07db      	lsls	r3, r3, #31
 800a9e4:	d5e1      	bpl.n	800a9aa <__swbuf_r+0x36>
 800a9e6:	2d0a      	cmp	r5, #10
 800a9e8:	d1df      	bne.n	800a9aa <__swbuf_r+0x36>
 800a9ea:	0021      	movs	r1, r4
 800a9ec:	0030      	movs	r0, r6
 800a9ee:	f7ff fd75 	bl	800a4dc <_fflush_r>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d0d9      	beq.n	800a9aa <__swbuf_r+0x36>
 800a9f6:	e7d6      	b.n	800a9a6 <__swbuf_r+0x32>

0800a9f8 <__swsetup_r>:
 800a9f8:	4b2d      	ldr	r3, [pc, #180]	@ (800aab0 <__swsetup_r+0xb8>)
 800a9fa:	b570      	push	{r4, r5, r6, lr}
 800a9fc:	0005      	movs	r5, r0
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	000c      	movs	r4, r1
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d004      	beq.n	800aa10 <__swsetup_r+0x18>
 800aa06:	6a03      	ldr	r3, [r0, #32]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <__swsetup_r+0x18>
 800aa0c:	f7fd ff2e 	bl	800886c <__sinit>
 800aa10:	220c      	movs	r2, #12
 800aa12:	5ea3      	ldrsh	r3, [r4, r2]
 800aa14:	071a      	lsls	r2, r3, #28
 800aa16:	d423      	bmi.n	800aa60 <__swsetup_r+0x68>
 800aa18:	06da      	lsls	r2, r3, #27
 800aa1a:	d407      	bmi.n	800aa2c <__swsetup_r+0x34>
 800aa1c:	2209      	movs	r2, #9
 800aa1e:	602a      	str	r2, [r5, #0]
 800aa20:	2240      	movs	r2, #64	@ 0x40
 800aa22:	2001      	movs	r0, #1
 800aa24:	4313      	orrs	r3, r2
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	4240      	negs	r0, r0
 800aa2a:	e03a      	b.n	800aaa2 <__swsetup_r+0xaa>
 800aa2c:	075b      	lsls	r3, r3, #29
 800aa2e:	d513      	bpl.n	800aa58 <__swsetup_r+0x60>
 800aa30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa32:	2900      	cmp	r1, #0
 800aa34:	d008      	beq.n	800aa48 <__swsetup_r+0x50>
 800aa36:	0023      	movs	r3, r4
 800aa38:	3344      	adds	r3, #68	@ 0x44
 800aa3a:	4299      	cmp	r1, r3
 800aa3c:	d002      	beq.n	800aa44 <__swsetup_r+0x4c>
 800aa3e:	0028      	movs	r0, r5
 800aa40:	f7fe fec6 	bl	80097d0 <_free_r>
 800aa44:	2300      	movs	r3, #0
 800aa46:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa48:	2224      	movs	r2, #36	@ 0x24
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	4393      	bics	r3, r2
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	2300      	movs	r3, #0
 800aa52:	6063      	str	r3, [r4, #4]
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	2308      	movs	r3, #8
 800aa5a:	89a2      	ldrh	r2, [r4, #12]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	81a3      	strh	r3, [r4, #12]
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10b      	bne.n	800aa7e <__swsetup_r+0x86>
 800aa66:	21a0      	movs	r1, #160	@ 0xa0
 800aa68:	2280      	movs	r2, #128	@ 0x80
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	0089      	lsls	r1, r1, #2
 800aa6e:	0092      	lsls	r2, r2, #2
 800aa70:	400b      	ands	r3, r1
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d003      	beq.n	800aa7e <__swsetup_r+0x86>
 800aa76:	0021      	movs	r1, r4
 800aa78:	0028      	movs	r0, r5
 800aa7a:	f000 f88f 	bl	800ab9c <__smakebuf_r>
 800aa7e:	220c      	movs	r2, #12
 800aa80:	5ea3      	ldrsh	r3, [r4, r2]
 800aa82:	2101      	movs	r1, #1
 800aa84:	001a      	movs	r2, r3
 800aa86:	400a      	ands	r2, r1
 800aa88:	420b      	tst	r3, r1
 800aa8a:	d00b      	beq.n	800aaa4 <__swsetup_r+0xac>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	60a2      	str	r2, [r4, #8]
 800aa90:	6962      	ldr	r2, [r4, #20]
 800aa92:	4252      	negs	r2, r2
 800aa94:	61a2      	str	r2, [r4, #24]
 800aa96:	2000      	movs	r0, #0
 800aa98:	6922      	ldr	r2, [r4, #16]
 800aa9a:	4282      	cmp	r2, r0
 800aa9c:	d101      	bne.n	800aaa2 <__swsetup_r+0xaa>
 800aa9e:	061a      	lsls	r2, r3, #24
 800aaa0:	d4be      	bmi.n	800aa20 <__swsetup_r+0x28>
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	0799      	lsls	r1, r3, #30
 800aaa6:	d400      	bmi.n	800aaaa <__swsetup_r+0xb2>
 800aaa8:	6962      	ldr	r2, [r4, #20]
 800aaaa:	60a2      	str	r2, [r4, #8]
 800aaac:	e7f3      	b.n	800aa96 <__swsetup_r+0x9e>
 800aaae:	46c0      	nop			@ (mov r8, r8)
 800aab0:	20000018 	.word	0x20000018

0800aab4 <_raise_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	0004      	movs	r4, r0
 800aab8:	000d      	movs	r5, r1
 800aaba:	291f      	cmp	r1, #31
 800aabc:	d904      	bls.n	800aac8 <_raise_r+0x14>
 800aabe:	2316      	movs	r3, #22
 800aac0:	6003      	str	r3, [r0, #0]
 800aac2:	2001      	movs	r0, #1
 800aac4:	4240      	negs	r0, r0
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <_raise_r+0x24>
 800aace:	008a      	lsls	r2, r1, #2
 800aad0:	189b      	adds	r3, r3, r2
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	2a00      	cmp	r2, #0
 800aad6:	d108      	bne.n	800aaea <_raise_r+0x36>
 800aad8:	0020      	movs	r0, r4
 800aada:	f000 f831 	bl	800ab40 <_getpid_r>
 800aade:	002a      	movs	r2, r5
 800aae0:	0001      	movs	r1, r0
 800aae2:	0020      	movs	r0, r4
 800aae4:	f000 f81a 	bl	800ab1c <_kill_r>
 800aae8:	e7ed      	b.n	800aac6 <_raise_r+0x12>
 800aaea:	2a01      	cmp	r2, #1
 800aaec:	d009      	beq.n	800ab02 <_raise_r+0x4e>
 800aaee:	1c51      	adds	r1, r2, #1
 800aaf0:	d103      	bne.n	800aafa <_raise_r+0x46>
 800aaf2:	2316      	movs	r3, #22
 800aaf4:	6003      	str	r3, [r0, #0]
 800aaf6:	2001      	movs	r0, #1
 800aaf8:	e7e5      	b.n	800aac6 <_raise_r+0x12>
 800aafa:	2100      	movs	r1, #0
 800aafc:	0028      	movs	r0, r5
 800aafe:	6019      	str	r1, [r3, #0]
 800ab00:	4790      	blx	r2
 800ab02:	2000      	movs	r0, #0
 800ab04:	e7df      	b.n	800aac6 <_raise_r+0x12>
	...

0800ab08 <raise>:
 800ab08:	b510      	push	{r4, lr}
 800ab0a:	4b03      	ldr	r3, [pc, #12]	@ (800ab18 <raise+0x10>)
 800ab0c:	0001      	movs	r1, r0
 800ab0e:	6818      	ldr	r0, [r3, #0]
 800ab10:	f7ff ffd0 	bl	800aab4 <_raise_r>
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	46c0      	nop			@ (mov r8, r8)
 800ab18:	20000018 	.word	0x20000018

0800ab1c <_kill_r>:
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	b570      	push	{r4, r5, r6, lr}
 800ab20:	4d06      	ldr	r5, [pc, #24]	@ (800ab3c <_kill_r+0x20>)
 800ab22:	0004      	movs	r4, r0
 800ab24:	0008      	movs	r0, r1
 800ab26:	0011      	movs	r1, r2
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	f7fa fb52 	bl	80051d2 <_kill>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	d103      	bne.n	800ab3a <_kill_r+0x1e>
 800ab32:	682b      	ldr	r3, [r5, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d000      	beq.n	800ab3a <_kill_r+0x1e>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	2000145c 	.word	0x2000145c

0800ab40 <_getpid_r>:
 800ab40:	b510      	push	{r4, lr}
 800ab42:	f7fa fb40 	bl	80051c6 <_getpid>
 800ab46:	bd10      	pop	{r4, pc}

0800ab48 <__swhatbuf_r>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	000e      	movs	r6, r1
 800ab4c:	001d      	movs	r5, r3
 800ab4e:	230e      	movs	r3, #14
 800ab50:	5ec9      	ldrsh	r1, [r1, r3]
 800ab52:	0014      	movs	r4, r2
 800ab54:	b096      	sub	sp, #88	@ 0x58
 800ab56:	2900      	cmp	r1, #0
 800ab58:	da0c      	bge.n	800ab74 <__swhatbuf_r+0x2c>
 800ab5a:	89b2      	ldrh	r2, [r6, #12]
 800ab5c:	2380      	movs	r3, #128	@ 0x80
 800ab5e:	0011      	movs	r1, r2
 800ab60:	4019      	ands	r1, r3
 800ab62:	421a      	tst	r2, r3
 800ab64:	d114      	bne.n	800ab90 <__swhatbuf_r+0x48>
 800ab66:	2380      	movs	r3, #128	@ 0x80
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	6029      	str	r1, [r5, #0]
 800ab6e:	6023      	str	r3, [r4, #0]
 800ab70:	b016      	add	sp, #88	@ 0x58
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	466a      	mov	r2, sp
 800ab76:	f000 f853 	bl	800ac20 <_fstat_r>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	dbed      	blt.n	800ab5a <__swhatbuf_r+0x12>
 800ab7e:	23f0      	movs	r3, #240	@ 0xf0
 800ab80:	9901      	ldr	r1, [sp, #4]
 800ab82:	021b      	lsls	r3, r3, #8
 800ab84:	4019      	ands	r1, r3
 800ab86:	4b04      	ldr	r3, [pc, #16]	@ (800ab98 <__swhatbuf_r+0x50>)
 800ab88:	18c9      	adds	r1, r1, r3
 800ab8a:	424b      	negs	r3, r1
 800ab8c:	4159      	adcs	r1, r3
 800ab8e:	e7ea      	b.n	800ab66 <__swhatbuf_r+0x1e>
 800ab90:	2100      	movs	r1, #0
 800ab92:	2340      	movs	r3, #64	@ 0x40
 800ab94:	e7e9      	b.n	800ab6a <__swhatbuf_r+0x22>
 800ab96:	46c0      	nop			@ (mov r8, r8)
 800ab98:	ffffe000 	.word	0xffffe000

0800ab9c <__smakebuf_r>:
 800ab9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab9e:	2602      	movs	r6, #2
 800aba0:	898b      	ldrh	r3, [r1, #12]
 800aba2:	0005      	movs	r5, r0
 800aba4:	000c      	movs	r4, r1
 800aba6:	b085      	sub	sp, #20
 800aba8:	4233      	tst	r3, r6
 800abaa:	d007      	beq.n	800abbc <__smakebuf_r+0x20>
 800abac:	0023      	movs	r3, r4
 800abae:	3347      	adds	r3, #71	@ 0x47
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	2301      	movs	r3, #1
 800abb6:	6163      	str	r3, [r4, #20]
 800abb8:	b005      	add	sp, #20
 800abba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abbc:	ab03      	add	r3, sp, #12
 800abbe:	aa02      	add	r2, sp, #8
 800abc0:	f7ff ffc2 	bl	800ab48 <__swhatbuf_r>
 800abc4:	9f02      	ldr	r7, [sp, #8]
 800abc6:	9001      	str	r0, [sp, #4]
 800abc8:	0039      	movs	r1, r7
 800abca:	0028      	movs	r0, r5
 800abcc:	f7fe fe76 	bl	80098bc <_malloc_r>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d108      	bne.n	800abe6 <__smakebuf_r+0x4a>
 800abd4:	220c      	movs	r2, #12
 800abd6:	5ea3      	ldrsh	r3, [r4, r2]
 800abd8:	059a      	lsls	r2, r3, #22
 800abda:	d4ed      	bmi.n	800abb8 <__smakebuf_r+0x1c>
 800abdc:	2203      	movs	r2, #3
 800abde:	4393      	bics	r3, r2
 800abe0:	431e      	orrs	r6, r3
 800abe2:	81a6      	strh	r6, [r4, #12]
 800abe4:	e7e2      	b.n	800abac <__smakebuf_r+0x10>
 800abe6:	2380      	movs	r3, #128	@ 0x80
 800abe8:	89a2      	ldrh	r2, [r4, #12]
 800abea:	6020      	str	r0, [r4, #0]
 800abec:	4313      	orrs	r3, r2
 800abee:	81a3      	strh	r3, [r4, #12]
 800abf0:	9b03      	ldr	r3, [sp, #12]
 800abf2:	6120      	str	r0, [r4, #16]
 800abf4:	6167      	str	r7, [r4, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00c      	beq.n	800ac14 <__smakebuf_r+0x78>
 800abfa:	0028      	movs	r0, r5
 800abfc:	230e      	movs	r3, #14
 800abfe:	5ee1      	ldrsh	r1, [r4, r3]
 800ac00:	f000 f820 	bl	800ac44 <_isatty_r>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d005      	beq.n	800ac14 <__smakebuf_r+0x78>
 800ac08:	2303      	movs	r3, #3
 800ac0a:	89a2      	ldrh	r2, [r4, #12]
 800ac0c:	439a      	bics	r2, r3
 800ac0e:	3b02      	subs	r3, #2
 800ac10:	4313      	orrs	r3, r2
 800ac12:	81a3      	strh	r3, [r4, #12]
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	9a01      	ldr	r2, [sp, #4]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	81a3      	strh	r3, [r4, #12]
 800ac1c:	e7cc      	b.n	800abb8 <__smakebuf_r+0x1c>
	...

0800ac20 <_fstat_r>:
 800ac20:	2300      	movs	r3, #0
 800ac22:	b570      	push	{r4, r5, r6, lr}
 800ac24:	4d06      	ldr	r5, [pc, #24]	@ (800ac40 <_fstat_r+0x20>)
 800ac26:	0004      	movs	r4, r0
 800ac28:	0008      	movs	r0, r1
 800ac2a:	0011      	movs	r1, r2
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	f7fa fb30 	bl	8005292 <_fstat>
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	d103      	bne.n	800ac3e <_fstat_r+0x1e>
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d000      	beq.n	800ac3e <_fstat_r+0x1e>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd70      	pop	{r4, r5, r6, pc}
 800ac40:	2000145c 	.word	0x2000145c

0800ac44 <_isatty_r>:
 800ac44:	2300      	movs	r3, #0
 800ac46:	b570      	push	{r4, r5, r6, lr}
 800ac48:	4d06      	ldr	r5, [pc, #24]	@ (800ac64 <_isatty_r+0x20>)
 800ac4a:	0004      	movs	r4, r0
 800ac4c:	0008      	movs	r0, r1
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7fa fb2d 	bl	80052ae <_isatty>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d103      	bne.n	800ac60 <_isatty_r+0x1c>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d000      	beq.n	800ac60 <_isatty_r+0x1c>
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	bd70      	pop	{r4, r5, r6, pc}
 800ac62:	46c0      	nop			@ (mov r8, r8)
 800ac64:	2000145c 	.word	0x2000145c

0800ac68 <_init>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	46c0      	nop			@ (mov r8, r8)
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr

0800ac74 <_fini>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	46c0      	nop			@ (mov r8, r8)
 800ac78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7a:	bc08      	pop	{r3}
 800ac7c:	469e      	mov	lr, r3
 800ac7e:	4770      	bx	lr
